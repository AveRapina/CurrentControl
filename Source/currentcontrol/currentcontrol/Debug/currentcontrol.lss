
currentcontrol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001e1c  00001ed0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e1c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001df  00800120  00800120  00001ef0  2**0
                  ALLOC
  3 .eeprom       00000021  00810000  00810000  00001ef0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00001f11  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00001f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bd2  00000000  00000000  0000226d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b6  00000000  00000000  00003e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014a2  00000000  00000000  000046f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008ec  00000000  00000000  00005b98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a00  00000000  00000000  00006484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001740  00000000  00000000  00006e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  000085c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	63 c0       	rjmp	.+198    	; 0xc8 <__ctors_end>
       2:	00 00       	nop
       4:	df c4       	rjmp	.+2494   	; 0x9c4 <__vector_1>
       6:	00 00       	nop
       8:	e7 c4       	rjmp	.+2510   	; 0x9d8 <__vector_2>
       a:	00 00       	nop
       c:	ef c4       	rjmp	.+2526   	; 0x9ec <__vector_3>
       e:	00 00       	nop
      10:	f7 c4       	rjmp	.+2542   	; 0xa00 <__vector_4>
      12:	00 00       	nop
      14:	ff c4       	rjmp	.+2558   	; 0xa14 <__vector_5>
      16:	00 00       	nop
      18:	07 c5       	rjmp	.+2574   	; 0xa28 <__vector_6>
      1a:	00 00       	nop
      1c:	0f c5       	rjmp	.+2590   	; 0xa3c <__vector_7>
      1e:	00 00       	nop
      20:	17 c5       	rjmp	.+2606   	; 0xa50 <__vector_8>
      22:	00 00       	nop
      24:	1f c5       	rjmp	.+2622   	; 0xa64 <__vector_9>
      26:	00 00       	nop
      28:	27 c5       	rjmp	.+2638   	; 0xa78 <__vector_10>
      2a:	00 00       	nop
      2c:	2f c5       	rjmp	.+2654   	; 0xa8c <__vector_11>
      2e:	00 00       	nop
      30:	37 c5       	rjmp	.+2670   	; 0xaa0 <__vector_12>
      32:	00 00       	nop
      34:	3f c5       	rjmp	.+2686   	; 0xab4 <__vector_13>
      36:	00 00       	nop
      38:	47 c5       	rjmp	.+2702   	; 0xac8 <__vector_14>
      3a:	00 00       	nop
      3c:	4f c5       	rjmp	.+2718   	; 0xadc <__vector_15>
      3e:	00 00       	nop
      40:	57 c5       	rjmp	.+2734   	; 0xaf0 <__vector_16>
      42:	00 00       	nop
      44:	a0 c5       	rjmp	.+2880   	; 0xb86 <__vector_17>
      46:	00 00       	nop
      48:	a8 c5       	rjmp	.+2896   	; 0xb9a <__vector_18>
      4a:	00 00       	nop
      4c:	ce c5       	rjmp	.+2972   	; 0xbea <__vector_19>
      4e:	00 00       	nop
      50:	d6 c5       	rjmp	.+2988   	; 0xbfe <__vector_20>
      52:	00 00       	nop
      54:	de c5       	rjmp	.+3004   	; 0xc12 <__vector_21>
      56:	00 00       	nop
      58:	e6 c5       	rjmp	.+3020   	; 0xc26 <__vector_22>
      5a:	00 00       	nop
      5c:	ee c5       	rjmp	.+3036   	; 0xc3a <__vector_23>
      5e:	00 00       	nop
      60:	f6 c5       	rjmp	.+3052   	; 0xc4e <__vector_24>
      62:	00 00       	nop
      64:	fe c5       	rjmp	.+3068   	; 0xc62 <__vector_25>
      66:	00 00       	nop
      68:	06 c6       	rjmp	.+3084   	; 0xc76 <__vector_26>
      6a:	00 00       	nop
      6c:	0e c6       	rjmp	.+3100   	; 0xc8a <__vector_27>
      6e:	00 00       	nop
      70:	16 c6       	rjmp	.+3116   	; 0xc9e <__vector_28>
      72:	00 00       	nop
      74:	1e c6       	rjmp	.+3132   	; 0xcb2 <__vector_29>
      76:	00 00       	nop
      78:	26 c6       	rjmp	.+3148   	; 0xcc6 <__vector_30>
      7a:	00 00       	nop
      7c:	69 c6       	rjmp	.+3282   	; 0xd50 <__vector_31>
      7e:	00 00       	nop
      80:	71 c6       	rjmp	.+3298   	; 0xd64 <__vector_32>
      82:	00 00       	nop
      84:	79 c6       	rjmp	.+3314   	; 0xd78 <__vector_33>
      86:	00 00       	nop
      88:	81 c6       	rjmp	.+3330   	; 0xd8c <__vector_34>
	...

0000008c <__trampolines_end>:
      8c:	4e 41       	sbci	r20, 0x1E	; 30
      8e:	4e 49       	sbci	r20, 0x9E	; 158

0000008f <pstr_inity>:
      8f:	49 4e 49 54 59                                      INITY

00000094 <pstr_inf>:
      94:	49 4e 46                                            INF

00000097 <pwr_m10>:
      97:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      a7:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000af <pwr_p10>:
      af:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      bf:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d0 e1       	ldi	r29, 0x10	; 16
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	ec e1       	ldi	r30, 0x1C	; 28
      dc:	fe e1       	ldi	r31, 0x1E	; 30
      de:	00 e0       	ldi	r16, 0x00	; 0
      e0:	0b bf       	out	0x3b, r16	; 59
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x14>
      e4:	07 90       	elpm	r0, Z+
      e6:	0d 92       	st	X+, r0
      e8:	a0 32       	cpi	r26, 0x20	; 32
      ea:	b1 07       	cpc	r27, r17
      ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0x10>

000000ee <__do_clear_bss>:
      ee:	22 e0       	ldi	r18, 0x02	; 2
      f0:	a0 e2       	ldi	r26, 0x20	; 32
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
      f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
      f8:	af 3f       	cpi	r26, 0xFF	; 255
      fa:	b2 07       	cpc	r27, r18
      fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
      fe:	a6 d3       	rcall	.+1868   	; 0x84c <main>
     100:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <_exit>

00000104 <paramLoadDefaultParameters>:

/************************************************************************/
/* load default parameters                                                                     */
/************************************************************************/
void paramLoadDefaultParameters(void){
	pidP = PIDP_DEFAULT;
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	a0 ec       	ldi	r26, 0xC0	; 192
     10a:	bf e3       	ldi	r27, 0x3F	; 63
     10c:	80 93 43 01 	sts	0x0143, r24
     110:	90 93 44 01 	sts	0x0144, r25
     114:	a0 93 45 01 	sts	0x0145, r26
     118:	b0 93 46 01 	sts	0x0146, r27
	pidD = PIDD_DEFAULT;
     11c:	10 92 79 01 	sts	0x0179, r1
     120:	10 92 7a 01 	sts	0x017A, r1
     124:	10 92 7b 01 	sts	0x017B, r1
     128:	10 92 7c 01 	sts	0x017C, r1
	pidI = PIDI_DEFAULT;
     12c:	8d ec       	ldi	r24, 0xCD	; 205
     12e:	9c ec       	ldi	r25, 0xCC	; 204
     130:	ac e4       	ldi	r26, 0x4C	; 76
     132:	be e3       	ldi	r27, 0x3E	; 62
     134:	80 93 52 01 	sts	0x0152, r24
     138:	90 93 53 01 	sts	0x0153, r25
     13c:	a0 93 54 01 	sts	0x0154, r26
     140:	b0 93 55 01 	sts	0x0155, r27
	pidPerrMax = PIDP_EMAX_DEFAULT;
     144:	20 ee       	ldi	r18, 0xE0	; 224
     146:	3e e2       	ldi	r19, 0x2E	; 46
     148:	30 93 4e 01 	sts	0x014E, r19
     14c:	20 93 4d 01 	sts	0x014D, r18
	pidPerrMin = PIDP_EMIN_DEFAULT;
     150:	80 e2       	ldi	r24, 0x20	; 32
     152:	91 ed       	ldi	r25, 0xD1	; 209
     154:	90 93 9c 01 	sts	0x019C, r25
     158:	80 93 9b 01 	sts	0x019B, r24
	pidIerrMax = PIDI_EMAX_DEFAULT;
     15c:	30 93 48 01 	sts	0x0148, r19
     160:	20 93 47 01 	sts	0x0147, r18
	pidIerrMin = PIDI_EMIN_DEFAULT;
     164:	90 93 4c 01 	sts	0x014C, r25
     168:	80 93 4b 01 	sts	0x014B, r24
	offset = OFFSET_DEFAULT;
     16c:	10 92 57 01 	sts	0x0157, r1
     170:	10 92 56 01 	sts	0x0156, r1
	setpoint = SETPOINT_DEFAULT;
     174:	10 92 42 01 	sts	0x0142, r1
     178:	10 92 41 01 	sts	0x0141, r1
	setpointidlethresholdoffsetdown = SETPOINTIDLETHRESHOLDOFFSETDOWN_DEFAULT;
     17c:	8e ec       	ldi	r24, 0xCE	; 206
     17e:	9f ef       	ldi	r25, 0xFF	; 255
     180:	90 93 51 01 	sts	0x0151, r25
     184:	80 93 50 01 	sts	0x0150, r24
	setpointidlethresholdoffsetup = SETPOINTIDLETHRESHOLDOFFSETUP_DEFAULT;
     188:	8e e6       	ldi	r24, 0x6E	; 110
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	90 93 4a 01 	sts	0x014A, r25
     190:	80 93 49 01 	sts	0x0149, r24
	
	slopeValue =SLOPE_VAL_DEFAULT;
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	a0 e8       	ldi	r26, 0x80	; 128
     19a:	bf e3       	ldi	r27, 0x3F	; 63
     19c:	80 93 02 01 	sts	0x0102, r24
     1a0:	90 93 03 01 	sts	0x0103, r25
     1a4:	a0 93 04 01 	sts	0x0104, r26
     1a8:	b0 93 05 01 	sts	0x0105, r27
     1ac:	08 95       	ret

000001ae <paramConvertFromTokens>:
/************************************************************************/
uint8_t paramConvertFromTokens(uint8_t n){
	
	
	
	if(n == N_MSG_TOKENS){
     1ae:	8b 30       	cpi	r24, 0x0B	; 11
     1b0:	09 f0       	breq	.+2      	; 0x1b4 <paramConvertFromTokens+0x6>
     1b2:	72 c0       	rjmp	.+228    	; 0x298 <paramConvertFromTokens+0xea>
		
		pidP = atof(tokenParts[0]);
     1b4:	81 ed       	ldi	r24, 0xD1	; 209
     1b6:	91 e0       	ldi	r25, 0x01	; 1
     1b8:	0e 94 57 0a 	call	0x14ae	; 0x14ae <atof>
     1bc:	60 93 43 01 	sts	0x0143, r22
     1c0:	70 93 44 01 	sts	0x0144, r23
     1c4:	80 93 45 01 	sts	0x0145, r24
     1c8:	90 93 46 01 	sts	0x0146, r25
		pidI = atof(tokenParts[1]);
     1cc:	85 ee       	ldi	r24, 0xE5	; 229
     1ce:	91 e0       	ldi	r25, 0x01	; 1
     1d0:	0e 94 57 0a 	call	0x14ae	; 0x14ae <atof>
     1d4:	60 93 52 01 	sts	0x0152, r22
     1d8:	70 93 53 01 	sts	0x0153, r23
     1dc:	80 93 54 01 	sts	0x0154, r24
     1e0:	90 93 55 01 	sts	0x0155, r25
		pidD = atof(tokenParts[2]);
     1e4:	89 ef       	ldi	r24, 0xF9	; 249
     1e6:	91 e0       	ldi	r25, 0x01	; 1
     1e8:	0e 94 57 0a 	call	0x14ae	; 0x14ae <atof>
     1ec:	60 93 79 01 	sts	0x0179, r22
     1f0:	70 93 7a 01 	sts	0x017A, r23
     1f4:	80 93 7b 01 	sts	0x017B, r24
     1f8:	90 93 7c 01 	sts	0x017C, r25
		
		pidPerrMin = atoi(tokenParts[3]);
     1fc:	8d e0       	ldi	r24, 0x0D	; 13
     1fe:	92 e0       	ldi	r25, 0x02	; 2
     200:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <atoi>
     204:	90 93 9c 01 	sts	0x019C, r25
     208:	80 93 9b 01 	sts	0x019B, r24
		pidPerrMax = atoi(tokenParts[4]);
     20c:	81 e2       	ldi	r24, 0x21	; 33
     20e:	92 e0       	ldi	r25, 0x02	; 2
     210:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <atoi>
     214:	90 93 4e 01 	sts	0x014E, r25
     218:	80 93 4d 01 	sts	0x014D, r24
		pidIerrMin = atoi(tokenParts[5]);
     21c:	85 e3       	ldi	r24, 0x35	; 53
     21e:	92 e0       	ldi	r25, 0x02	; 2
     220:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <atoi>
     224:	90 93 4c 01 	sts	0x014C, r25
     228:	80 93 4b 01 	sts	0x014B, r24
		pidIerrMax = atoi(tokenParts[6]);
     22c:	89 e4       	ldi	r24, 0x49	; 73
     22e:	92 e0       	ldi	r25, 0x02	; 2
     230:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <atoi>
     234:	90 93 48 01 	sts	0x0148, r25
     238:	80 93 47 01 	sts	0x0147, r24
		
		
		offset = atoi(tokenParts[7]);
     23c:	8d e5       	ldi	r24, 0x5D	; 93
     23e:	92 e0       	ldi	r25, 0x02	; 2
     240:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <atoi>
     244:	90 93 57 01 	sts	0x0157, r25
     248:	80 93 56 01 	sts	0x0156, r24
		setpoint = atoi(tokenParts[8]);
     24c:	81 e7       	ldi	r24, 0x71	; 113
     24e:	92 e0       	ldi	r25, 0x02	; 2
     250:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <atoi>
     254:	90 93 42 01 	sts	0x0142, r25
     258:	80 93 41 01 	sts	0x0141, r24
		setpointidlethresholdoffsetdown =atoi(tokenParts[9]);
     25c:	85 e8       	ldi	r24, 0x85	; 133
     25e:	92 e0       	ldi	r25, 0x02	; 2
     260:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <atoi>
     264:	90 93 51 01 	sts	0x0151, r25
     268:	80 93 50 01 	sts	0x0150, r24
		setpointidlethresholdoffsetup = atoi(tokenParts[10]);
     26c:	89 e9       	ldi	r24, 0x99	; 153
     26e:	92 e0       	ldi	r25, 0x02	; 2
     270:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <atoi>
     274:	90 93 4a 01 	sts	0x014A, r25
     278:	80 93 49 01 	sts	0x0149, r24
		slopeValue = atof(tokenParts[11]);
     27c:	8d ea       	ldi	r24, 0xAD	; 173
     27e:	92 e0       	ldi	r25, 0x02	; 2
     280:	0e 94 57 0a 	call	0x14ae	; 0x14ae <atof>
     284:	60 93 02 01 	sts	0x0102, r22
     288:	70 93 03 01 	sts	0x0103, r23
     28c:	80 93 04 01 	sts	0x0104, r24
     290:	90 93 05 01 	sts	0x0105, r25


		
		return 1; // all parseed 
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	08 95       	ret
	}
	
	return 0; // message invalid
     298:	80 e0       	ldi	r24, 0x00	; 0
	
	
	
}
     29a:	08 95       	ret

0000029c <eepromSetDefaultParameters>:

/************************************************************************/
/* @ set initial values to eeprom  if nothin there yet                                                                   */
/************************************************************************/
void eepromSetDefaultParameters(){
	eestruct_var.initEeprom=1; // emprom init
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	80 93 58 01 	sts	0x0158, r24
	
	eestruct_var.pidP = PIDP_DEFAULT;
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	a0 ec       	ldi	r26, 0xC0	; 192
     2a8:	bf e3       	ldi	r27, 0x3F	; 63
     2aa:	80 93 61 01 	sts	0x0161, r24
     2ae:	90 93 62 01 	sts	0x0162, r25
     2b2:	a0 93 63 01 	sts	0x0163, r26
     2b6:	b0 93 64 01 	sts	0x0164, r27
	eestruct_var.pidI = PIDI_DEFAULT;
     2ba:	8d ec       	ldi	r24, 0xCD	; 205
     2bc:	9c ec       	ldi	r25, 0xCC	; 204
     2be:	ac e4       	ldi	r26, 0x4C	; 76
     2c0:	be e3       	ldi	r27, 0x3E	; 62
     2c2:	80 93 69 01 	sts	0x0169, r24
     2c6:	90 93 6a 01 	sts	0x016A, r25
     2ca:	a0 93 6b 01 	sts	0x016B, r26
     2ce:	b0 93 6c 01 	sts	0x016C, r27
	eestruct_var.pidD = PIDD_DEFAULT;
     2d2:	10 92 65 01 	sts	0x0165, r1
     2d6:	10 92 66 01 	sts	0x0166, r1
     2da:	10 92 67 01 	sts	0x0167, r1
     2de:	10 92 68 01 	sts	0x0168, r1
	eestruct_var.pidPerrMin = PIDP_EMIN_DEFAULT;
     2e2:	20 e2       	ldi	r18, 0x20	; 32
     2e4:	31 ed       	ldi	r19, 0xD1	; 209
     2e6:	30 93 5a 01 	sts	0x015A, r19
     2ea:	20 93 59 01 	sts	0x0159, r18
	eestruct_var.pidPerrMax = PIDP_EMAX_DEFAULT;
     2ee:	80 ee       	ldi	r24, 0xE0	; 224
     2f0:	9e e2       	ldi	r25, 0x2E	; 46
     2f2:	90 93 5c 01 	sts	0x015C, r25
     2f6:	80 93 5b 01 	sts	0x015B, r24
	eestruct_var.pidIerrMin = PIDI_EMIN_DEFAULT;
     2fa:	30 93 5e 01 	sts	0x015E, r19
     2fe:	20 93 5d 01 	sts	0x015D, r18
	eestruct_var.pidIerrMax = PIDI_EMAX_DEFAULT;
     302:	90 93 60 01 	sts	0x0160, r25
     306:	80 93 5f 01 	sts	0x015F, r24
	eestruct_var.offset = OFFSET_DEFAULT;
     30a:	10 92 6e 01 	sts	0x016E, r1
     30e:	10 92 6d 01 	sts	0x016D, r1
	eestruct_var.setpoint = SETPOINT_DEFAULT;
     312:	10 92 70 01 	sts	0x0170, r1
     316:	10 92 6f 01 	sts	0x016F, r1
	eestruct_var.setpointidlethresholdoffsetdown = SETPOINTIDLETHRESHOLDOFFSETDOWN_DEFAULT;
     31a:	8e ec       	ldi	r24, 0xCE	; 206
     31c:	9f ef       	ldi	r25, 0xFF	; 255
     31e:	90 93 72 01 	sts	0x0172, r25
     322:	80 93 71 01 	sts	0x0171, r24
	eestruct_var.setpointidlethresholdoffsetup = SETPOINTIDLETHRESHOLDOFFSETUP_DEFAULT;
     326:	8e e6       	ldi	r24, 0x6E	; 110
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	90 93 74 01 	sts	0x0174, r25
     32e:	80 93 73 01 	sts	0x0173, r24
	
	eestruct_var.slopeValue = SLOPE_VAL_DEFAULT;
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	a0 e8       	ldi	r26, 0x80	; 128
     338:	bf e3       	ldi	r27, 0x3F	; 63
     33a:	80 93 75 01 	sts	0x0175, r24
     33e:	90 93 76 01 	sts	0x0176, r25
     342:	a0 93 77 01 	sts	0x0177, r26
     346:	b0 93 78 01 	sts	0x0178, r27
	
	eeprom_write_block((const void*)&eestruct_var,(void*)&eestruct_eemem,sizeof(eestruct_t));
     34a:	41 e2       	ldi	r20, 0x21	; 33
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	88 e5       	ldi	r24, 0x58	; 88
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__eewr_block_m128>
     35a:	08 95       	ret

0000035c <paramLoadFromEeprom>:
/* @restore to EEPROM                                                                     */
/************************************************************************/
void paramLoadFromEeprom(){
uint8_t temp=0;	
	// read from emprom
	eeprom_read_block((void*)&eestruct_var, (const void*)&eestruct_eemem,sizeof(eestruct_t));
     35c:	41 e2       	ldi	r20, 0x21	; 33
     35e:	50 e0       	ldi	r21, 0x00	; 0
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	88 e5       	ldi	r24, 0x58	; 88
     366:	91 e0       	ldi	r25, 0x01	; 1
     368:	0e 94 b5 0c 	call	0x196a	; 0x196a <__eerd_block_m128>
	
	// test the fits field to check if it was written else use default and load
	if((eestruct_var.initEeprom &0xFF) ==0xFF){
     36c:	80 91 58 01 	lds	r24, 0x0158
     370:	8f 3f       	cpi	r24, 0xFF	; 255
     372:	19 f4       	brne	.+6      	; 0x37a <paramLoadFromEeprom+0x1e>
		eepromSetDefaultParameters();
     374:	93 df       	rcall	.-218    	; 0x29c <eepromSetDefaultParameters>
		paramLoadDefaultParameters();
     376:	c6 ce       	rjmp	.-628    	; 0x104 <paramLoadDefaultParameters>
     378:	08 95       	ret
		
	}
	else{
		// write to the global variables
		pidP = eestruct_var.pidP;
     37a:	80 91 61 01 	lds	r24, 0x0161
     37e:	90 91 62 01 	lds	r25, 0x0162
     382:	a0 91 63 01 	lds	r26, 0x0163
     386:	b0 91 64 01 	lds	r27, 0x0164
     38a:	80 93 43 01 	sts	0x0143, r24
     38e:	90 93 44 01 	sts	0x0144, r25
     392:	a0 93 45 01 	sts	0x0145, r26
     396:	b0 93 46 01 	sts	0x0146, r27
		pidI = eestruct_var.pidI;
     39a:	80 91 69 01 	lds	r24, 0x0169
     39e:	90 91 6a 01 	lds	r25, 0x016A
     3a2:	a0 91 6b 01 	lds	r26, 0x016B
     3a6:	b0 91 6c 01 	lds	r27, 0x016C
     3aa:	80 93 52 01 	sts	0x0152, r24
     3ae:	90 93 53 01 	sts	0x0153, r25
     3b2:	a0 93 54 01 	sts	0x0154, r26
     3b6:	b0 93 55 01 	sts	0x0155, r27
		pidD = eestruct_var.pidD;
     3ba:	80 91 65 01 	lds	r24, 0x0165
     3be:	90 91 66 01 	lds	r25, 0x0166
     3c2:	a0 91 67 01 	lds	r26, 0x0167
     3c6:	b0 91 68 01 	lds	r27, 0x0168
     3ca:	80 93 79 01 	sts	0x0179, r24
     3ce:	90 93 7a 01 	sts	0x017A, r25
     3d2:	a0 93 7b 01 	sts	0x017B, r26
     3d6:	b0 93 7c 01 	sts	0x017C, r27
		pidPerrMin = eestruct_var.pidPerrMin;
     3da:	80 91 59 01 	lds	r24, 0x0159
     3de:	90 91 5a 01 	lds	r25, 0x015A
     3e2:	90 93 9c 01 	sts	0x019C, r25
     3e6:	80 93 9b 01 	sts	0x019B, r24
		pidPerrMax = eestruct_var.pidPerrMax;
     3ea:	80 91 5b 01 	lds	r24, 0x015B
     3ee:	90 91 5c 01 	lds	r25, 0x015C
     3f2:	90 93 4e 01 	sts	0x014E, r25
     3f6:	80 93 4d 01 	sts	0x014D, r24
		pidIerrMin = eestruct_var.pidIerrMin;
     3fa:	80 91 5d 01 	lds	r24, 0x015D
     3fe:	90 91 5e 01 	lds	r25, 0x015E
     402:	90 93 4c 01 	sts	0x014C, r25
     406:	80 93 4b 01 	sts	0x014B, r24
		pidIerrMax = eestruct_var.pidIerrMax;
     40a:	80 91 5f 01 	lds	r24, 0x015F
     40e:	90 91 60 01 	lds	r25, 0x0160
     412:	90 93 48 01 	sts	0x0148, r25
     416:	80 93 47 01 	sts	0x0147, r24
		offset = eestruct_var.offset;
     41a:	80 91 6d 01 	lds	r24, 0x016D
     41e:	90 91 6e 01 	lds	r25, 0x016E
     422:	90 93 57 01 	sts	0x0157, r25
     426:	80 93 56 01 	sts	0x0156, r24
		setpoint = eestruct_var.setpoint;
     42a:	80 91 6f 01 	lds	r24, 0x016F
     42e:	90 91 70 01 	lds	r25, 0x0170
     432:	90 93 42 01 	sts	0x0142, r25
     436:	80 93 41 01 	sts	0x0141, r24
		setpointidlethresholdoffsetdown = eestruct_var.setpointidlethresholdoffsetdown;
     43a:	80 91 71 01 	lds	r24, 0x0171
     43e:	90 91 72 01 	lds	r25, 0x0172
     442:	90 93 51 01 	sts	0x0151, r25
     446:	80 93 50 01 	sts	0x0150, r24
		setpointidlethresholdoffsetup = eestruct_var.setpointidlethresholdoffsetup;
     44a:	80 91 73 01 	lds	r24, 0x0173
     44e:	90 91 74 01 	lds	r25, 0x0174
     452:	90 93 4a 01 	sts	0x014A, r25
     456:	80 93 49 01 	sts	0x0149, r24
		
		slopeValue = eestruct_var.slopeValue;
     45a:	80 91 75 01 	lds	r24, 0x0175
     45e:	90 91 76 01 	lds	r25, 0x0176
     462:	a0 91 77 01 	lds	r26, 0x0177
     466:	b0 91 78 01 	lds	r27, 0x0178
     46a:	80 93 02 01 	sts	0x0102, r24
     46e:	90 93 03 01 	sts	0x0103, r25
     472:	a0 93 04 01 	sts	0x0104, r26
     476:	b0 93 05 01 	sts	0x0105, r27
     47a:	08 95       	ret

0000047c <paramSavetoEeprom>:
/************************************************************************/
void paramSavetoEeprom(){
	
	
	// save paramenetrs on the run
	eestruct_var.initEeprom=1; // emprom init
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 58 01 	sts	0x0158, r24
	eestruct_var.pidP = pidP;
     482:	80 91 43 01 	lds	r24, 0x0143
     486:	90 91 44 01 	lds	r25, 0x0144
     48a:	a0 91 45 01 	lds	r26, 0x0145
     48e:	b0 91 46 01 	lds	r27, 0x0146
     492:	80 93 61 01 	sts	0x0161, r24
     496:	90 93 62 01 	sts	0x0162, r25
     49a:	a0 93 63 01 	sts	0x0163, r26
     49e:	b0 93 64 01 	sts	0x0164, r27
	eestruct_var.pidI = pidI;
     4a2:	80 91 52 01 	lds	r24, 0x0152
     4a6:	90 91 53 01 	lds	r25, 0x0153
     4aa:	a0 91 54 01 	lds	r26, 0x0154
     4ae:	b0 91 55 01 	lds	r27, 0x0155
     4b2:	80 93 69 01 	sts	0x0169, r24
     4b6:	90 93 6a 01 	sts	0x016A, r25
     4ba:	a0 93 6b 01 	sts	0x016B, r26
     4be:	b0 93 6c 01 	sts	0x016C, r27
	eestruct_var.pidD = pidD;
     4c2:	80 91 79 01 	lds	r24, 0x0179
     4c6:	90 91 7a 01 	lds	r25, 0x017A
     4ca:	a0 91 7b 01 	lds	r26, 0x017B
     4ce:	b0 91 7c 01 	lds	r27, 0x017C
     4d2:	80 93 65 01 	sts	0x0165, r24
     4d6:	90 93 66 01 	sts	0x0166, r25
     4da:	a0 93 67 01 	sts	0x0167, r26
     4de:	b0 93 68 01 	sts	0x0168, r27

	eestruct_var.pidPerrMin = pidPerrMin;
     4e2:	80 91 9b 01 	lds	r24, 0x019B
     4e6:	90 91 9c 01 	lds	r25, 0x019C
     4ea:	90 93 5a 01 	sts	0x015A, r25
     4ee:	80 93 59 01 	sts	0x0159, r24
	eestruct_var.pidPerrMax = pidPerrMax;
     4f2:	80 91 4d 01 	lds	r24, 0x014D
     4f6:	90 91 4e 01 	lds	r25, 0x014E
     4fa:	90 93 5c 01 	sts	0x015C, r25
     4fe:	80 93 5b 01 	sts	0x015B, r24
	eestruct_var.pidIerrMin = pidIerrMin;
     502:	80 91 4b 01 	lds	r24, 0x014B
     506:	90 91 4c 01 	lds	r25, 0x014C
     50a:	90 93 5e 01 	sts	0x015E, r25
     50e:	80 93 5d 01 	sts	0x015D, r24
	eestruct_var.pidIerrMax=pidIerrMax;
     512:	80 91 47 01 	lds	r24, 0x0147
     516:	90 91 48 01 	lds	r25, 0x0148
     51a:	90 93 60 01 	sts	0x0160, r25
     51e:	80 93 5f 01 	sts	0x015F, r24
	
	eestruct_var.offset = offset;
     522:	80 91 56 01 	lds	r24, 0x0156
     526:	90 91 57 01 	lds	r25, 0x0157
     52a:	90 93 6e 01 	sts	0x016E, r25
     52e:	80 93 6d 01 	sts	0x016D, r24
	eestruct_var.setpoint = setpoint;
     532:	80 91 41 01 	lds	r24, 0x0141
     536:	90 91 42 01 	lds	r25, 0x0142
     53a:	90 93 70 01 	sts	0x0170, r25
     53e:	80 93 6f 01 	sts	0x016F, r24
	eestruct_var.setpointidlethresholdoffsetdown = setpointidlethresholdoffsetdown;
     542:	80 91 50 01 	lds	r24, 0x0150
     546:	90 91 51 01 	lds	r25, 0x0151
     54a:	90 93 72 01 	sts	0x0172, r25
     54e:	80 93 71 01 	sts	0x0171, r24
	eestruct_var.setpointidlethresholdoffsetup = setpointidlethresholdoffsetup;
     552:	80 91 49 01 	lds	r24, 0x0149
     556:	90 91 4a 01 	lds	r25, 0x014A
     55a:	90 93 74 01 	sts	0x0174, r25
     55e:	80 93 73 01 	sts	0x0173, r24
	
	eestruct_var.slopeValue=slopeValue;
     562:	80 91 02 01 	lds	r24, 0x0102
     566:	90 91 03 01 	lds	r25, 0x0103
     56a:	a0 91 04 01 	lds	r26, 0x0104
     56e:	b0 91 05 01 	lds	r27, 0x0105
     572:	80 93 75 01 	sts	0x0175, r24
     576:	90 93 76 01 	sts	0x0176, r25
     57a:	a0 93 77 01 	sts	0x0177, r26
     57e:	b0 93 78 01 	sts	0x0178, r27
	
	eeprom_write_block((const void*)&eestruct_var,(void*)&eestruct_eemem,sizeof(eestruct_t));
     582:	41 e2       	ldi	r20, 0x21	; 33
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	88 e5       	ldi	r24, 0x58	; 88
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__eewr_block_m128>
     592:	08 95       	ret

00000594 <setSlope>:


/************************************************************************/
/* @set slope curve      0, decreases, 1 increases                                                               */
/************************************************************************/
void setSlope(uint8_t key){
     594:	cf 92       	push	r12
     596:	df 92       	push	r13
     598:	ef 92       	push	r14
     59a:	ff 92       	push	r15
	
	if (key){
     59c:	88 23       	and	r24, r24
     59e:	09 f4       	brne	.+2      	; 0x5a2 <setSlope+0xe>
     5a0:	47 c0       	rjmp	.+142    	; 0x630 <setSlope+0x9c>
		 slopeValue +=SLOPE_INC;
     5a2:	2d ec       	ldi	r18, 0xCD	; 205
     5a4:	3c ec       	ldi	r19, 0xCC	; 204
     5a6:	4c ec       	ldi	r20, 0xCC	; 204
     5a8:	5d e3       	ldi	r21, 0x3D	; 61
     5aa:	60 91 02 01 	lds	r22, 0x0102
     5ae:	70 91 03 01 	lds	r23, 0x0103
     5b2:	80 91 04 01 	lds	r24, 0x0104
     5b6:	90 91 05 01 	lds	r25, 0x0105
     5ba:	9a d5       	rcall	.+2868   	; 0x10f0 <__addsf3>
     5bc:	6b 01       	movw	r12, r22
     5be:	7c 01       	movw	r14, r24
		 if(slopeValue >SLOPE_MAX_VAL) slopeValue = SLOPE_MAX_VAL;
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	50 e4       	ldi	r21, 0x40	; 64
     5c8:	de d6       	rcall	.+3516   	; 0x1386 <__gesf2>
     5ca:	18 16       	cp	r1, r24
     5cc:	44 f5       	brge	.+80     	; 0x61e <setSlope+0x8a>
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	a0 e0       	ldi	r26, 0x00	; 0
     5d4:	b0 e4       	ldi	r27, 0x40	; 64
     5d6:	80 93 02 01 	sts	0x0102, r24
     5da:	90 93 03 01 	sts	0x0103, r25
     5de:	a0 93 04 01 	sts	0x0104, r26
     5e2:	b0 93 05 01 	sts	0x0105, r27
	}
	if (!key)slopeValue +=SLOPE_DEC;
	if(slopeValue <SLOPE_MIN_VAL) slopeValue = SLOPE_MIN_VAL;
     5e6:	26 e6       	ldi	r18, 0x66	; 102
     5e8:	36 e6       	ldi	r19, 0x66	; 102
     5ea:	46 e6       	ldi	r20, 0x66	; 102
     5ec:	5f e3       	ldi	r21, 0x3F	; 63
     5ee:	60 91 02 01 	lds	r22, 0x0102
     5f2:	70 91 03 01 	lds	r23, 0x0103
     5f6:	80 91 04 01 	lds	r24, 0x0104
     5fa:	90 91 05 01 	lds	r25, 0x0105
     5fe:	dc d5       	rcall	.+3000   	; 0x11b8 <__cmpsf2>
     600:	88 23       	and	r24, r24
     602:	64 f5       	brge	.+88     	; 0x65c <setSlope+0xc8>
     604:	86 e6       	ldi	r24, 0x66	; 102
     606:	96 e6       	ldi	r25, 0x66	; 102
     608:	a6 e6       	ldi	r26, 0x66	; 102
     60a:	bf e3       	ldi	r27, 0x3F	; 63
     60c:	80 93 02 01 	sts	0x0102, r24
     610:	90 93 03 01 	sts	0x0103, r25
     614:	a0 93 04 01 	sts	0x0104, r26
     618:	b0 93 05 01 	sts	0x0105, r27
     61c:	1f c0       	rjmp	.+62     	; 0x65c <setSlope+0xc8>
/* @set slope curve      0, decreases, 1 increases                                                               */
/************************************************************************/
void setSlope(uint8_t key){
	
	if (key){
		 slopeValue +=SLOPE_INC;
     61e:	c0 92 02 01 	sts	0x0102, r12
     622:	d0 92 03 01 	sts	0x0103, r13
     626:	e0 92 04 01 	sts	0x0104, r14
     62a:	f0 92 05 01 	sts	0x0105, r15
     62e:	db cf       	rjmp	.-74     	; 0x5e6 <setSlope+0x52>
		 if(slopeValue >SLOPE_MAX_VAL) slopeValue = SLOPE_MAX_VAL;
	}
	if (!key)slopeValue +=SLOPE_DEC;
     630:	2d ec       	ldi	r18, 0xCD	; 205
     632:	3c ec       	ldi	r19, 0xCC	; 204
     634:	4c ec       	ldi	r20, 0xCC	; 204
     636:	5d e3       	ldi	r21, 0x3D	; 61
     638:	60 91 02 01 	lds	r22, 0x0102
     63c:	70 91 03 01 	lds	r23, 0x0103
     640:	80 91 04 01 	lds	r24, 0x0104
     644:	90 91 05 01 	lds	r25, 0x0105
     648:	52 d5       	rcall	.+2724   	; 0x10ee <__subsf3>
     64a:	60 93 02 01 	sts	0x0102, r22
     64e:	70 93 03 01 	sts	0x0103, r23
     652:	80 93 04 01 	sts	0x0104, r24
     656:	90 93 05 01 	sts	0x0105, r25
     65a:	c5 cf       	rjmp	.-118    	; 0x5e6 <setSlope+0x52>
	if(slopeValue <SLOPE_MIN_VAL) slopeValue = SLOPE_MIN_VAL;
}
     65c:	ff 90       	pop	r15
     65e:	ef 90       	pop	r14
     660:	df 90       	pop	r13
     662:	cf 90       	pop	r12
     664:	08 95       	ret

00000666 <stateMachine>:
	
uint8_t newVal;
uint8_t lastVal;
uint8_t count=0;

	inCode &= 0x07; // ensure clean
     666:	87 70       	andi	r24, 0x07	; 7
	
	
	
	// Switch to the state
	switch (state){
     668:	90 91 26 01 	lds	r25, 0x0126
     66c:	91 30       	cpi	r25, 0x01	; 1
     66e:	59 f0       	breq	.+22     	; 0x686 <stateMachine+0x20>
     670:	18 f0       	brcs	.+6      	; 0x678 <stateMachine+0x12>
     672:	92 30       	cpi	r25, 0x02	; 2
     674:	c9 f0       	breq	.+50     	; 0x6a8 <stateMachine+0x42>
     676:	08 95       	ret
		
		case STATE_IDLE:
				IDLE_LED_ON;
     678:	ac 98       	cbi	0x15, 4	; 21
				PRGM_LED_OFF;
     67a:	ab 9a       	sbi	0x15, 3	; 21
				if (inCode == BUTTON_PROG) state=STATE_PROGRAM;
     67c:	81 30       	cpi	r24, 0x01	; 1
     67e:	d9 f4       	brne	.+54     	; 0x6b6 <stateMachine+0x50>
     680:	80 93 26 01 	sts	0x0126, r24
     684:	08 95       	ret
				break;
			
		case STATE_PROGRAM:
				IDLE_LED_OFF;
     686:	ac 9a       	sbi	0x15, 4	; 21
				PRGM_LED_ON; 
     688:	ab 98       	cbi	0x15, 3	; 21
				if(inCode==BUTTON_UP)setSlope(1);
     68a:	83 30       	cpi	r24, 0x03	; 3
     68c:	19 f4       	brne	.+6      	; 0x694 <stateMachine+0x2e>
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	81 cf       	rjmp	.-254    	; 0x594 <setSlope>
     692:	08 95       	ret
				if(inCode==BUTTON_DOWN)setSlope(0);
     694:	84 30       	cpi	r24, 0x04	; 4
     696:	19 f4       	brne	.+6      	; 0x69e <stateMachine+0x38>
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	7c cf       	rjmp	.-264    	; 0x594 <setSlope>
     69c:	08 95       	ret
				if(inCode==BUTTON_ENTER){
     69e:	82 30       	cpi	r24, 0x02	; 2
     6a0:	51 f4       	brne	.+20     	; 0x6b6 <stateMachine+0x50>
					 state=STATE_SAVE;
     6a2:	80 93 26 01 	sts	0x0126, r24
     6a6:	08 95       	ret
					 //IDLE_LED_ON;
					 //PRGM_LED_OFF;
				}
				break;
		case STATE_SAVE:
				IDLE_LED_ON;
     6a8:	ac 98       	cbi	0x15, 4	; 21
				PRGM_LED_ON;
     6aa:	ab 98       	cbi	0x15, 3	; 21
				flagSaveParameters++;
     6ac:	80 91 27 01 	lds	r24, 0x0127
     6b0:	8f 5f       	subi	r24, 0xFF	; 255
     6b2:	80 93 27 01 	sts	0x0127, r24
     6b6:	08 95       	ret

000006b8 <schedulerInit>:
/************************************************************************/
/* Sheduler config                                                                     */
/************************************************************************/
void schedulerInit(void){
	
	TCCR0 |= TIMER0_SCHED_PRESC;
     6b8:	83 b7       	in	r24, 0x33	; 51
     6ba:	85 60       	ori	r24, 0x05	; 5
     6bc:	83 bf       	out	0x33, r24	; 51
	TCNT0 |= TIMER0_SCHED_RELOAD; // timer count reaload
     6be:	82 b7       	in	r24, 0x32	; 50
     6c0:	84 66       	ori	r24, 0x64	; 100
     6c2:	82 bf       	out	0x32, r24	; 50
	TIMSK |= (1<< TOIE0); // Enable timer interrupt
     6c4:	87 b7       	in	r24, 0x37	; 55
     6c6:	81 60       	ori	r24, 0x01	; 1
     6c8:	87 bf       	out	0x37, r24	; 55
     6ca:	08 95       	ret

000006cc <pwmInit>:
	The formula for Fast PWM
	F(PWM) = F(Clock)/(N*(1+TOP)
	*/
	// max 245 Hz at 16mhz with full top
	
	TCCR1B =0;
     6cc:	1e bc       	out	0x2e, r1	; 46
	TCCR1A =0;
     6ce:	1f bc       	out	0x2f, r1	; 47
	TCCR1A |= (1<<COM1B1) |(1<<WGM11);
     6d0:	8f b5       	in	r24, 0x2f	; 47
     6d2:	82 62       	ori	r24, 0x22	; 34
     6d4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM13) | (1<<CS10); // CHECK! 
     6d6:	8e b5       	in	r24, 0x2e	; 46
     6d8:	81 61       	ori	r24, 0x11	; 17
     6da:	8e bd       	out	0x2e, r24	; 46
	
	ICR1 = CURRENT_MAXPWM;
     6dc:	80 e4       	ldi	r24, 0x40	; 64
     6de:	96 e0       	ldi	r25, 0x06	; 6
     6e0:	97 bd       	out	0x27, r25	; 39
     6e2:	86 bd       	out	0x26, r24	; 38
     6e4:	08 95       	ret

000006e6 <controlInit>:


/************************************************************************/
/* @Control init                                                                   */
/************************************************************************/
void controlInit(void){		
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17

	PID_setPid(pidP,pidI,pidD);
     6ee:	e0 90 79 01 	lds	r14, 0x0179
     6f2:	f0 90 7a 01 	lds	r15, 0x017A
     6f6:	00 91 7b 01 	lds	r16, 0x017B
     6fa:	10 91 7c 01 	lds	r17, 0x017C
     6fe:	20 91 52 01 	lds	r18, 0x0152
     702:	30 91 53 01 	lds	r19, 0x0153
     706:	40 91 54 01 	lds	r20, 0x0154
     70a:	50 91 55 01 	lds	r21, 0x0155
     70e:	60 91 43 01 	lds	r22, 0x0143
     712:	70 91 44 01 	lds	r23, 0x0144
     716:	80 91 45 01 	lds	r24, 0x0145
     71a:	90 91 46 01 	lds	r25, 0x0146
     71e:	40 d3       	rcall	.+1664   	; 0xda0 <PID_setPid>
	// set pid Limits
	
	// change this and call after params Load
	//PID_setLimitsIerr(pidIerrMin,pidIerrMax); 
	PID_setLimitsIerr(-12000,12000); 
     720:	60 ee       	ldi	r22, 0xE0	; 224
     722:	7e e2       	ldi	r23, 0x2E	; 46
     724:	80 e2       	ldi	r24, 0x20	; 32
     726:	91 ed       	ldi	r25, 0xD1	; 209
     728:	65 d3       	rcall	.+1738   	; 0xdf4 <PID_setLimitsIerr>
}
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	08 95       	ret

00000734 <controlLoop>:

/************************************************************************/
/* @control loop                                                                     */
/************************************************************************/
uint16_t controlLoop(void){
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
int16_t setValue=0;
int16_t feedbackValue=0;
static int16_t  old_pwm=0;	
	// read adc
	setValue = ADC_readAndWAIT(0);
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	2c d1       	rcall	.+600    	; 0x994 <ADC_readAndWAIT>
     73c:	ec 01       	movw	r28, r24
	feedbackValue = ADC_readAndWAIT(1);
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	29 d1       	rcall	.+594    	; 0x994 <ADC_readAndWAIT>
	USART1_sendStr(bufferDummy);
	#endif*/
	
	
	// Calculate error
	int16_t pidret = PID_update(setValue,feedbackValue, 1);
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	40 e8       	ldi	r20, 0x80	; 128
     748:	5f e3       	ldi	r21, 0x3F	; 63
     74a:	bc 01       	movw	r22, r24
     74c:	ce 01       	movw	r24, r28
     74e:	5b d3       	rcall	.+1718   	; 0xe06 <PID_update>
	
	int16_t newpwm = old_pwm + pidret;
     750:	20 91 24 01 	lds	r18, 0x0124
     754:	30 91 25 01 	lds	r19, 0x0125
     758:	82 0f       	add	r24, r18
     75a:	93 1f       	adc	r25, r19
	
	old_pwm = newpwm;
     75c:	90 93 25 01 	sts	0x0125, r25
     760:	80 93 24 01 	sts	0x0124, r24
     764:	81 34       	cpi	r24, 0x41	; 65
     766:	26 e0       	ldi	r18, 0x06	; 6
     768:	92 07       	cpc	r25, r18
     76a:	14 f0       	brlt	.+4      	; 0x770 <controlLoop+0x3c>
     76c:	80 e4       	ldi	r24, 0x40	; 64
     76e:	96 e0       	ldi	r25, 0x06	; 6
     770:	99 23       	and	r25, r25
     772:	14 f4       	brge	.+4      	; 0x778 <controlLoop+0x44>
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
// 	sprintf(bufferDummy,"%4x\n\r",newpwm);
// 	USART1_sendStr(bufferDummy);
// 	#endif
*/
	return newpwm;
}
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	08 95       	ret

0000077e <configGPIO>:
/*@Config GPIO                                                          */
/************************************************************************/
void configGPIO(void){
	
	//DDRF = 0x00;
	DDRB = 0xFF;
     77e:	8f ef       	ldi	r24, 0xFF	; 255
     780:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
     782:	18 ba       	out	0x18, r1	; 24
	DDRC =  0b00011000; 
     784:	98 e1       	ldi	r25, 0x18	; 24
     786:	94 bb       	out	0x14, r25	; 20
	PORTC =	0b11111111; // ENABLE PULLUPS
     788:	85 bb       	out	0x15, r24	; 21
	DDRD |= 0xfe;
     78a:	81 b3       	in	r24, 0x11	; 17
     78c:	8e 6f       	ori	r24, 0xFE	; 254
     78e:	81 bb       	out	0x11, r24	; 17
     790:	08 95       	ret

00000792 <decodeButton>:
/************************************************************************/
/* @decode Button                                                                     */
/************************************************************************/

uint8_t decodeButton(uint8_t button){
	button &=0x07;
     792:	87 70       	andi	r24, 0x07	; 7
	switch (button){
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	89 f0       	breq	.+34     	; 0x7ba <decodeButton+0x28>
     798:	18 f4       	brcc	.+6      	; 0x7a0 <decodeButton+0xe>
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	31 f0       	breq	.+12     	; 0x7aa <decodeButton+0x18>
     79e:	0b c0       	rjmp	.+22     	; 0x7b6 <decodeButton+0x24>
     7a0:	84 30       	cpi	r24, 0x04	; 4
     7a2:	29 f0       	breq	.+10     	; 0x7ae <decodeButton+0x1c>
     7a4:	87 30       	cpi	r24, 0x07	; 7
     7a6:	29 f0       	breq	.+10     	; 0x7b2 <decodeButton+0x20>
     7a8:	06 c0       	rjmp	.+12     	; 0x7b6 <decodeButton+0x24>
		
		case 1: return BUTTON_ENTER;
     7aa:	82 e0       	ldi	r24, 0x02	; 2
     7ac:	08 95       	ret
			break;
		
		case 2: return BUTTON_UP;
			break;	
		
		case 4: return BUTTON_DOWN;
     7ae:	84 e0       	ldi	r24, 0x04	; 4
     7b0:	08 95       	ret
			break;
			
		case 7: return BUTTON_PROG;//	
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	08 95       	ret
	
			
		default: return 0;
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	08 95       	ret
	switch (button){
		
		case 1: return BUTTON_ENTER;
			break;
		
		case 2: return BUTTON_UP;
     7ba:	83 e0       	ldi	r24, 0x03	; 3
	
			
		default: return 0;
			break;	
	}
}
     7bc:	08 95       	ret

000007be <debounceKey>:

#define N_DEBOUNCE 3
/************************************************************************/
/* @debounce function                                                                     */
/************************************************************************/
uint8_t debounceKey(uint8_t codeNew){
     7be:	28 2f       	mov	r18, r24
	uint8_t key =0; // by default
	static codeOld;
	static keyCount;
	
	// ALREADY SOMETHIN PRESSED
	if(keyCount != 0){
     7c0:	40 91 22 01 	lds	r20, 0x0122
     7c4:	50 91 23 01 	lds	r21, 0x0123
     7c8:	41 15       	cp	r20, r1
     7ca:	51 05       	cpc	r21, r1
     7cc:	b9 f0       	breq	.+46     	; 0x7fc <debounceKey+0x3e>
		
		// IF SAME KEY and inside debounce times save
		if(codeNew == codeOld && keyCount <N_DEBOUNCE){ // ONLY IF EQUAL AND DEBOUNCE AVAILABLE
     7ce:	e8 2f       	mov	r30, r24
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	60 91 20 01 	lds	r22, 0x0120
     7d6:	70 91 21 01 	lds	r23, 0x0121
     7da:	e6 17       	cp	r30, r22
     7dc:	f7 07       	cpc	r31, r23
     7de:	81 f5       	brne	.+96     	; 0x840 <debounceKey+0x82>
     7e0:	43 30       	cpi	r20, 0x03	; 3
     7e2:	51 05       	cpc	r21, r1
     7e4:	7c f5       	brge	.+94     	; 0x844 <debounceKey+0x86>
			codeOld =codeNew;
			keyCount++;
     7e6:	4f 5f       	subi	r20, 0xFF	; 255
     7e8:	5f 4f       	sbci	r21, 0xFF	; 255
     7ea:	50 93 23 01 	sts	0x0123, r21
     7ee:	40 93 22 01 	sts	0x0122, r20
			// Reached debounce value and valid key
			if (keyCount == N_DEBOUNCE){
     7f2:	43 30       	cpi	r20, 0x03	; 3
     7f4:	51 05       	cpc	r21, r1
     7f6:	41 f1       	breq	.+80     	; 0x848 <debounceKey+0x8a>
		
	}

		
	// INITIAL CONDITION
	if (keyCount == 0){
     7f8:	45 2b       	or	r20, r21
     7fa:	71 f4       	brne	.+28     	; 0x818 <debounceKey+0x5a>
		codeOld = codeNew;
     7fc:	42 2f       	mov	r20, r18
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	50 93 21 01 	sts	0x0121, r21
     804:	40 93 20 01 	sts	0x0120, r20
		keyCount++;
     808:	41 e0       	ldi	r20, 0x01	; 1
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	50 93 23 01 	sts	0x0123, r21
     810:	40 93 22 01 	sts	0x0122, r20
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	01 c0       	rjmp	.+2      	; 0x81a <debounceKey+0x5c>
#define N_DEBOUNCE 3
/************************************************************************/
/* @debounce function                                                                     */
/************************************************************************/
uint8_t debounceKey(uint8_t codeNew){
	uint8_t key =0; // by default
     818:	80 e0       	ldi	r24, 0x00	; 0
		codeOld = codeNew;
		keyCount++;
	}
		
	// if pressed key different reset (user must release the key for new run)
	if(codeNew != codeOld){
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	40 91 20 01 	lds	r20, 0x0120
     820:	50 91 21 01 	lds	r21, 0x0121
     824:	24 17       	cp	r18, r20
     826:	35 07       	cpc	r19, r21
     828:	81 f0       	breq	.+32     	; 0x84a <debounceKey+0x8c>
		codeOld =codeNew;
     82a:	30 93 21 01 	sts	0x0121, r19
     82e:	20 93 20 01 	sts	0x0120, r18
		keyCount =1;
     832:	21 e0       	ldi	r18, 0x01	; 1
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	30 93 23 01 	sts	0x0123, r19
     83a:	20 93 22 01 	sts	0x0122, r18
     83e:	08 95       	ret
#define N_DEBOUNCE 3
/************************************************************************/
/* @debounce function                                                                     */
/************************************************************************/
uint8_t debounceKey(uint8_t codeNew){
	uint8_t key =0; // by default
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	eb cf       	rjmp	.-42     	; 0x81a <debounceKey+0x5c>
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	e9 cf       	rjmp	.-46     	; 0x81a <debounceKey+0x5c>
     848:	e8 cf       	rjmp	.-48     	; 0x81a <debounceKey+0x5c>
	if(codeNew != codeOld){
		codeOld =codeNew;
		keyCount =1;
	}
	return key;	
}
     84a:	08 95       	ret

0000084c <main>:
uint16_t pwm=0;
uint8_t portVal=0;


	//1.  config stuffs
	USART1_config(USART1_MY_UBBRN,USART_DATA_FORMAT_8BITS|USART_STOP_BITS_1,USART_TRANSMIT_ENABLE|USART_RECEIVE_ENABLE| USART_INTERRUPT_ENABLE);
     84c:	48 e9       	ldi	r20, 0x98	; 152
     84e:	66 e0       	ldi	r22, 0x06	; 6
     850:	80 e1       	ldi	r24, 0x10	; 16
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	b7 d3       	rcall	.+1902   	; 0xfc4 <USART1_config>
	
	ADC_init(ADC_ENABLE,ADC_REF_VCC,ADC_calcPreScaler(ADC_MAX_FREQ));
     856:	88 e4       	ldi	r24, 0x48	; 72
     858:	94 d0       	rcall	.+296    	; 0x982 <ADC_calcPreScaler>
     85a:	48 2f       	mov	r20, r24
     85c:	60 e4       	ldi	r22, 0x40	; 64
     85e:	80 e8       	ldi	r24, 0x80	; 128
     860:	92 d0       	rcall	.+292    	; 0x986 <ADC_init>
	configGPIO();
     862:	8d df       	rcall	.-230    	; 0x77e <configGPIO>
	schedulerInit();
     864:	29 df       	rcall	.-430    	; 0x6b8 <schedulerInit>
	pwmInit();
     866:	32 df       	rcall	.-412    	; 0x6cc <pwmInit>
	
	
	
	// call the memory read here
	paramLoadFromEeprom();
     868:	79 dd       	rcall	.-1294   	; 0x35c <paramLoadFromEeprom>
	
	//paramLoadDefaultParameters(); // 
	controlInit();
     86a:	3d df       	rcall	.-390    	; 0x6e6 <controlInit>
	
	
	USART1_sendStr("Hello\n\r");
     86c:	82 e1       	ldi	r24, 0x12	; 18
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	ba d3       	rcall	.+1908   	; 0xfe6 <USART1_sendStr>
	
	
	state= STATE_IDLE; // by default
     872:	10 92 26 01 	sts	0x0126, r1
	IDLE_LED_ON;
     876:	ac 98       	cbi	0x15, 4	; 21
	PRGM_LED_OFF;
     878:	ab 9a       	sbi	0x15, 3	; 21
	
	//2. enable interrups
	sei();
     87a:	78 94       	sei
	
	flagCurrentEnable =1;
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	80 93 4f 01 	sts	0x014F, r24

/************************************************************************/
/* @main                                                                      */
/************************************************************************/
int main(void){
uint16_t pwm=0;
     882:	c1 2c       	mov	r12, r1
     884:	d1 2c       	mov	r13, r1
			codeNew = decodeButton(portVal);
			codeNew = debounceKey(codeNew);
		
			
			#ifdef DEBUG
			sprintf(bufferDummy,"%x\n\r",codeNew);
     886:	0f 2e       	mov	r0, r31
     888:	fa e1       	ldi	r31, 0x1A	; 26
     88a:	af 2e       	mov	r10, r31
     88c:	f1 e0       	ldi	r31, 0x01	; 1
     88e:	bf 2e       	mov	r11, r31
     890:	f0 2d       	mov	r31, r0
     892:	cd e7       	ldi	r28, 0x7D	; 125
     894:	d1 e0       	ldi	r29, 0x01	; 1
	//3. loop
    while(1){
		
		 
		//1. buttons read
		if(flagTaskReadButtons){
     896:	80 91 2a 01 	lds	r24, 0x012A
     89a:	88 23       	and	r24, r24
     89c:	c9 f0       	breq	.+50     	; 0x8d0 <main+0x84>
				
			uint8_t codeNew;
			//portVal=0; // just
			portVal = (~(PINC & 0x07)&0x07); // Handle inverted logic
     89e:	83 b3       	in	r24, 0x13	; 19
     8a0:	80 95       	com	r24
			
			codeNew = decodeButton(portVal);
     8a2:	87 70       	andi	r24, 0x07	; 7
     8a4:	76 df       	rcall	.-276    	; 0x792 <decodeButton>
			codeNew = debounceKey(codeNew);
     8a6:	8b df       	rcall	.-234    	; 0x7be <debounceKey>
     8a8:	18 2f       	mov	r17, r24
		
			
			#ifdef DEBUG
			sprintf(bufferDummy,"%x\n\r",codeNew);
     8aa:	1f 92       	push	r1
     8ac:	8f 93       	push	r24
     8ae:	bf 92       	push	r11
     8b0:	af 92       	push	r10
     8b2:	df 93       	push	r29
     8b4:	cf 93       	push	r28
     8b6:	3d d6       	rcall	.+3194   	; 0x1532 <sprintf>
			USART1_sendStr(bufferDummy);
     8b8:	ce 01       	movw	r24, r28
     8ba:	95 d3       	rcall	.+1834   	; 0xfe6 <USART1_sendStr>
			#endif	
			
			stateMachine(codeNew); 
     8bc:	81 2f       	mov	r24, r17
     8be:	d3 de       	rcall	.-602    	; 0x666 <stateMachine>

			flagTaskReadButtons=0;
     8c0:	10 92 2a 01 	sts	0x012A, r1
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
		}
		

		//1. if flag activated save running parameters to eeprom
		if(flagSaveParameters){
     8d0:	80 91 27 01 	lds	r24, 0x0127
     8d4:	88 23       	and	r24, r24
     8d6:	29 f0       	breq	.+10     	; 0x8e2 <main+0x96>
			
			paramSavetoEeprom();
     8d8:	d1 dd       	rcall	.-1118   	; 0x47c <paramSavetoEeprom>
			
			flagSaveParameters=0;
     8da:	10 92 27 01 	sts	0x0127, r1
			state = STATE_IDLE;
     8de:	10 92 26 01 	sts	0x0126, r1
		}
		
		
		
		//2. Control loop to be esecuted
		if(flagTaskControl){
     8e2:	80 91 29 01 	lds	r24, 0x0129
     8e6:	88 23       	and	r24, r24
     8e8:	21 f0       	breq	.+8      	; 0x8f2 <main+0xa6>
	
			pwm = controlLoop();
     8ea:	24 df       	rcall	.-440    	; 0x734 <controlLoop>
     8ec:	6c 01       	movw	r12, r24
			flagTaskControl=0;
     8ee:	10 92 29 01 	sts	0x0129, r1
			USART1_sendStr(bufferDummy);
			#endif*/
		}
		
		//3. Apply pwm to the output
		if(flagCurrentEnable){
     8f2:	80 91 4f 01 	lds	r24, 0x014F
     8f6:	88 23       	and	r24, r24
     8f8:	19 f0       	breq	.+6      	; 0x900 <main+0xb4>
			// Update ocr 16 bits
			OCR1B= pwm;
     8fa:	d9 bc       	out	0x29, r13	; 41
     8fc:	c8 bc       	out	0x28, r12	; 40
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <main+0xb8>
		
		}else OCR1B =0;
     900:	19 bc       	out	0x29, r1	; 41
     902:	18 bc       	out	0x28, r1	; 40
		
		
		//4. new message arrive
		if(flagTaskUsartMessage){
     904:	80 91 28 01 	lds	r24, 0x0128
     908:	88 23       	and	r24, r24
     90a:	09 f4       	brne	.+2      	; 0x90e <main+0xc2>
     90c:	c4 cf       	rjmp	.-120    	; 0x896 <main+0x4a>
			
			// tokenize the message
			uint8_t nTokens = parseString(usartBuffer,',');
     90e:	6c e2       	ldi	r22, 0x2C	; 44
     910:	8e e9       	ldi	r24, 0x9E	; 158
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	a4 d3       	rcall	.+1864   	; 0x105e <parseString>
			uint8_t val = paramConvertFromTokens(nTokens);
     916:	4b dc       	rcall	.-1898   	; 0x1ae <paramConvertFromTokens>
			
			if(val){
     918:	88 23       	and	r24, r24
     91a:	81 f1       	breq	.+96     	; 0x97c <main+0x130>
				
				// set the running values to
				PID_setPid(pidP,pidI,pidD);
     91c:	e0 90 79 01 	lds	r14, 0x0179
     920:	f0 90 7a 01 	lds	r15, 0x017A
     924:	00 91 7b 01 	lds	r16, 0x017B
     928:	10 91 7c 01 	lds	r17, 0x017C
     92c:	20 91 52 01 	lds	r18, 0x0152
     930:	30 91 53 01 	lds	r19, 0x0153
     934:	40 91 54 01 	lds	r20, 0x0154
     938:	50 91 55 01 	lds	r21, 0x0155
     93c:	60 91 43 01 	lds	r22, 0x0143
     940:	70 91 44 01 	lds	r23, 0x0144
     944:	80 91 45 01 	lds	r24, 0x0145
     948:	90 91 46 01 	lds	r25, 0x0146
     94c:	29 d2       	rcall	.+1106   	; 0xda0 <PID_setPid>
				PID_setLimitsPerr(pidPerrMin,pidPerrMax);
     94e:	60 91 4d 01 	lds	r22, 0x014D
     952:	70 91 4e 01 	lds	r23, 0x014E
     956:	80 91 9b 01 	lds	r24, 0x019B
     95a:	90 91 9c 01 	lds	r25, 0x019C
     95e:	41 d2       	rcall	.+1154   	; 0xde2 <PID_setLimitsPerr>
				PID_setLimitsIerr(pidIerrMin,pidIerrMax);
     960:	60 91 47 01 	lds	r22, 0x0147
     964:	70 91 48 01 	lds	r23, 0x0148
     968:	80 91 4b 01 	lds	r24, 0x014B
     96c:	90 91 4c 01 	lds	r25, 0x014C
     970:	41 d2       	rcall	.+1154   	; 0xdf4 <PID_setLimitsIerr>
				
				// activate to save running values to eeprom
				flagSaveParameters++;
     972:	80 91 27 01 	lds	r24, 0x0127
     976:	8f 5f       	subi	r24, 0xFF	; 255
     978:	80 93 27 01 	sts	0x0127, r24
				
			}
			flagTaskUsartMessage=0;
     97c:	10 92 28 01 	sts	0x0128, r1
     980:	8a cf       	rjmp	.-236    	; 0x896 <main+0x4a>

00000982 <ADC_calcPreScaler>:
	// grab values é ler pra uma var adcl e adch
	*val = ADCL;
	*val |= (ADCH <<8);
	return 1;
	
}
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	08 95       	ret

00000986 <ADC_init>:
     986:	96 b1       	in	r25, 0x06	; 6
     988:	89 2b       	or	r24, r25
     98a:	86 b9       	out	0x06, r24	; 6
     98c:	86 b1       	in	r24, 0x06	; 6
     98e:	86 b9       	out	0x06, r24	; 6
     990:	67 b9       	out	0x07, r22	; 7
     992:	08 95       	ret

00000994 <ADC_readAndWAIT>:
uint16_t ADC_readAndWAIT(uint8_t ch){
uint16_t val;
	
	
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
     994:	97 b1       	in	r25, 0x07	; 7
/************************************************************************/
uint16_t ADC_readAndWAIT(uint8_t ch){
uint16_t val;
	
	
	ch &= 0b00000111;  // AND operation with 7
     996:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
     998:	98 7f       	andi	r25, 0xF8	; 248
     99a:	98 2b       	or	r25, r24
     99c:	97 b9       	out	0x07, r25	; 7
	

	
	//-- Start conv
	ADCSRA |= ADC_START_CONV;
     99e:	36 9a       	sbi	0x06, 6	; 6
	
	// wait until complete
	while(ADCSRA & ADC_START_CONV);
     9a0:	36 99       	sbic	0x06, 6	; 6
     9a2:	fe cf       	rjmp	.-4      	; 0x9a0 <ADC_readAndWAIT+0xc>
	
	// grab values é ler pra uma var adcl e adch
	val = ADCL;
     9a4:	84 b1       	in	r24, 0x04	; 4
	val |= (ADCH <<8);
     9a6:	25 b1       	in	r18, 0x05	; 5
     9a8:	90 e0       	ldi	r25, 0x00	; 0
	return val;
	 
     9aa:	92 2b       	or	r25, r18
     9ac:	08 95       	ret

000009ae <clearBuffer>:


/************************************************************************/
/* @Clear Buffer                                                        */
/************************************************************************/
void clearBuffer(void){
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for(i=0; i< USART_BUFFER_LENGHT; i++) usartBuffer[i]=0;
     9b2:	fc 01       	movw	r30, r24
     9b4:	e2 56       	subi	r30, 0x62	; 98
     9b6:	fe 4f       	sbci	r31, 0xFE	; 254
     9b8:	10 82       	st	Z, r1
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	82 33       	cpi	r24, 0x32	; 50
     9be:	91 05       	cpc	r25, r1
     9c0:	c1 f7       	brne	.-16     	; 0x9b2 <clearBuffer+0x4>

}
     9c2:	08 95       	ret

000009c4 <__vector_1>:
/************************************************************************/

/************************************************************************/
/* handler External Interrupt Request 0                                                                     */
/************************************************************************/
ISR(INT0_vect){
     9c4:	1f 92       	push	r1
     9c6:	0f 92       	push	r0
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	0f 92       	push	r0
     9cc:	11 24       	eor	r1, r1
	
}
     9ce:	0f 90       	pop	r0
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	0f 90       	pop	r0
     9d4:	1f 90       	pop	r1
     9d6:	18 95       	reti

000009d8 <__vector_2>:


/************************************************************************/
/* handler External Interrupt Request 1                                                                   */
/************************************************************************/
ISR(INT1_vect){
     9d8:	1f 92       	push	r1
     9da:	0f 92       	push	r0
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	0f 92       	push	r0
     9e0:	11 24       	eor	r1, r1
	
}
     9e2:	0f 90       	pop	r0
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	0f 90       	pop	r0
     9e8:	1f 90       	pop	r1
     9ea:	18 95       	reti

000009ec <__vector_3>:


/************************************************************************/
/* handler External Interrupt Request 2                                                                    */
/************************************************************************/
ISR(INT2_vect){
     9ec:	1f 92       	push	r1
     9ee:	0f 92       	push	r0
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	0f 92       	push	r0
     9f4:	11 24       	eor	r1, r1
	
}
     9f6:	0f 90       	pop	r0
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0f 90       	pop	r0
     9fc:	1f 90       	pop	r1
     9fe:	18 95       	reti

00000a00 <__vector_4>:


/************************************************************************/
/* handler External Interrupt Request 3                                                                    */
/************************************************************************/
ISR(INT3_vect){
     a00:	1f 92       	push	r1
     a02:	0f 92       	push	r0
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	0f 92       	push	r0
     a08:	11 24       	eor	r1, r1
	
}
     a0a:	0f 90       	pop	r0
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	0f 90       	pop	r0
     a10:	1f 90       	pop	r1
     a12:	18 95       	reti

00000a14 <__vector_5>:


/************************************************************************/
/* handler External Interrupt Request 4                                                                   */
/************************************************************************/
ISR(INT4_vect){
     a14:	1f 92       	push	r1
     a16:	0f 92       	push	r0
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	0f 92       	push	r0
     a1c:	11 24       	eor	r1, r1
	
}
     a1e:	0f 90       	pop	r0
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	0f 90       	pop	r0
     a24:	1f 90       	pop	r1
     a26:	18 95       	reti

00000a28 <__vector_6>:

/************************************************************************/
/* handler External Interrupt Request 5                                                                    */
/************************************************************************/
ISR(INT5_vect){
     a28:	1f 92       	push	r1
     a2a:	0f 92       	push	r0
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	0f 92       	push	r0
     a30:	11 24       	eor	r1, r1
	
}
     a32:	0f 90       	pop	r0
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	0f 90       	pop	r0
     a38:	1f 90       	pop	r1
     a3a:	18 95       	reti

00000a3c <__vector_7>:


/************************************************************************/
/* handler External Interrupt Request 6                                                                  */
/************************************************************************/
ISR(INT6_vect){
     a3c:	1f 92       	push	r1
     a3e:	0f 92       	push	r0
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	0f 92       	push	r0
     a44:	11 24       	eor	r1, r1
	
}
     a46:	0f 90       	pop	r0
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	0f 90       	pop	r0
     a4c:	1f 90       	pop	r1
     a4e:	18 95       	reti

00000a50 <__vector_8>:


/************************************************************************/
/* handler External Interrupt Request 7                                                                   */
/************************************************************************/
ISR(INT7_vect){
     a50:	1f 92       	push	r1
     a52:	0f 92       	push	r0
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	0f 92       	push	r0
     a58:	11 24       	eor	r1, r1
	
}
     a5a:	0f 90       	pop	r0
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	0f 90       	pop	r0
     a60:	1f 90       	pop	r1
     a62:	18 95       	reti

00000a64 <__vector_9>:
/************************************************************************/

/************************************************************************/
/* handler Timer/Counter2 Compare Match                                                                  */
/************************************************************************/
ISR(TIMER2_COMP_vect){
     a64:	1f 92       	push	r1
     a66:	0f 92       	push	r0
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	0f 92       	push	r0
     a6c:	11 24       	eor	r1, r1
	
}
     a6e:	0f 90       	pop	r0
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	0f 90       	pop	r0
     a74:	1f 90       	pop	r1
     a76:	18 95       	reti

00000a78 <__vector_10>:


/************************************************************************/
/* handler Timer/Counter2 Overflow                                                                 */
/************************************************************************/
ISR(TIMER2_OVF_vect){
     a78:	1f 92       	push	r1
     a7a:	0f 92       	push	r0
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	0f 92       	push	r0
     a80:	11 24       	eor	r1, r1
	
	
	
}
     a82:	0f 90       	pop	r0
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	0f 90       	pop	r0
     a88:	1f 90       	pop	r1
     a8a:	18 95       	reti

00000a8c <__vector_11>:


/************************************************************************/
/* handler Timer/Counter1 Capture Event                                                               */
/************************************************************************/
ISR(TIMER1_CAPT_vect){
     a8c:	1f 92       	push	r1
     a8e:	0f 92       	push	r0
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	0f 92       	push	r0
     a94:	11 24       	eor	r1, r1
	
}
     a96:	0f 90       	pop	r0
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	0f 90       	pop	r0
     a9c:	1f 90       	pop	r1
     a9e:	18 95       	reti

00000aa0 <__vector_12>:


/************************************************************************/
/* handler Timer/Counter1 Compare Match A                                                              */
/************************************************************************/
ISR(TIMER1_COMPA_vect){
     aa0:	1f 92       	push	r1
     aa2:	0f 92       	push	r0
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	0f 92       	push	r0
     aa8:	11 24       	eor	r1, r1
	
}
     aaa:	0f 90       	pop	r0
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	0f 90       	pop	r0
     ab0:	1f 90       	pop	r1
     ab2:	18 95       	reti

00000ab4 <__vector_13>:


/************************************************************************/
/* handler Timer/Counter1 Compare Match B                                                             */
/************************************************************************/
ISR(TIMER1_COMPB_vect){
     ab4:	1f 92       	push	r1
     ab6:	0f 92       	push	r0
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	0f 92       	push	r0
     abc:	11 24       	eor	r1, r1
	
}
     abe:	0f 90       	pop	r0
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	0f 90       	pop	r0
     ac4:	1f 90       	pop	r1
     ac6:	18 95       	reti

00000ac8 <__vector_14>:


/************************************************************************/
/* handler Timer/Counter1 Overflow                                                            */
/************************************************************************/
ISR(TIMER1_OVF_vect){
     ac8:	1f 92       	push	r1
     aca:	0f 92       	push	r0
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	0f 92       	push	r0
     ad0:	11 24       	eor	r1, r1
	
}
     ad2:	0f 90       	pop	r0
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	0f 90       	pop	r0
     ad8:	1f 90       	pop	r1
     ada:	18 95       	reti

00000adc <__vector_15>:


/************************************************************************/
/* handler Timer/Counter0 Compare Match                                                           */
/************************************************************************/
ISR(TIMER0_COMP_vect){
     adc:	1f 92       	push	r1
     ade:	0f 92       	push	r0
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	0f 92       	push	r0
     ae4:	11 24       	eor	r1, r1
	
}
     ae6:	0f 90       	pop	r0
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	0f 90       	pop	r0
     aec:	1f 90       	pop	r1
     aee:	18 95       	reti

00000af0 <__vector_16>:
extern uint8_t flagTaskControl;
extern uint8_t flagTaskUsartMessage;
/************************************************************************/
/* handler Timer/Counter0 Overflow     CHECK                                                     */
/************************************************************************/
ISR(TIMER0_OVF_vect){
     af0:	1f 92       	push	r1
     af2:	0f 92       	push	r0
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	0f 92       	push	r0
     af8:	11 24       	eor	r1, r1
     afa:	2f 93       	push	r18
     afc:	3f 93       	push	r19
     afe:	5f 93       	push	r21
     b00:	6f 93       	push	r22
     b02:	7f 93       	push	r23
     b04:	8f 93       	push	r24
     b06:	9f 93       	push	r25
     b08:	af 93       	push	r26
     b0a:	bf 93       	push	r27
	static uint16_t msCounter;
	// scheduling period 
	// control enabled
	msCounter++;
     b0c:	20 91 2b 01 	lds	r18, 0x012B
     b10:	30 91 2c 01 	lds	r19, 0x012C
     b14:	2f 5f       	subi	r18, 0xFF	; 255
     b16:	3f 4f       	sbci	r19, 0xFF	; 255
     b18:	30 93 2c 01 	sts	0x012C, r19
     b1c:	20 93 2b 01 	sts	0x012B, r18
	
	if(msCounter % taskControlPeriod == 0) flagTaskControl++;
     b20:	60 91 06 01 	lds	r22, 0x0106
     b24:	70 91 07 01 	lds	r23, 0x0107
     b28:	c9 01       	movw	r24, r18
     b2a:	94 d4       	rcall	.+2344   	; 0x1454 <__udivmodhi4>
     b2c:	89 2b       	or	r24, r25
     b2e:	29 f4       	brne	.+10     	; 0xb3a <__vector_16+0x4a>
     b30:	80 91 29 01 	lds	r24, 0x0129
     b34:	8f 5f       	subi	r24, 0xFF	; 255
     b36:	80 93 29 01 	sts	0x0129, r24
	if(msCounter % taskReadButtonsPeriod == 0) flagTaskReadButtons++;
     b3a:	60 91 08 01 	lds	r22, 0x0108
     b3e:	70 91 09 01 	lds	r23, 0x0109
     b42:	c9 01       	movw	r24, r18
     b44:	87 d4       	rcall	.+2318   	; 0x1454 <__udivmodhi4>
     b46:	89 2b       	or	r24, r25
     b48:	29 f4       	brne	.+10     	; 0xb54 <__vector_16+0x64>
     b4a:	80 91 2a 01 	lds	r24, 0x012A
     b4e:	8f 5f       	subi	r24, 0xFF	; 255
     b50:	80 93 2a 01 	sts	0x012A, r24
	
	// reload values // deve dar uns 5segundos
	if(msCounter > schedulerMaxCount) msCounter=0;
     b54:	80 91 00 01 	lds	r24, 0x0100
     b58:	90 91 01 01 	lds	r25, 0x0101
     b5c:	82 17       	cp	r24, r18
     b5e:	93 07       	cpc	r25, r19
     b60:	20 f4       	brcc	.+8      	; 0xb6a <__vector_16+0x7a>
     b62:	10 92 2c 01 	sts	0x012C, r1
     b66:	10 92 2b 01 	sts	0x012B, r1
	
	
	
	
	
}
     b6a:	bf 91       	pop	r27
     b6c:	af 91       	pop	r26
     b6e:	9f 91       	pop	r25
     b70:	8f 91       	pop	r24
     b72:	7f 91       	pop	r23
     b74:	6f 91       	pop	r22
     b76:	5f 91       	pop	r21
     b78:	3f 91       	pop	r19
     b7a:	2f 91       	pop	r18
     b7c:	0f 90       	pop	r0
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	0f 90       	pop	r0
     b82:	1f 90       	pop	r1
     b84:	18 95       	reti

00000b86 <__vector_17>:
/************************************************************************/

/************************************************************************/
/* handler SPI Serial Transfer Complete                                                         */
/************************************************************************/
ISR(SPI_STC_vect){
     b86:	1f 92       	push	r1
     b88:	0f 92       	push	r0
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	0f 92       	push	r0
     b8e:	11 24       	eor	r1, r1
	
}
     b90:	0f 90       	pop	r0
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	0f 90       	pop	r0
     b96:	1f 90       	pop	r1
     b98:	18 95       	reti

00000b9a <__vector_18>:


/************************************************************************/
/* handler USART0, Rx Complete                                                        */
/************************************************************************/
ISR(USART0_RX_vect){
     b9a:	1f 92       	push	r1
     b9c:	0f 92       	push	r0
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	0f 92       	push	r0
     ba2:	11 24       	eor	r1, r1
     ba4:	0b b6       	in	r0, 0x3b	; 59
     ba6:	0f 92       	push	r0
     ba8:	2f 93       	push	r18
     baa:	3f 93       	push	r19
     bac:	4f 93       	push	r20
     bae:	5f 93       	push	r21
     bb0:	6f 93       	push	r22
     bb2:	7f 93       	push	r23
     bb4:	8f 93       	push	r24
     bb6:	9f 93       	push	r25
     bb8:	af 93       	push	r26
     bba:	bf 93       	push	r27
     bbc:	ef 93       	push	r30
     bbe:	ff 93       	push	r31
	char c;
	c =USART0_receiveChar();
     bc0:	4a d2       	rcall	.+1172   	; 0x1056 <USART0_receiveChar>
	// manda caracter para usart 0
	USART1_sendChar(c);
     bc2:	09 d2       	rcall	.+1042   	; 0xfd6 <USART1_sendChar>
}
     bc4:	ff 91       	pop	r31
     bc6:	ef 91       	pop	r30
     bc8:	bf 91       	pop	r27
     bca:	af 91       	pop	r26
     bcc:	9f 91       	pop	r25
     bce:	8f 91       	pop	r24
     bd0:	7f 91       	pop	r23
     bd2:	6f 91       	pop	r22
     bd4:	5f 91       	pop	r21
     bd6:	4f 91       	pop	r20
     bd8:	3f 91       	pop	r19
     bda:	2f 91       	pop	r18
     bdc:	0f 90       	pop	r0
     bde:	0b be       	out	0x3b, r0	; 59
     be0:	0f 90       	pop	r0
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	0f 90       	pop	r0
     be6:	1f 90       	pop	r1
     be8:	18 95       	reti

00000bea <__vector_19>:


/************************************************************************/
/* handler USART0 Data Register Empty                                                       */
/************************************************************************/
ISR(USART0_UDRE_vect){
     bea:	1f 92       	push	r1
     bec:	0f 92       	push	r0
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	0f 92       	push	r0
     bf2:	11 24       	eor	r1, r1

}
     bf4:	0f 90       	pop	r0
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	0f 90       	pop	r0
     bfa:	1f 90       	pop	r1
     bfc:	18 95       	reti

00000bfe <__vector_20>:


/************************************************************************/
/* handler USART0, Tx Complete                                                       */
/************************************************************************/
ISR(USART0_TX_vect){
     bfe:	1f 92       	push	r1
     c00:	0f 92       	push	r0
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	0f 92       	push	r0
     c06:	11 24       	eor	r1, r1

}
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <__vector_21>:
/************************************************************************/

/************************************************************************/
/* handler ADC Conversion Complete                                                    */
/************************************************************************/
ISR(ADC_vect){
     c12:	1f 92       	push	r1
     c14:	0f 92       	push	r0
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	0f 92       	push	r0
     c1a:	11 24       	eor	r1, r1

}
     c1c:	0f 90       	pop	r0
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	0f 90       	pop	r0
     c22:	1f 90       	pop	r1
     c24:	18 95       	reti

00000c26 <__vector_22>:
/************************************************************************/

/************************************************************************/
/* handler EEPROM Ready                                                   */
/************************************************************************/
ISR(EE_READY_vect){
     c26:	1f 92       	push	r1
     c28:	0f 92       	push	r0
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	0f 92       	push	r0
     c2e:	11 24       	eor	r1, r1

}
     c30:	0f 90       	pop	r0
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	0f 90       	pop	r0
     c36:	1f 90       	pop	r1
     c38:	18 95       	reti

00000c3a <__vector_23>:
/************************************************************************/

/************************************************************************/
/* handler Analog Comparator                                                  */
/************************************************************************/
ISR(ANALOG_COMP_vect){
     c3a:	1f 92       	push	r1
     c3c:	0f 92       	push	r0
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	0f 92       	push	r0
     c42:	11 24       	eor	r1, r1

}
     c44:	0f 90       	pop	r0
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	0f 90       	pop	r0
     c4a:	1f 90       	pop	r1
     c4c:	18 95       	reti

00000c4e <__vector_24>:
/************************************************************************/

/************************************************************************/
/* handler  Timer/Counter1 Compare Match C                                               */
/************************************************************************/
ISR(TIMER1_COMPC_vect){
     c4e:	1f 92       	push	r1
     c50:	0f 92       	push	r0
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	0f 92       	push	r0
     c56:	11 24       	eor	r1, r1

}
     c58:	0f 90       	pop	r0
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	0f 90       	pop	r0
     c5e:	1f 90       	pop	r1
     c60:	18 95       	reti

00000c62 <__vector_25>:


/************************************************************************/
/* handler Timer/Counter3 Capture Event                                             */
/************************************************************************/
ISR(TIMER3_CAPT_vect){
     c62:	1f 92       	push	r1
     c64:	0f 92       	push	r0
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	0f 92       	push	r0
     c6a:	11 24       	eor	r1, r1

}
     c6c:	0f 90       	pop	r0
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	0f 90       	pop	r0
     c72:	1f 90       	pop	r1
     c74:	18 95       	reti

00000c76 <__vector_26>:


/************************************************************************/
/* handler Timer/Counter3 Compare Match A                                             */
/************************************************************************/
ISR(TIMER3_COMPA_vect){
     c76:	1f 92       	push	r1
     c78:	0f 92       	push	r0
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	0f 92       	push	r0
     c7e:	11 24       	eor	r1, r1

}
     c80:	0f 90       	pop	r0
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	0f 90       	pop	r0
     c86:	1f 90       	pop	r1
     c88:	18 95       	reti

00000c8a <__vector_27>:


/************************************************************************/
/* handler Timer/Counter3 Compare Match B                                             */
/************************************************************************/
ISR(TIMER3_COMPB_vect){
     c8a:	1f 92       	push	r1
     c8c:	0f 92       	push	r0
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	0f 92       	push	r0
     c92:	11 24       	eor	r1, r1

}
     c94:	0f 90       	pop	r0
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	0f 90       	pop	r0
     c9a:	1f 90       	pop	r1
     c9c:	18 95       	reti

00000c9e <__vector_28>:


/************************************************************************/
/* handler Timer/Counter3 Compare Match C                                           */
/************************************************************************/
ISR(TIMER3_COMPC_vect){
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1

}
     ca8:	0f 90       	pop	r0
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	0f 90       	pop	r0
     cae:	1f 90       	pop	r1
     cb0:	18 95       	reti

00000cb2 <__vector_29>:


/************************************************************************/
/* handler Timer/Counter3 Overflow                                           */
/************************************************************************/
ISR(TIMER3_OVF_vect){
     cb2:	1f 92       	push	r1
     cb4:	0f 92       	push	r0
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	0f 92       	push	r0
     cba:	11 24       	eor	r1, r1

}
     cbc:	0f 90       	pop	r0
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	0f 90       	pop	r0
     cc2:	1f 90       	pop	r1
     cc4:	18 95       	reti

00000cc6 <__vector_30>:
/************************************************************************/

/************************************************************************/
/* handler USART1, Rx Complete                                                                    */
/************************************************************************/
ISR(USART1_RX_vect){
     cc6:	1f 92       	push	r1
     cc8:	0f 92       	push	r0
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	0f 92       	push	r0
     cce:	11 24       	eor	r1, r1
     cd0:	0b b6       	in	r0, 0x3b	; 59
     cd2:	0f 92       	push	r0
     cd4:	2f 93       	push	r18
     cd6:	3f 93       	push	r19
     cd8:	4f 93       	push	r20
     cda:	5f 93       	push	r21
     cdc:	6f 93       	push	r22
     cde:	7f 93       	push	r23
     ce0:	8f 93       	push	r24
     ce2:	9f 93       	push	r25
     ce4:	af 93       	push	r26
     ce6:	bf 93       	push	r27
     ce8:	cf 93       	push	r28
     cea:	ef 93       	push	r30
     cec:	ff 93       	push	r31
	char c;

	
	c =USART1_receiveChar();
     cee:	a7 d1       	rcall	.+846    	; 0x103e <USART1_receiveChar>
     cf0:	c8 2f       	mov	r28, r24
	USART0_sendChar(c); // reply with received char
     cf2:	ad d1       	rcall	.+858    	; 0x104e <USART0_sendChar>
	if(c== MSG_END_CARACTER){
     cf4:	cc 37       	cpi	r28, 0x7C	; 124
     cf6:	31 f4       	brne	.+12     	; 0xd04 <__vector_30+0x3e>
		nReceivedBytes=0;
     cf8:	10 92 d0 01 	sts	0x01D0, r1
		flagNewMessage=1;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	80 93 9d 01 	sts	0x019D, r24
		return;
     d02:	12 c0       	rjmp	.+36     	; 0xd28 <__vector_30+0x62>
	}
	// save caracter to buffer
	usartBuffer[nReceivedBytes]=c;
     d04:	e0 91 d0 01 	lds	r30, 0x01D0
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	e2 56       	subi	r30, 0x62	; 98
     d0c:	fe 4f       	sbci	r31, 0xFE	; 254
     d0e:	c0 83       	st	Z, r28
	nReceivedBytes++;
     d10:	80 91 d0 01 	lds	r24, 0x01D0
     d14:	8f 5f       	subi	r24, 0xFF	; 255
     d16:	80 93 d0 01 	sts	0x01D0, r24

	// test if buffer underrun	
	if(nReceivedBytes> USART_BUFFER_LENGHT+1){
     d1a:	80 91 d0 01 	lds	r24, 0x01D0
     d1e:	84 33       	cpi	r24, 0x34	; 52
     d20:	18 f0       	brcs	.+6      	; 0xd28 <__vector_30+0x62>
		nReceivedBytes=0;
     d22:	10 92 d0 01 	sts	0x01D0, r1
		clearBuffer();
     d26:	43 de       	rcall	.-890    	; 0x9ae <clearBuffer>
	}
}
     d28:	ff 91       	pop	r31
     d2a:	ef 91       	pop	r30
     d2c:	cf 91       	pop	r28
     d2e:	bf 91       	pop	r27
     d30:	af 91       	pop	r26
     d32:	9f 91       	pop	r25
     d34:	8f 91       	pop	r24
     d36:	7f 91       	pop	r23
     d38:	6f 91       	pop	r22
     d3a:	5f 91       	pop	r21
     d3c:	4f 91       	pop	r20
     d3e:	3f 91       	pop	r19
     d40:	2f 91       	pop	r18
     d42:	0f 90       	pop	r0
     d44:	0b be       	out	0x3b, r0	; 59
     d46:	0f 90       	pop	r0
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	0f 90       	pop	r0
     d4c:	1f 90       	pop	r1
     d4e:	18 95       	reti

00000d50 <__vector_31>:


/************************************************************************/
/* handler USART1 Data Register Empty                                          */
/************************************************************************/
ISR(USART1_UDRE_vect){
     d50:	1f 92       	push	r1
     d52:	0f 92       	push	r0
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	0f 92       	push	r0
     d58:	11 24       	eor	r1, r1

}
     d5a:	0f 90       	pop	r0
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	0f 90       	pop	r0
     d60:	1f 90       	pop	r1
     d62:	18 95       	reti

00000d64 <__vector_32>:


/************************************************************************/
/* handler USART1, Tx Complete                                         */
/************************************************************************/
ISR(USART1_TX_vect){
     d64:	1f 92       	push	r1
     d66:	0f 92       	push	r0
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	0f 92       	push	r0
     d6c:	11 24       	eor	r1, r1

}
     d6e:	0f 90       	pop	r0
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	0f 90       	pop	r0
     d74:	1f 90       	pop	r1
     d76:	18 95       	reti

00000d78 <__vector_33>:


/************************************************************************/
/* handler Two-wire Serial Interface                                       */
/************************************************************************/
ISR(TWI_vect){
     d78:	1f 92       	push	r1
     d7a:	0f 92       	push	r0
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	0f 92       	push	r0
     d80:	11 24       	eor	r1, r1

}
     d82:	0f 90       	pop	r0
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	0f 90       	pop	r0
     d88:	1f 90       	pop	r1
     d8a:	18 95       	reti

00000d8c <__vector_34>:


/************************************************************************/
/* handler Store Program Memory Ready                                       */
/************************************************************************/
ISR(SPM_READY_vect){
     d8c:	1f 92       	push	r1
     d8e:	0f 92       	push	r0
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	0f 92       	push	r0
     d94:	11 24       	eor	r1, r1

}
     d96:	0f 90       	pop	r0
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	0f 90       	pop	r0
     d9c:	1f 90       	pop	r1
     d9e:	18 95       	reti

00000da0 <PID_setPid>:

/*
 * reset I term limit
 */
void PID_resetIerr() {
	pid_Ierr = 0;
     da0:	ef 92       	push	r14
     da2:	ff 92       	push	r15
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	60 93 3d 01 	sts	0x013D, r22
     dac:	70 93 3e 01 	sts	0x013E, r23
     db0:	80 93 3f 01 	sts	0x013F, r24
     db4:	90 93 40 01 	sts	0x0140, r25
     db8:	20 93 39 01 	sts	0x0139, r18
     dbc:	30 93 3a 01 	sts	0x013A, r19
     dc0:	40 93 3b 01 	sts	0x013B, r20
     dc4:	50 93 3c 01 	sts	0x013C, r21
     dc8:	e0 92 35 01 	sts	0x0135, r14
     dcc:	f0 92 36 01 	sts	0x0136, r15
     dd0:	00 93 37 01 	sts	0x0137, r16
     dd4:	10 93 38 01 	sts	0x0138, r17
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	ff 90       	pop	r15
     dde:	ef 90       	pop	r14
     de0:	08 95       	ret

00000de2 <PID_setLimitsPerr>:
     de2:	90 93 11 01 	sts	0x0111, r25
     de6:	80 93 10 01 	sts	0x0110, r24
     dea:	70 93 0f 01 	sts	0x010F, r23
     dee:	60 93 0e 01 	sts	0x010E, r22
     df2:	08 95       	ret

00000df4 <PID_setLimitsIerr>:
     df4:	90 93 0d 01 	sts	0x010D, r25
     df8:	80 93 0c 01 	sts	0x010C, r24
     dfc:	70 93 0b 01 	sts	0x010B, r23
     e00:	60 93 0a 01 	sts	0x010A, r22
     e04:	08 95       	ret

00000e06 <PID_update>:


/*
 * pid control algorithm
 */
int16_t PID_update(int16_t setpoint, int16_t input, double dt) {
     e06:	4f 92       	push	r4
     e08:	5f 92       	push	r5
     e0a:	6f 92       	push	r6
     e0c:	7f 92       	push	r7
     e0e:	8f 92       	push	r8
     e10:	9f 92       	push	r9
     e12:	af 92       	push	r10
     e14:	bf 92       	push	r11
     e16:	cf 92       	push	r12
     e18:	df 92       	push	r13
     e1a:	ef 92       	push	r14
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
	//if this function get called always at the same period, dt = 1 can be used
	//otherwise dt should be calculated
	static int16_t inputprev = 0;

	//compute P error
	pid_Perr = setpoint - input;
     e26:	86 1b       	sub	r24, r22
     e28:	97 0b       	sbc	r25, r23
     e2a:	90 93 34 01 	sts	0x0134, r25
     e2e:	80 93 33 01 	sts	0x0133, r24
	// Apply saturation if need
	if(pid_Perr < pid_Perrmin)
     e32:	20 91 33 01 	lds	r18, 0x0133
     e36:	30 91 34 01 	lds	r19, 0x0134
     e3a:	80 91 10 01 	lds	r24, 0x0110
     e3e:	90 91 11 01 	lds	r25, 0x0111
     e42:	28 17       	cp	r18, r24
     e44:	39 07       	cpc	r19, r25
     e46:	4c f4       	brge	.+18     	; 0xe5a <PID_update+0x54>
		pid_Perr = pid_Perrmin;
     e48:	80 91 10 01 	lds	r24, 0x0110
     e4c:	90 91 11 01 	lds	r25, 0x0111
     e50:	90 93 34 01 	sts	0x0134, r25
     e54:	80 93 33 01 	sts	0x0133, r24
     e58:	13 c0       	rjmp	.+38     	; 0xe80 <PID_update+0x7a>
	else if(pid_Perr > pid_Perrmax)
     e5a:	20 91 33 01 	lds	r18, 0x0133
     e5e:	30 91 34 01 	lds	r19, 0x0134
     e62:	80 91 0e 01 	lds	r24, 0x010E
     e66:	90 91 0f 01 	lds	r25, 0x010F
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	44 f4       	brge	.+16     	; 0xe80 <PID_update+0x7a>
		pid_Perr = pid_Perrmax;
     e70:	80 91 0e 01 	lds	r24, 0x010E
     e74:	90 91 0f 01 	lds	r25, 0x010F
     e78:	90 93 34 01 	sts	0x0134, r25
     e7c:	80 93 33 01 	sts	0x0133, r24

	//compute I error
	pid_Ierr += pid_Ierr;
     e80:	20 91 31 01 	lds	r18, 0x0131
     e84:	30 91 32 01 	lds	r19, 0x0132
     e88:	80 91 31 01 	lds	r24, 0x0131
     e8c:	90 91 32 01 	lds	r25, 0x0132
     e90:	82 0f       	add	r24, r18
     e92:	93 1f       	adc	r25, r19
     e94:	90 93 32 01 	sts	0x0132, r25
     e98:	80 93 31 01 	sts	0x0131, r24
	// apli Saturation if need
	if(pid_Ierr < pid_Ierrmin)
     e9c:	20 91 31 01 	lds	r18, 0x0131
     ea0:	30 91 32 01 	lds	r19, 0x0132
     ea4:	80 91 0c 01 	lds	r24, 0x010C
     ea8:	90 91 0d 01 	lds	r25, 0x010D
     eac:	28 17       	cp	r18, r24
     eae:	39 07       	cpc	r19, r25
     eb0:	4c f4       	brge	.+18     	; 0xec4 <PID_update+0xbe>
		pid_Ierr = pid_Ierrmin;
     eb2:	80 91 0c 01 	lds	r24, 0x010C
     eb6:	90 91 0d 01 	lds	r25, 0x010D
     eba:	90 93 32 01 	sts	0x0132, r25
     ebe:	80 93 31 01 	sts	0x0131, r24
     ec2:	13 c0       	rjmp	.+38     	; 0xeea <PID_update+0xe4>
	else if(pid_Ierr > pid_Ierrmax)
     ec4:	20 91 31 01 	lds	r18, 0x0131
     ec8:	30 91 32 01 	lds	r19, 0x0132
     ecc:	80 91 0a 01 	lds	r24, 0x010A
     ed0:	90 91 0b 01 	lds	r25, 0x010B
     ed4:	82 17       	cp	r24, r18
     ed6:	93 07       	cpc	r25, r19
     ed8:	44 f4       	brge	.+16     	; 0xeea <PID_update+0xe4>
		pid_Ierr = pid_Ierrmax;
     eda:	80 91 0a 01 	lds	r24, 0x010A
     ede:	90 91 0b 01 	lds	r25, 0x010B
     ee2:	90 93 32 01 	sts	0x0132, r25
     ee6:	80 93 31 01 	sts	0x0131, r24

	//compute D error
	pid_Derr = (inputprev - input);
     eea:	80 91 2d 01 	lds	r24, 0x012D
     eee:	90 91 2e 01 	lds	r25, 0x012E
     ef2:	86 1b       	sub	r24, r22
     ef4:	97 0b       	sbc	r25, r23
     ef6:	90 93 30 01 	sts	0x0130, r25
     efa:	80 93 2f 01 	sts	0x012F, r24

	//record last value
	inputprev = input;
     efe:	70 93 2e 01 	sts	0x012E, r23
     f02:	60 93 2d 01 	sts	0x012D, r22

	//compute output Apply the gains
	int16_t output = (pid_pidP*pid_Perr) + (pid_pidI*pid_Ierr) + (pid_pidD*pid_Derr);
     f06:	60 91 33 01 	lds	r22, 0x0133
     f0a:	70 91 34 01 	lds	r23, 0x0134
     f0e:	c0 90 3d 01 	lds	r12, 0x013D
     f12:	d0 90 3e 01 	lds	r13, 0x013E
     f16:	e0 90 3f 01 	lds	r14, 0x013F
     f1a:	f0 90 40 01 	lds	r15, 0x0140
     f1e:	c0 91 31 01 	lds	r28, 0x0131
     f22:	d0 91 32 01 	lds	r29, 0x0132
     f26:	40 90 39 01 	lds	r4, 0x0139
     f2a:	50 90 3a 01 	lds	r5, 0x013A
     f2e:	60 90 3b 01 	lds	r6, 0x013B
     f32:	70 90 3c 01 	lds	r7, 0x013C
     f36:	00 91 2f 01 	lds	r16, 0x012F
     f3a:	10 91 30 01 	lds	r17, 0x0130
     f3e:	80 90 35 01 	lds	r8, 0x0135
     f42:	90 90 36 01 	lds	r9, 0x0136
     f46:	a0 90 37 01 	lds	r10, 0x0137
     f4a:	b0 90 38 01 	lds	r11, 0x0138
     f4e:	88 27       	eor	r24, r24
     f50:	77 fd       	sbrc	r23, 7
     f52:	80 95       	com	r24
     f54:	98 2f       	mov	r25, r24
     f56:	67 d1       	rcall	.+718    	; 0x1226 <__floatsisf>
     f58:	a7 01       	movw	r20, r14
     f5a:	96 01       	movw	r18, r12
     f5c:	18 d2       	rcall	.+1072   	; 0x138e <__mulsf3>
     f5e:	6b 01       	movw	r12, r22
     f60:	7c 01       	movw	r14, r24
     f62:	be 01       	movw	r22, r28
     f64:	88 27       	eor	r24, r24
     f66:	77 fd       	sbrc	r23, 7
     f68:	80 95       	com	r24
     f6a:	98 2f       	mov	r25, r24
     f6c:	5c d1       	rcall	.+696    	; 0x1226 <__floatsisf>
     f6e:	a3 01       	movw	r20, r6
     f70:	92 01       	movw	r18, r4
     f72:	0d d2       	rcall	.+1050   	; 0x138e <__mulsf3>
     f74:	9b 01       	movw	r18, r22
     f76:	ac 01       	movw	r20, r24
     f78:	c7 01       	movw	r24, r14
     f7a:	b6 01       	movw	r22, r12
     f7c:	b9 d0       	rcall	.+370    	; 0x10f0 <__addsf3>
     f7e:	6b 01       	movw	r12, r22
     f80:	7c 01       	movw	r14, r24
     f82:	b8 01       	movw	r22, r16
     f84:	88 27       	eor	r24, r24
     f86:	77 fd       	sbrc	r23, 7
     f88:	80 95       	com	r24
     f8a:	98 2f       	mov	r25, r24
     f8c:	4c d1       	rcall	.+664    	; 0x1226 <__floatsisf>
     f8e:	a5 01       	movw	r20, r10
     f90:	94 01       	movw	r18, r8
     f92:	fd d1       	rcall	.+1018   	; 0x138e <__mulsf3>
     f94:	9b 01       	movw	r18, r22
     f96:	ac 01       	movw	r20, r24
     f98:	c7 01       	movw	r24, r14
     f9a:	b6 01       	movw	r22, r12
     f9c:	a9 d0       	rcall	.+338    	; 0x10f0 <__addsf3>
     f9e:	10 d1       	rcall	.+544    	; 0x11c0 <__fixsfsi>

	return output;
     fa0:	cb 01       	movw	r24, r22
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	ff 90       	pop	r15
     fac:	ef 90       	pop	r14
     fae:	df 90       	pop	r13
     fb0:	cf 90       	pop	r12
     fb2:	bf 90       	pop	r11
     fb4:	af 90       	pop	r10
     fb6:	9f 90       	pop	r9
     fb8:	8f 90       	pop	r8
     fba:	7f 90       	pop	r7
     fbc:	6f 90       	pop	r6
     fbe:	5f 90       	pop	r5
     fc0:	4f 90       	pop	r4
     fc2:	08 95       	ret

00000fc4 <USART1_config>:
		{
			USART0_sendChar(*(data+i));	//CALL FUNCTION AND SEND CHAR IN THAT POSITION
		}
	}

}
     fc4:	90 93 98 00 	sts	0x0098, r25
     fc8:	80 93 99 00 	sts	0x0099, r24
     fcc:	40 93 9a 00 	sts	0x009A, r20
     fd0:	60 93 9d 00 	sts	0x009D, r22
     fd4:	08 95       	ret

00000fd6 <USART1_sendChar>:
     fd6:	eb e9       	ldi	r30, 0x9B	; 155
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	90 81       	ld	r25, Z
     fdc:	95 ff       	sbrs	r25, 5
     fde:	fd cf       	rjmp	.-6      	; 0xfda <USART1_sendChar+0x4>
     fe0:	80 93 9c 00 	sts	0x009C, r24
     fe4:	08 95       	ret

00000fe6 <USART1_sendStr>:
     fe6:	ef 92       	push	r14
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	fc 01       	movw	r30, r24
     ff4:	dc 01       	movw	r26, r24
     ff6:	0d 90       	ld	r0, X+
     ff8:	00 20       	and	r0, r0
     ffa:	e9 f7       	brne	.-6      	; 0xff6 <USART1_sendStr+0x10>
     ffc:	11 97       	sbiw	r26, 0x01	; 1
     ffe:	7d 01       	movw	r14, r26
    1000:	e8 1a       	sub	r14, r24
    1002:	f9 0a       	sbc	r15, r25
    1004:	1e 14       	cp	r1, r14
    1006:	1f 04       	cpc	r1, r15
    1008:	9c f4       	brge	.+38     	; 0x1030 <USART1_sendStr+0x4a>
    100a:	80 81       	ld	r24, Z
    100c:	88 23       	and	r24, r24
    100e:	81 f0       	breq	.+32     	; 0x1030 <USART1_sendStr+0x4a>
    1010:	8f 01       	movw	r16, r30
    1012:	0f 5f       	subi	r16, 0xFF	; 255
    1014:	1f 4f       	sbci	r17, 0xFF	; 255
    1016:	c0 e0       	ldi	r28, 0x00	; 0
    1018:	d0 e0       	ldi	r29, 0x00	; 0
    101a:	05 c0       	rjmp	.+10     	; 0x1026 <USART1_sendStr+0x40>
    101c:	f8 01       	movw	r30, r16
    101e:	81 91       	ld	r24, Z+
    1020:	8f 01       	movw	r16, r30
    1022:	88 23       	and	r24, r24
    1024:	29 f0       	breq	.+10     	; 0x1030 <USART1_sendStr+0x4a>
    1026:	d7 df       	rcall	.-82     	; 0xfd6 <USART1_sendChar>
    1028:	21 96       	adiw	r28, 0x01	; 1
    102a:	ec 16       	cp	r14, r28
    102c:	fd 06       	cpc	r15, r29
    102e:	b1 f7       	brne	.-20     	; 0x101c <USART1_sendStr+0x36>
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	08 95       	ret

0000103e <USART1_receiveChar>:
    103e:	eb e9       	ldi	r30, 0x9B	; 155
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	88 23       	and	r24, r24
    1046:	ec f7       	brge	.-6      	; 0x1042 <USART1_receiveChar+0x4>
    1048:	80 91 9c 00 	lds	r24, 0x009C
    104c:	08 95       	ret

0000104e <USART0_sendChar>:
    104e:	5d 9b       	sbis	0x0b, 5	; 11
    1050:	fe cf       	rjmp	.-4      	; 0x104e <USART0_sendChar>
    1052:	8c b9       	out	0x0c, r24	; 12
    1054:	08 95       	ret

00001056 <USART0_receiveChar>:
/************************************************************************/
/* USART RECEIVE CHAR                                                   */
/************************************************************************/
char USART0_receiveChar(void){
	//wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );	// do nothing
    1056:	5f 9b       	sbis	0x0b, 7	; 11
    1058:	fe cf       	rjmp	.-4      	; 0x1056 <USART0_receiveChar>
	
	return UDR0;
    105a:	8c b1       	in	r24, 0x0c	; 12
}
    105c:	08 95       	ret

0000105e <parseString>:


/************************************************************************/
/* @pasring string into tokens and put in global parts variable                                                                      */
/************************************************************************/
uint8_t parseString(char *data, char delimiterChar){
    105e:	8f 92       	push	r8
    1060:	9f 92       	push	r9
    1062:	af 92       	push	r10
    1064:	bf 92       	push	r11
    1066:	cf 92       	push	r12
    1068:	df 92       	push	r13
    106a:	ef 92       	push	r14
    106c:	ff 92       	push	r15
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	ec 01       	movw	r28, r24
	char *p_start, *p_end;
	uint8_t nTokens=0;
    1078:	91 2c       	mov	r9, r1

	p_start = data;

	while(1) {
		p_end = strchr(p_start, delimiterChar);
    107a:	a6 2e       	mov	r10, r22
    107c:	b1 2c       	mov	r11, r1
		if (p_end) {
			strncpy(tokenParts[nTokens], p_start, p_end-p_start);
    107e:	0f 2e       	mov	r0, r31
    1080:	f4 e1       	ldi	r31, 0x14	; 20
    1082:	8f 2e       	mov	r8, r31
    1084:	f0 2d       	mov	r31, r0
	uint8_t nTokens=0;

	p_start = data;

	while(1) {
		p_end = strchr(p_start, delimiterChar);
    1086:	b5 01       	movw	r22, r10
    1088:	ce 01       	movw	r24, r28
    108a:	31 d2       	rcall	.+1122   	; 0x14ee <strchr>
    108c:	8c 01       	movw	r16, r24
		if (p_end) {
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	b1 f0       	breq	.+44     	; 0x10be <parseString+0x60>
			strncpy(tokenParts[nTokens], p_start, p_end-p_start);
    1092:	7c 01       	movw	r14, r24
    1094:	ec 1a       	sub	r14, r28
    1096:	fd 0a       	sbc	r15, r29
    1098:	89 9c       	mul	r8, r9
    109a:	60 01       	movw	r12, r0
    109c:	11 24       	eor	r1, r1
    109e:	a7 01       	movw	r20, r14
    10a0:	be 01       	movw	r22, r28
    10a2:	c6 01       	movw	r24, r12
    10a4:	8f 52       	subi	r24, 0x2F	; 47
    10a6:	9e 4f       	sbci	r25, 0xFE	; 254
    10a8:	2d d2       	rcall	.+1114   	; 0x1504 <strncpy>
			tokenParts[nTokens][p_end-p_start] = 0;
    10aa:	f6 01       	movw	r30, r12
    10ac:	ee 0d       	add	r30, r14
    10ae:	ff 1d       	adc	r31, r15
    10b0:	ef 52       	subi	r30, 0x2F	; 47
    10b2:	fe 4f       	sbci	r31, 0xFE	; 254
    10b4:	10 82       	st	Z, r1
			nTokens++;
    10b6:	93 94       	inc	r9
			p_start = p_end + 1;
    10b8:	e8 01       	movw	r28, r16
    10ba:	21 96       	adiw	r28, 0x01	; 1
		else {
			// sopy the last bit - might as well copy 20
			strncpy(tokenParts[nTokens], p_start, 20);
			break;
		}
	}
    10bc:	e4 cf       	rjmp	.-56     	; 0x1086 <parseString+0x28>
			nTokens++;
			p_start = p_end + 1;
		}
		else {
			// sopy the last bit - might as well copy 20
			strncpy(tokenParts[nTokens], p_start, 20);
    10be:	24 e1       	ldi	r18, 0x14	; 20
    10c0:	92 9e       	mul	r9, r18
    10c2:	c0 01       	movw	r24, r0
    10c4:	11 24       	eor	r1, r1
    10c6:	44 e1       	ldi	r20, 0x14	; 20
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	be 01       	movw	r22, r28
    10cc:	8f 52       	subi	r24, 0x2F	; 47
    10ce:	9e 4f       	sbci	r25, 0xFE	; 254
    10d0:	19 d2       	rcall	.+1074   	; 0x1504 <strncpy>
			break;
		}
	}
	return nTokens;
}
    10d2:	89 2d       	mov	r24, r9
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	1f 91       	pop	r17
    10da:	0f 91       	pop	r16
    10dc:	ff 90       	pop	r15
    10de:	ef 90       	pop	r14
    10e0:	df 90       	pop	r13
    10e2:	cf 90       	pop	r12
    10e4:	bf 90       	pop	r11
    10e6:	af 90       	pop	r10
    10e8:	9f 90       	pop	r9
    10ea:	8f 90       	pop	r8
    10ec:	08 95       	ret

000010ee <__subsf3>:
    10ee:	50 58       	subi	r21, 0x80	; 128

000010f0 <__addsf3>:
    10f0:	bb 27       	eor	r27, r27
    10f2:	aa 27       	eor	r26, r26
    10f4:	0e d0       	rcall	.+28     	; 0x1112 <__addsf3x>
    10f6:	0d c1       	rjmp	.+538    	; 0x1312 <__fp_round>
    10f8:	fe d0       	rcall	.+508    	; 0x12f6 <__fp_pscA>
    10fa:	30 f0       	brcs	.+12     	; 0x1108 <__stack+0x9>
    10fc:	03 d1       	rcall	.+518    	; 0x1304 <__fp_pscB>
    10fe:	20 f0       	brcs	.+8      	; 0x1108 <__stack+0x9>
    1100:	31 f4       	brne	.+12     	; 0x110e <__stack+0xf>
    1102:	9f 3f       	cpi	r25, 0xFF	; 255
    1104:	11 f4       	brne	.+4      	; 0x110a <__stack+0xb>
    1106:	1e f4       	brtc	.+6      	; 0x110e <__stack+0xf>
    1108:	f3 c0       	rjmp	.+486    	; 0x12f0 <__fp_nan>
    110a:	0e f4       	brtc	.+2      	; 0x110e <__stack+0xf>
    110c:	e0 95       	com	r30
    110e:	e7 fb       	bst	r30, 7
    1110:	e9 c0       	rjmp	.+466    	; 0x12e4 <__fp_inf>

00001112 <__addsf3x>:
    1112:	e9 2f       	mov	r30, r25
    1114:	0f d1       	rcall	.+542    	; 0x1334 <__fp_split3>
    1116:	80 f3       	brcs	.-32     	; 0x10f8 <__addsf3+0x8>
    1118:	ba 17       	cp	r27, r26
    111a:	62 07       	cpc	r22, r18
    111c:	73 07       	cpc	r23, r19
    111e:	84 07       	cpc	r24, r20
    1120:	95 07       	cpc	r25, r21
    1122:	18 f0       	brcs	.+6      	; 0x112a <__addsf3x+0x18>
    1124:	71 f4       	brne	.+28     	; 0x1142 <__addsf3x+0x30>
    1126:	9e f5       	brtc	.+102    	; 0x118e <__addsf3x+0x7c>
    1128:	27 c1       	rjmp	.+590    	; 0x1378 <__fp_zero>
    112a:	0e f4       	brtc	.+2      	; 0x112e <__addsf3x+0x1c>
    112c:	e0 95       	com	r30
    112e:	0b 2e       	mov	r0, r27
    1130:	ba 2f       	mov	r27, r26
    1132:	a0 2d       	mov	r26, r0
    1134:	0b 01       	movw	r0, r22
    1136:	b9 01       	movw	r22, r18
    1138:	90 01       	movw	r18, r0
    113a:	0c 01       	movw	r0, r24
    113c:	ca 01       	movw	r24, r20
    113e:	a0 01       	movw	r20, r0
    1140:	11 24       	eor	r1, r1
    1142:	ff 27       	eor	r31, r31
    1144:	59 1b       	sub	r21, r25
    1146:	99 f0       	breq	.+38     	; 0x116e <__addsf3x+0x5c>
    1148:	59 3f       	cpi	r21, 0xF9	; 249
    114a:	50 f4       	brcc	.+20     	; 0x1160 <__addsf3x+0x4e>
    114c:	50 3e       	cpi	r21, 0xE0	; 224
    114e:	68 f1       	brcs	.+90     	; 0x11aa <__addsf3x+0x98>
    1150:	1a 16       	cp	r1, r26
    1152:	f0 40       	sbci	r31, 0x00	; 0
    1154:	a2 2f       	mov	r26, r18
    1156:	23 2f       	mov	r18, r19
    1158:	34 2f       	mov	r19, r20
    115a:	44 27       	eor	r20, r20
    115c:	58 5f       	subi	r21, 0xF8	; 248
    115e:	f3 cf       	rjmp	.-26     	; 0x1146 <__addsf3x+0x34>
    1160:	46 95       	lsr	r20
    1162:	37 95       	ror	r19
    1164:	27 95       	ror	r18
    1166:	a7 95       	ror	r26
    1168:	f0 40       	sbci	r31, 0x00	; 0
    116a:	53 95       	inc	r21
    116c:	c9 f7       	brne	.-14     	; 0x1160 <__addsf3x+0x4e>
    116e:	7e f4       	brtc	.+30     	; 0x118e <__addsf3x+0x7c>
    1170:	1f 16       	cp	r1, r31
    1172:	ba 0b       	sbc	r27, r26
    1174:	62 0b       	sbc	r22, r18
    1176:	73 0b       	sbc	r23, r19
    1178:	84 0b       	sbc	r24, r20
    117a:	ba f0       	brmi	.+46     	; 0x11aa <__addsf3x+0x98>
    117c:	91 50       	subi	r25, 0x01	; 1
    117e:	a1 f0       	breq	.+40     	; 0x11a8 <__addsf3x+0x96>
    1180:	ff 0f       	add	r31, r31
    1182:	bb 1f       	adc	r27, r27
    1184:	66 1f       	adc	r22, r22
    1186:	77 1f       	adc	r23, r23
    1188:	88 1f       	adc	r24, r24
    118a:	c2 f7       	brpl	.-16     	; 0x117c <__addsf3x+0x6a>
    118c:	0e c0       	rjmp	.+28     	; 0x11aa <__addsf3x+0x98>
    118e:	ba 0f       	add	r27, r26
    1190:	62 1f       	adc	r22, r18
    1192:	73 1f       	adc	r23, r19
    1194:	84 1f       	adc	r24, r20
    1196:	48 f4       	brcc	.+18     	; 0x11aa <__addsf3x+0x98>
    1198:	87 95       	ror	r24
    119a:	77 95       	ror	r23
    119c:	67 95       	ror	r22
    119e:	b7 95       	ror	r27
    11a0:	f7 95       	ror	r31
    11a2:	9e 3f       	cpi	r25, 0xFE	; 254
    11a4:	08 f0       	brcs	.+2      	; 0x11a8 <__addsf3x+0x96>
    11a6:	b3 cf       	rjmp	.-154    	; 0x110e <__stack+0xf>
    11a8:	93 95       	inc	r25
    11aa:	88 0f       	add	r24, r24
    11ac:	08 f0       	brcs	.+2      	; 0x11b0 <__addsf3x+0x9e>
    11ae:	99 27       	eor	r25, r25
    11b0:	ee 0f       	add	r30, r30
    11b2:	97 95       	ror	r25
    11b4:	87 95       	ror	r24
    11b6:	08 95       	ret

000011b8 <__cmpsf2>:
    11b8:	71 d0       	rcall	.+226    	; 0x129c <__fp_cmp>
    11ba:	08 f4       	brcc	.+2      	; 0x11be <__cmpsf2+0x6>
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	08 95       	ret

000011c0 <__fixsfsi>:
    11c0:	04 d0       	rcall	.+8      	; 0x11ca <__fixunssfsi>
    11c2:	68 94       	set
    11c4:	b1 11       	cpse	r27, r1
    11c6:	d9 c0       	rjmp	.+434    	; 0x137a <__fp_szero>
    11c8:	08 95       	ret

000011ca <__fixunssfsi>:
    11ca:	bc d0       	rcall	.+376    	; 0x1344 <__fp_splitA>
    11cc:	88 f0       	brcs	.+34     	; 0x11f0 <__fixunssfsi+0x26>
    11ce:	9f 57       	subi	r25, 0x7F	; 127
    11d0:	90 f0       	brcs	.+36     	; 0x11f6 <__fixunssfsi+0x2c>
    11d2:	b9 2f       	mov	r27, r25
    11d4:	99 27       	eor	r25, r25
    11d6:	b7 51       	subi	r27, 0x17	; 23
    11d8:	a0 f0       	brcs	.+40     	; 0x1202 <__fixunssfsi+0x38>
    11da:	d1 f0       	breq	.+52     	; 0x1210 <__fixunssfsi+0x46>
    11dc:	66 0f       	add	r22, r22
    11de:	77 1f       	adc	r23, r23
    11e0:	88 1f       	adc	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	1a f0       	brmi	.+6      	; 0x11ec <__fixunssfsi+0x22>
    11e6:	ba 95       	dec	r27
    11e8:	c9 f7       	brne	.-14     	; 0x11dc <__fixunssfsi+0x12>
    11ea:	12 c0       	rjmp	.+36     	; 0x1210 <__fixunssfsi+0x46>
    11ec:	b1 30       	cpi	r27, 0x01	; 1
    11ee:	81 f0       	breq	.+32     	; 0x1210 <__fixunssfsi+0x46>
    11f0:	c3 d0       	rcall	.+390    	; 0x1378 <__fp_zero>
    11f2:	b1 e0       	ldi	r27, 0x01	; 1
    11f4:	08 95       	ret
    11f6:	c0 c0       	rjmp	.+384    	; 0x1378 <__fp_zero>
    11f8:	67 2f       	mov	r22, r23
    11fa:	78 2f       	mov	r23, r24
    11fc:	88 27       	eor	r24, r24
    11fe:	b8 5f       	subi	r27, 0xF8	; 248
    1200:	39 f0       	breq	.+14     	; 0x1210 <__fixunssfsi+0x46>
    1202:	b9 3f       	cpi	r27, 0xF9	; 249
    1204:	cc f3       	brlt	.-14     	; 0x11f8 <__fixunssfsi+0x2e>
    1206:	86 95       	lsr	r24
    1208:	77 95       	ror	r23
    120a:	67 95       	ror	r22
    120c:	b3 95       	inc	r27
    120e:	d9 f7       	brne	.-10     	; 0x1206 <__fixunssfsi+0x3c>
    1210:	3e f4       	brtc	.+14     	; 0x1220 <__fixunssfsi+0x56>
    1212:	90 95       	com	r25
    1214:	80 95       	com	r24
    1216:	70 95       	com	r23
    1218:	61 95       	neg	r22
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	8f 4f       	sbci	r24, 0xFF	; 255
    121e:	9f 4f       	sbci	r25, 0xFF	; 255
    1220:	08 95       	ret

00001222 <__floatunsisf>:
    1222:	e8 94       	clt
    1224:	09 c0       	rjmp	.+18     	; 0x1238 <__floatsisf+0x12>

00001226 <__floatsisf>:
    1226:	97 fb       	bst	r25, 7
    1228:	3e f4       	brtc	.+14     	; 0x1238 <__floatsisf+0x12>
    122a:	90 95       	com	r25
    122c:	80 95       	com	r24
    122e:	70 95       	com	r23
    1230:	61 95       	neg	r22
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	8f 4f       	sbci	r24, 0xFF	; 255
    1236:	9f 4f       	sbci	r25, 0xFF	; 255
    1238:	99 23       	and	r25, r25
    123a:	a9 f0       	breq	.+42     	; 0x1266 <__floatsisf+0x40>
    123c:	f9 2f       	mov	r31, r25
    123e:	96 e9       	ldi	r25, 0x96	; 150
    1240:	bb 27       	eor	r27, r27
    1242:	93 95       	inc	r25
    1244:	f6 95       	lsr	r31
    1246:	87 95       	ror	r24
    1248:	77 95       	ror	r23
    124a:	67 95       	ror	r22
    124c:	b7 95       	ror	r27
    124e:	f1 11       	cpse	r31, r1
    1250:	f8 cf       	rjmp	.-16     	; 0x1242 <__floatsisf+0x1c>
    1252:	fa f4       	brpl	.+62     	; 0x1292 <__floatsisf+0x6c>
    1254:	bb 0f       	add	r27, r27
    1256:	11 f4       	brne	.+4      	; 0x125c <__floatsisf+0x36>
    1258:	60 ff       	sbrs	r22, 0
    125a:	1b c0       	rjmp	.+54     	; 0x1292 <__floatsisf+0x6c>
    125c:	6f 5f       	subi	r22, 0xFF	; 255
    125e:	7f 4f       	sbci	r23, 0xFF	; 255
    1260:	8f 4f       	sbci	r24, 0xFF	; 255
    1262:	9f 4f       	sbci	r25, 0xFF	; 255
    1264:	16 c0       	rjmp	.+44     	; 0x1292 <__floatsisf+0x6c>
    1266:	88 23       	and	r24, r24
    1268:	11 f0       	breq	.+4      	; 0x126e <__floatsisf+0x48>
    126a:	96 e9       	ldi	r25, 0x96	; 150
    126c:	11 c0       	rjmp	.+34     	; 0x1290 <__floatsisf+0x6a>
    126e:	77 23       	and	r23, r23
    1270:	21 f0       	breq	.+8      	; 0x127a <__floatsisf+0x54>
    1272:	9e e8       	ldi	r25, 0x8E	; 142
    1274:	87 2f       	mov	r24, r23
    1276:	76 2f       	mov	r23, r22
    1278:	05 c0       	rjmp	.+10     	; 0x1284 <__floatsisf+0x5e>
    127a:	66 23       	and	r22, r22
    127c:	71 f0       	breq	.+28     	; 0x129a <__floatsisf+0x74>
    127e:	96 e8       	ldi	r25, 0x86	; 134
    1280:	86 2f       	mov	r24, r22
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	2a f0       	brmi	.+10     	; 0x1292 <__floatsisf+0x6c>
    1288:	9a 95       	dec	r25
    128a:	66 0f       	add	r22, r22
    128c:	77 1f       	adc	r23, r23
    128e:	88 1f       	adc	r24, r24
    1290:	da f7       	brpl	.-10     	; 0x1288 <__floatsisf+0x62>
    1292:	88 0f       	add	r24, r24
    1294:	96 95       	lsr	r25
    1296:	87 95       	ror	r24
    1298:	97 f9       	bld	r25, 7
    129a:	08 95       	ret

0000129c <__fp_cmp>:
    129c:	99 0f       	add	r25, r25
    129e:	00 08       	sbc	r0, r0
    12a0:	55 0f       	add	r21, r21
    12a2:	aa 0b       	sbc	r26, r26
    12a4:	e0 e8       	ldi	r30, 0x80	; 128
    12a6:	fe ef       	ldi	r31, 0xFE	; 254
    12a8:	16 16       	cp	r1, r22
    12aa:	17 06       	cpc	r1, r23
    12ac:	e8 07       	cpc	r30, r24
    12ae:	f9 07       	cpc	r31, r25
    12b0:	c0 f0       	brcs	.+48     	; 0x12e2 <__fp_cmp+0x46>
    12b2:	12 16       	cp	r1, r18
    12b4:	13 06       	cpc	r1, r19
    12b6:	e4 07       	cpc	r30, r20
    12b8:	f5 07       	cpc	r31, r21
    12ba:	98 f0       	brcs	.+38     	; 0x12e2 <__fp_cmp+0x46>
    12bc:	62 1b       	sub	r22, r18
    12be:	73 0b       	sbc	r23, r19
    12c0:	84 0b       	sbc	r24, r20
    12c2:	95 0b       	sbc	r25, r21
    12c4:	39 f4       	brne	.+14     	; 0x12d4 <__fp_cmp+0x38>
    12c6:	0a 26       	eor	r0, r26
    12c8:	61 f0       	breq	.+24     	; 0x12e2 <__fp_cmp+0x46>
    12ca:	23 2b       	or	r18, r19
    12cc:	24 2b       	or	r18, r20
    12ce:	25 2b       	or	r18, r21
    12d0:	21 f4       	brne	.+8      	; 0x12da <__fp_cmp+0x3e>
    12d2:	08 95       	ret
    12d4:	0a 26       	eor	r0, r26
    12d6:	09 f4       	brne	.+2      	; 0x12da <__fp_cmp+0x3e>
    12d8:	a1 40       	sbci	r26, 0x01	; 1
    12da:	a6 95       	lsr	r26
    12dc:	8f ef       	ldi	r24, 0xFF	; 255
    12de:	81 1d       	adc	r24, r1
    12e0:	81 1d       	adc	r24, r1
    12e2:	08 95       	ret

000012e4 <__fp_inf>:
    12e4:	97 f9       	bld	r25, 7
    12e6:	9f 67       	ori	r25, 0x7F	; 127
    12e8:	80 e8       	ldi	r24, 0x80	; 128
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	08 95       	ret

000012f0 <__fp_nan>:
    12f0:	9f ef       	ldi	r25, 0xFF	; 255
    12f2:	80 ec       	ldi	r24, 0xC0	; 192
    12f4:	08 95       	ret

000012f6 <__fp_pscA>:
    12f6:	00 24       	eor	r0, r0
    12f8:	0a 94       	dec	r0
    12fa:	16 16       	cp	r1, r22
    12fc:	17 06       	cpc	r1, r23
    12fe:	18 06       	cpc	r1, r24
    1300:	09 06       	cpc	r0, r25
    1302:	08 95       	ret

00001304 <__fp_pscB>:
    1304:	00 24       	eor	r0, r0
    1306:	0a 94       	dec	r0
    1308:	12 16       	cp	r1, r18
    130a:	13 06       	cpc	r1, r19
    130c:	14 06       	cpc	r1, r20
    130e:	05 06       	cpc	r0, r21
    1310:	08 95       	ret

00001312 <__fp_round>:
    1312:	09 2e       	mov	r0, r25
    1314:	03 94       	inc	r0
    1316:	00 0c       	add	r0, r0
    1318:	11 f4       	brne	.+4      	; 0x131e <__fp_round+0xc>
    131a:	88 23       	and	r24, r24
    131c:	52 f0       	brmi	.+20     	; 0x1332 <__fp_round+0x20>
    131e:	bb 0f       	add	r27, r27
    1320:	40 f4       	brcc	.+16     	; 0x1332 <__fp_round+0x20>
    1322:	bf 2b       	or	r27, r31
    1324:	11 f4       	brne	.+4      	; 0x132a <__fp_round+0x18>
    1326:	60 ff       	sbrs	r22, 0
    1328:	04 c0       	rjmp	.+8      	; 0x1332 <__fp_round+0x20>
    132a:	6f 5f       	subi	r22, 0xFF	; 255
    132c:	7f 4f       	sbci	r23, 0xFF	; 255
    132e:	8f 4f       	sbci	r24, 0xFF	; 255
    1330:	9f 4f       	sbci	r25, 0xFF	; 255
    1332:	08 95       	ret

00001334 <__fp_split3>:
    1334:	57 fd       	sbrc	r21, 7
    1336:	90 58       	subi	r25, 0x80	; 128
    1338:	44 0f       	add	r20, r20
    133a:	55 1f       	adc	r21, r21
    133c:	59 f0       	breq	.+22     	; 0x1354 <__fp_splitA+0x10>
    133e:	5f 3f       	cpi	r21, 0xFF	; 255
    1340:	71 f0       	breq	.+28     	; 0x135e <__fp_splitA+0x1a>
    1342:	47 95       	ror	r20

00001344 <__fp_splitA>:
    1344:	88 0f       	add	r24, r24
    1346:	97 fb       	bst	r25, 7
    1348:	99 1f       	adc	r25, r25
    134a:	61 f0       	breq	.+24     	; 0x1364 <__fp_splitA+0x20>
    134c:	9f 3f       	cpi	r25, 0xFF	; 255
    134e:	79 f0       	breq	.+30     	; 0x136e <__fp_splitA+0x2a>
    1350:	87 95       	ror	r24
    1352:	08 95       	ret
    1354:	12 16       	cp	r1, r18
    1356:	13 06       	cpc	r1, r19
    1358:	14 06       	cpc	r1, r20
    135a:	55 1f       	adc	r21, r21
    135c:	f2 cf       	rjmp	.-28     	; 0x1342 <__fp_split3+0xe>
    135e:	46 95       	lsr	r20
    1360:	f1 df       	rcall	.-30     	; 0x1344 <__fp_splitA>
    1362:	08 c0       	rjmp	.+16     	; 0x1374 <__fp_splitA+0x30>
    1364:	16 16       	cp	r1, r22
    1366:	17 06       	cpc	r1, r23
    1368:	18 06       	cpc	r1, r24
    136a:	99 1f       	adc	r25, r25
    136c:	f1 cf       	rjmp	.-30     	; 0x1350 <__fp_splitA+0xc>
    136e:	86 95       	lsr	r24
    1370:	71 05       	cpc	r23, r1
    1372:	61 05       	cpc	r22, r1
    1374:	08 94       	sec
    1376:	08 95       	ret

00001378 <__fp_zero>:
    1378:	e8 94       	clt

0000137a <__fp_szero>:
    137a:	bb 27       	eor	r27, r27
    137c:	66 27       	eor	r22, r22
    137e:	77 27       	eor	r23, r23
    1380:	cb 01       	movw	r24, r22
    1382:	97 f9       	bld	r25, 7
    1384:	08 95       	ret

00001386 <__gesf2>:
    1386:	8a df       	rcall	.-236    	; 0x129c <__fp_cmp>
    1388:	08 f4       	brcc	.+2      	; 0x138c <__gesf2+0x6>
    138a:	8f ef       	ldi	r24, 0xFF	; 255
    138c:	08 95       	ret

0000138e <__mulsf3>:
    138e:	0b d0       	rcall	.+22     	; 0x13a6 <__mulsf3x>
    1390:	c0 cf       	rjmp	.-128    	; 0x1312 <__fp_round>
    1392:	b1 df       	rcall	.-158    	; 0x12f6 <__fp_pscA>
    1394:	28 f0       	brcs	.+10     	; 0x13a0 <__mulsf3+0x12>
    1396:	b6 df       	rcall	.-148    	; 0x1304 <__fp_pscB>
    1398:	18 f0       	brcs	.+6      	; 0x13a0 <__mulsf3+0x12>
    139a:	95 23       	and	r25, r21
    139c:	09 f0       	breq	.+2      	; 0x13a0 <__mulsf3+0x12>
    139e:	a2 cf       	rjmp	.-188    	; 0x12e4 <__fp_inf>
    13a0:	a7 cf       	rjmp	.-178    	; 0x12f0 <__fp_nan>
    13a2:	11 24       	eor	r1, r1
    13a4:	ea cf       	rjmp	.-44     	; 0x137a <__fp_szero>

000013a6 <__mulsf3x>:
    13a6:	c6 df       	rcall	.-116    	; 0x1334 <__fp_split3>
    13a8:	a0 f3       	brcs	.-24     	; 0x1392 <__mulsf3+0x4>

000013aa <__mulsf3_pse>:
    13aa:	95 9f       	mul	r25, r21
    13ac:	d1 f3       	breq	.-12     	; 0x13a2 <__mulsf3+0x14>
    13ae:	95 0f       	add	r25, r21
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	55 1f       	adc	r21, r21
    13b4:	62 9f       	mul	r22, r18
    13b6:	f0 01       	movw	r30, r0
    13b8:	72 9f       	mul	r23, r18
    13ba:	bb 27       	eor	r27, r27
    13bc:	f0 0d       	add	r31, r0
    13be:	b1 1d       	adc	r27, r1
    13c0:	63 9f       	mul	r22, r19
    13c2:	aa 27       	eor	r26, r26
    13c4:	f0 0d       	add	r31, r0
    13c6:	b1 1d       	adc	r27, r1
    13c8:	aa 1f       	adc	r26, r26
    13ca:	64 9f       	mul	r22, r20
    13cc:	66 27       	eor	r22, r22
    13ce:	b0 0d       	add	r27, r0
    13d0:	a1 1d       	adc	r26, r1
    13d2:	66 1f       	adc	r22, r22
    13d4:	82 9f       	mul	r24, r18
    13d6:	22 27       	eor	r18, r18
    13d8:	b0 0d       	add	r27, r0
    13da:	a1 1d       	adc	r26, r1
    13dc:	62 1f       	adc	r22, r18
    13de:	73 9f       	mul	r23, r19
    13e0:	b0 0d       	add	r27, r0
    13e2:	a1 1d       	adc	r26, r1
    13e4:	62 1f       	adc	r22, r18
    13e6:	83 9f       	mul	r24, r19
    13e8:	a0 0d       	add	r26, r0
    13ea:	61 1d       	adc	r22, r1
    13ec:	22 1f       	adc	r18, r18
    13ee:	74 9f       	mul	r23, r20
    13f0:	33 27       	eor	r19, r19
    13f2:	a0 0d       	add	r26, r0
    13f4:	61 1d       	adc	r22, r1
    13f6:	23 1f       	adc	r18, r19
    13f8:	84 9f       	mul	r24, r20
    13fa:	60 0d       	add	r22, r0
    13fc:	21 1d       	adc	r18, r1
    13fe:	82 2f       	mov	r24, r18
    1400:	76 2f       	mov	r23, r22
    1402:	6a 2f       	mov	r22, r26
    1404:	11 24       	eor	r1, r1
    1406:	9f 57       	subi	r25, 0x7F	; 127
    1408:	50 40       	sbci	r21, 0x00	; 0
    140a:	8a f0       	brmi	.+34     	; 0x142e <__mulsf3_pse+0x84>
    140c:	e1 f0       	breq	.+56     	; 0x1446 <__mulsf3_pse+0x9c>
    140e:	88 23       	and	r24, r24
    1410:	4a f0       	brmi	.+18     	; 0x1424 <__mulsf3_pse+0x7a>
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	bb 1f       	adc	r27, r27
    1418:	66 1f       	adc	r22, r22
    141a:	77 1f       	adc	r23, r23
    141c:	88 1f       	adc	r24, r24
    141e:	91 50       	subi	r25, 0x01	; 1
    1420:	50 40       	sbci	r21, 0x00	; 0
    1422:	a9 f7       	brne	.-22     	; 0x140e <__mulsf3_pse+0x64>
    1424:	9e 3f       	cpi	r25, 0xFE	; 254
    1426:	51 05       	cpc	r21, r1
    1428:	70 f0       	brcs	.+28     	; 0x1446 <__mulsf3_pse+0x9c>
    142a:	5c cf       	rjmp	.-328    	; 0x12e4 <__fp_inf>
    142c:	a6 cf       	rjmp	.-180    	; 0x137a <__fp_szero>
    142e:	5f 3f       	cpi	r21, 0xFF	; 255
    1430:	ec f3       	brlt	.-6      	; 0x142c <__mulsf3_pse+0x82>
    1432:	98 3e       	cpi	r25, 0xE8	; 232
    1434:	dc f3       	brlt	.-10     	; 0x142c <__mulsf3_pse+0x82>
    1436:	86 95       	lsr	r24
    1438:	77 95       	ror	r23
    143a:	67 95       	ror	r22
    143c:	b7 95       	ror	r27
    143e:	f7 95       	ror	r31
    1440:	e7 95       	ror	r30
    1442:	9f 5f       	subi	r25, 0xFF	; 255
    1444:	c1 f7       	brne	.-16     	; 0x1436 <__mulsf3_pse+0x8c>
    1446:	fe 2b       	or	r31, r30
    1448:	88 0f       	add	r24, r24
    144a:	91 1d       	adc	r25, r1
    144c:	96 95       	lsr	r25
    144e:	87 95       	ror	r24
    1450:	97 f9       	bld	r25, 7
    1452:	08 95       	ret

00001454 <__udivmodhi4>:
    1454:	aa 1b       	sub	r26, r26
    1456:	bb 1b       	sub	r27, r27
    1458:	51 e1       	ldi	r21, 0x11	; 17
    145a:	07 c0       	rjmp	.+14     	; 0x146a <__udivmodhi4_ep>

0000145c <__udivmodhi4_loop>:
    145c:	aa 1f       	adc	r26, r26
    145e:	bb 1f       	adc	r27, r27
    1460:	a6 17       	cp	r26, r22
    1462:	b7 07       	cpc	r27, r23
    1464:	10 f0       	brcs	.+4      	; 0x146a <__udivmodhi4_ep>
    1466:	a6 1b       	sub	r26, r22
    1468:	b7 0b       	sbc	r27, r23

0000146a <__udivmodhi4_ep>:
    146a:	88 1f       	adc	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	5a 95       	dec	r21
    1470:	a9 f7       	brne	.-22     	; 0x145c <__udivmodhi4_loop>
    1472:	80 95       	com	r24
    1474:	90 95       	com	r25
    1476:	bc 01       	movw	r22, r24
    1478:	cd 01       	movw	r24, r26
    147a:	08 95       	ret

0000147c <__umulhisi3>:
    147c:	a2 9f       	mul	r26, r18
    147e:	b0 01       	movw	r22, r0
    1480:	b3 9f       	mul	r27, r19
    1482:	c0 01       	movw	r24, r0
    1484:	a3 9f       	mul	r26, r19
    1486:	70 0d       	add	r23, r0
    1488:	81 1d       	adc	r24, r1
    148a:	11 24       	eor	r1, r1
    148c:	91 1d       	adc	r25, r1
    148e:	b2 9f       	mul	r27, r18
    1490:	70 0d       	add	r23, r0
    1492:	81 1d       	adc	r24, r1
    1494:	11 24       	eor	r1, r1
    1496:	91 1d       	adc	r25, r1
    1498:	08 95       	ret

0000149a <__muluhisi3>:
    149a:	f0 df       	rcall	.-32     	; 0x147c <__umulhisi3>
    149c:	a5 9f       	mul	r26, r21
    149e:	90 0d       	add	r25, r0
    14a0:	b4 9f       	mul	r27, r20
    14a2:	90 0d       	add	r25, r0
    14a4:	a4 9f       	mul	r26, r20
    14a6:	80 0d       	add	r24, r0
    14a8:	91 1d       	adc	r25, r1
    14aa:	11 24       	eor	r1, r1
    14ac:	08 95       	ret

000014ae <atof>:
    14ae:	66 27       	eor	r22, r22
    14b0:	77 27       	eor	r23, r23
    14b2:	81 c2       	rjmp	.+1282   	; 0x19b6 <strtod>

000014b4 <atoi>:
    14b4:	fc 01       	movw	r30, r24
    14b6:	88 27       	eor	r24, r24
    14b8:	99 27       	eor	r25, r25
    14ba:	e8 94       	clt
    14bc:	21 91       	ld	r18, Z+
    14be:	20 32       	cpi	r18, 0x20	; 32
    14c0:	e9 f3       	breq	.-6      	; 0x14bc <atoi+0x8>
    14c2:	29 30       	cpi	r18, 0x09	; 9
    14c4:	10 f0       	brcs	.+4      	; 0x14ca <atoi+0x16>
    14c6:	2e 30       	cpi	r18, 0x0E	; 14
    14c8:	c8 f3       	brcs	.-14     	; 0x14bc <atoi+0x8>
    14ca:	2b 32       	cpi	r18, 0x2B	; 43
    14cc:	39 f0       	breq	.+14     	; 0x14dc <atoi+0x28>
    14ce:	2d 32       	cpi	r18, 0x2D	; 45
    14d0:	31 f4       	brne	.+12     	; 0x14de <atoi+0x2a>
    14d2:	68 94       	set
    14d4:	03 c0       	rjmp	.+6      	; 0x14dc <atoi+0x28>
    14d6:	25 d0       	rcall	.+74     	; 0x1522 <__mulhi_const_10>
    14d8:	82 0f       	add	r24, r18
    14da:	91 1d       	adc	r25, r1
    14dc:	21 91       	ld	r18, Z+
    14de:	20 53       	subi	r18, 0x30	; 48
    14e0:	2a 30       	cpi	r18, 0x0A	; 10
    14e2:	c8 f3       	brcs	.-14     	; 0x14d6 <atoi+0x22>
    14e4:	1e f4       	brtc	.+6      	; 0x14ec <atoi+0x38>
    14e6:	90 95       	com	r25
    14e8:	81 95       	neg	r24
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	08 95       	ret

000014ee <strchr>:
    14ee:	fc 01       	movw	r30, r24
    14f0:	81 91       	ld	r24, Z+
    14f2:	86 17       	cp	r24, r22
    14f4:	21 f0       	breq	.+8      	; 0x14fe <strchr+0x10>
    14f6:	88 23       	and	r24, r24
    14f8:	d9 f7       	brne	.-10     	; 0x14f0 <strchr+0x2>
    14fa:	99 27       	eor	r25, r25
    14fc:	08 95       	ret
    14fe:	31 97       	sbiw	r30, 0x01	; 1
    1500:	cf 01       	movw	r24, r30
    1502:	08 95       	ret

00001504 <strncpy>:
    1504:	fb 01       	movw	r30, r22
    1506:	dc 01       	movw	r26, r24
    1508:	41 50       	subi	r20, 0x01	; 1
    150a:	50 40       	sbci	r21, 0x00	; 0
    150c:	48 f0       	brcs	.+18     	; 0x1520 <strncpy+0x1c>
    150e:	01 90       	ld	r0, Z+
    1510:	0d 92       	st	X+, r0
    1512:	00 20       	and	r0, r0
    1514:	c9 f7       	brne	.-14     	; 0x1508 <strncpy+0x4>
    1516:	01 c0       	rjmp	.+2      	; 0x151a <strncpy+0x16>
    1518:	1d 92       	st	X+, r1
    151a:	41 50       	subi	r20, 0x01	; 1
    151c:	50 40       	sbci	r21, 0x00	; 0
    151e:	e0 f7       	brcc	.-8      	; 0x1518 <strncpy+0x14>
    1520:	08 95       	ret

00001522 <__mulhi_const_10>:
    1522:	7a e0       	ldi	r23, 0x0A	; 10
    1524:	97 9f       	mul	r25, r23
    1526:	90 2d       	mov	r25, r0
    1528:	87 9f       	mul	r24, r23
    152a:	80 2d       	mov	r24, r0
    152c:	91 0d       	add	r25, r1
    152e:	11 24       	eor	r1, r1
    1530:	08 95       	ret

00001532 <sprintf>:
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	2e 97       	sbiw	r28, 0x0e	; 14
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	0d 89       	ldd	r16, Y+21	; 0x15
    154c:	1e 89       	ldd	r17, Y+22	; 0x16
    154e:	86 e0       	ldi	r24, 0x06	; 6
    1550:	8c 83       	std	Y+4, r24	; 0x04
    1552:	1a 83       	std	Y+2, r17	; 0x02
    1554:	09 83       	std	Y+1, r16	; 0x01
    1556:	8f ef       	ldi	r24, 0xFF	; 255
    1558:	9f e7       	ldi	r25, 0x7F	; 127
    155a:	9e 83       	std	Y+6, r25	; 0x06
    155c:	8d 83       	std	Y+5, r24	; 0x05
    155e:	ae 01       	movw	r20, r28
    1560:	47 5e       	subi	r20, 0xE7	; 231
    1562:	5f 4f       	sbci	r21, 0xFF	; 255
    1564:	6f 89       	ldd	r22, Y+23	; 0x17
    1566:	78 8d       	ldd	r23, Y+24	; 0x18
    1568:	ce 01       	movw	r24, r28
    156a:	01 96       	adiw	r24, 0x01	; 1
    156c:	10 d0       	rcall	.+32     	; 0x158e <vfprintf>
    156e:	ef 81       	ldd	r30, Y+7	; 0x07
    1570:	f8 85       	ldd	r31, Y+8	; 0x08
    1572:	e0 0f       	add	r30, r16
    1574:	f1 1f       	adc	r31, r17
    1576:	10 82       	st	Z, r1
    1578:	2e 96       	adiw	r28, 0x0e	; 14
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	de bf       	out	0x3e, r29	; 62
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	cd bf       	out	0x3d, r28	; 61
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	08 95       	ret

0000158e <vfprintf>:
    158e:	2f 92       	push	r2
    1590:	3f 92       	push	r3
    1592:	4f 92       	push	r4
    1594:	5f 92       	push	r5
    1596:	6f 92       	push	r6
    1598:	7f 92       	push	r7
    159a:	8f 92       	push	r8
    159c:	9f 92       	push	r9
    159e:	af 92       	push	r10
    15a0:	bf 92       	push	r11
    15a2:	cf 92       	push	r12
    15a4:	df 92       	push	r13
    15a6:	ef 92       	push	r14
    15a8:	ff 92       	push	r15
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	2c 97       	sbiw	r28, 0x0c	; 12
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	7c 01       	movw	r14, r24
    15c4:	6b 01       	movw	r12, r22
    15c6:	8a 01       	movw	r16, r20
    15c8:	fc 01       	movw	r30, r24
    15ca:	17 82       	std	Z+7, r1	; 0x07
    15cc:	16 82       	std	Z+6, r1	; 0x06
    15ce:	83 81       	ldd	r24, Z+3	; 0x03
    15d0:	81 ff       	sbrs	r24, 1
    15d2:	b0 c1       	rjmp	.+864    	; 0x1934 <vfprintf+0x3a6>
    15d4:	ce 01       	movw	r24, r28
    15d6:	01 96       	adiw	r24, 0x01	; 1
    15d8:	4c 01       	movw	r8, r24
    15da:	f7 01       	movw	r30, r14
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	f6 01       	movw	r30, r12
    15e0:	93 fd       	sbrc	r25, 3
    15e2:	85 91       	lpm	r24, Z+
    15e4:	93 ff       	sbrs	r25, 3
    15e6:	81 91       	ld	r24, Z+
    15e8:	6f 01       	movw	r12, r30
    15ea:	88 23       	and	r24, r24
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <vfprintf+0x62>
    15ee:	9e c1       	rjmp	.+828    	; 0x192c <vfprintf+0x39e>
    15f0:	85 32       	cpi	r24, 0x25	; 37
    15f2:	39 f4       	brne	.+14     	; 0x1602 <vfprintf+0x74>
    15f4:	93 fd       	sbrc	r25, 3
    15f6:	85 91       	lpm	r24, Z+
    15f8:	93 ff       	sbrs	r25, 3
    15fa:	81 91       	ld	r24, Z+
    15fc:	6f 01       	movw	r12, r30
    15fe:	85 32       	cpi	r24, 0x25	; 37
    1600:	21 f4       	brne	.+8      	; 0x160a <vfprintf+0x7c>
    1602:	b7 01       	movw	r22, r14
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	75 d3       	rcall	.+1770   	; 0x1cf2 <fputc>
    1608:	e8 cf       	rjmp	.-48     	; 0x15da <vfprintf+0x4c>
    160a:	51 2c       	mov	r5, r1
    160c:	31 2c       	mov	r3, r1
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	20 32       	cpi	r18, 0x20	; 32
    1612:	a0 f4       	brcc	.+40     	; 0x163c <vfprintf+0xae>
    1614:	8b 32       	cpi	r24, 0x2B	; 43
    1616:	69 f0       	breq	.+26     	; 0x1632 <vfprintf+0xa4>
    1618:	30 f4       	brcc	.+12     	; 0x1626 <vfprintf+0x98>
    161a:	80 32       	cpi	r24, 0x20	; 32
    161c:	59 f0       	breq	.+22     	; 0x1634 <vfprintf+0xa6>
    161e:	83 32       	cpi	r24, 0x23	; 35
    1620:	69 f4       	brne	.+26     	; 0x163c <vfprintf+0xae>
    1622:	20 61       	ori	r18, 0x10	; 16
    1624:	2c c0       	rjmp	.+88     	; 0x167e <vfprintf+0xf0>
    1626:	8d 32       	cpi	r24, 0x2D	; 45
    1628:	39 f0       	breq	.+14     	; 0x1638 <vfprintf+0xaa>
    162a:	80 33       	cpi	r24, 0x30	; 48
    162c:	39 f4       	brne	.+14     	; 0x163c <vfprintf+0xae>
    162e:	21 60       	ori	r18, 0x01	; 1
    1630:	26 c0       	rjmp	.+76     	; 0x167e <vfprintf+0xf0>
    1632:	22 60       	ori	r18, 0x02	; 2
    1634:	24 60       	ori	r18, 0x04	; 4
    1636:	23 c0       	rjmp	.+70     	; 0x167e <vfprintf+0xf0>
    1638:	28 60       	ori	r18, 0x08	; 8
    163a:	21 c0       	rjmp	.+66     	; 0x167e <vfprintf+0xf0>
    163c:	27 fd       	sbrc	r18, 7
    163e:	27 c0       	rjmp	.+78     	; 0x168e <vfprintf+0x100>
    1640:	30 ed       	ldi	r19, 0xD0	; 208
    1642:	38 0f       	add	r19, r24
    1644:	3a 30       	cpi	r19, 0x0A	; 10
    1646:	78 f4       	brcc	.+30     	; 0x1666 <vfprintf+0xd8>
    1648:	26 ff       	sbrs	r18, 6
    164a:	06 c0       	rjmp	.+12     	; 0x1658 <vfprintf+0xca>
    164c:	fa e0       	ldi	r31, 0x0A	; 10
    164e:	5f 9e       	mul	r5, r31
    1650:	30 0d       	add	r19, r0
    1652:	11 24       	eor	r1, r1
    1654:	53 2e       	mov	r5, r19
    1656:	13 c0       	rjmp	.+38     	; 0x167e <vfprintf+0xf0>
    1658:	8a e0       	ldi	r24, 0x0A	; 10
    165a:	38 9e       	mul	r3, r24
    165c:	30 0d       	add	r19, r0
    165e:	11 24       	eor	r1, r1
    1660:	33 2e       	mov	r3, r19
    1662:	20 62       	ori	r18, 0x20	; 32
    1664:	0c c0       	rjmp	.+24     	; 0x167e <vfprintf+0xf0>
    1666:	8e 32       	cpi	r24, 0x2E	; 46
    1668:	21 f4       	brne	.+8      	; 0x1672 <vfprintf+0xe4>
    166a:	26 fd       	sbrc	r18, 6
    166c:	5f c1       	rjmp	.+702    	; 0x192c <vfprintf+0x39e>
    166e:	20 64       	ori	r18, 0x40	; 64
    1670:	06 c0       	rjmp	.+12     	; 0x167e <vfprintf+0xf0>
    1672:	8c 36       	cpi	r24, 0x6C	; 108
    1674:	11 f4       	brne	.+4      	; 0x167a <vfprintf+0xec>
    1676:	20 68       	ori	r18, 0x80	; 128
    1678:	02 c0       	rjmp	.+4      	; 0x167e <vfprintf+0xf0>
    167a:	88 36       	cpi	r24, 0x68	; 104
    167c:	41 f4       	brne	.+16     	; 0x168e <vfprintf+0x100>
    167e:	f6 01       	movw	r30, r12
    1680:	93 fd       	sbrc	r25, 3
    1682:	85 91       	lpm	r24, Z+
    1684:	93 ff       	sbrs	r25, 3
    1686:	81 91       	ld	r24, Z+
    1688:	6f 01       	movw	r12, r30
    168a:	81 11       	cpse	r24, r1
    168c:	c1 cf       	rjmp	.-126    	; 0x1610 <vfprintf+0x82>
    168e:	98 2f       	mov	r25, r24
    1690:	9f 7d       	andi	r25, 0xDF	; 223
    1692:	95 54       	subi	r25, 0x45	; 69
    1694:	93 30       	cpi	r25, 0x03	; 3
    1696:	28 f4       	brcc	.+10     	; 0x16a2 <vfprintf+0x114>
    1698:	0c 5f       	subi	r16, 0xFC	; 252
    169a:	1f 4f       	sbci	r17, 0xFF	; 255
    169c:	ff e3       	ldi	r31, 0x3F	; 63
    169e:	f9 83       	std	Y+1, r31	; 0x01
    16a0:	0d c0       	rjmp	.+26     	; 0x16bc <vfprintf+0x12e>
    16a2:	83 36       	cpi	r24, 0x63	; 99
    16a4:	31 f0       	breq	.+12     	; 0x16b2 <vfprintf+0x124>
    16a6:	83 37       	cpi	r24, 0x73	; 115
    16a8:	71 f0       	breq	.+28     	; 0x16c6 <vfprintf+0x138>
    16aa:	83 35       	cpi	r24, 0x53	; 83
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <vfprintf+0x122>
    16ae:	57 c0       	rjmp	.+174    	; 0x175e <vfprintf+0x1d0>
    16b0:	21 c0       	rjmp	.+66     	; 0x16f4 <vfprintf+0x166>
    16b2:	f8 01       	movw	r30, r16
    16b4:	80 81       	ld	r24, Z
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	0e 5f       	subi	r16, 0xFE	; 254
    16ba:	1f 4f       	sbci	r17, 0xFF	; 255
    16bc:	44 24       	eor	r4, r4
    16be:	43 94       	inc	r4
    16c0:	51 2c       	mov	r5, r1
    16c2:	54 01       	movw	r10, r8
    16c4:	14 c0       	rjmp	.+40     	; 0x16ee <vfprintf+0x160>
    16c6:	38 01       	movw	r6, r16
    16c8:	f2 e0       	ldi	r31, 0x02	; 2
    16ca:	6f 0e       	add	r6, r31
    16cc:	71 1c       	adc	r7, r1
    16ce:	f8 01       	movw	r30, r16
    16d0:	a0 80       	ld	r10, Z
    16d2:	b1 80       	ldd	r11, Z+1	; 0x01
    16d4:	26 ff       	sbrs	r18, 6
    16d6:	03 c0       	rjmp	.+6      	; 0x16de <vfprintf+0x150>
    16d8:	65 2d       	mov	r22, r5
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <vfprintf+0x154>
    16de:	6f ef       	ldi	r22, 0xFF	; 255
    16e0:	7f ef       	ldi	r23, 0xFF	; 255
    16e2:	c5 01       	movw	r24, r10
    16e4:	2c 87       	std	Y+12, r18	; 0x0c
    16e6:	fa d2       	rcall	.+1524   	; 0x1cdc <strnlen>
    16e8:	2c 01       	movw	r4, r24
    16ea:	83 01       	movw	r16, r6
    16ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    16ee:	2f 77       	andi	r18, 0x7F	; 127
    16f0:	22 2e       	mov	r2, r18
    16f2:	16 c0       	rjmp	.+44     	; 0x1720 <vfprintf+0x192>
    16f4:	38 01       	movw	r6, r16
    16f6:	f2 e0       	ldi	r31, 0x02	; 2
    16f8:	6f 0e       	add	r6, r31
    16fa:	71 1c       	adc	r7, r1
    16fc:	f8 01       	movw	r30, r16
    16fe:	a0 80       	ld	r10, Z
    1700:	b1 80       	ldd	r11, Z+1	; 0x01
    1702:	26 ff       	sbrs	r18, 6
    1704:	03 c0       	rjmp	.+6      	; 0x170c <vfprintf+0x17e>
    1706:	65 2d       	mov	r22, r5
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <vfprintf+0x182>
    170c:	6f ef       	ldi	r22, 0xFF	; 255
    170e:	7f ef       	ldi	r23, 0xFF	; 255
    1710:	c5 01       	movw	r24, r10
    1712:	2c 87       	std	Y+12, r18	; 0x0c
    1714:	d8 d2       	rcall	.+1456   	; 0x1cc6 <strnlen_P>
    1716:	2c 01       	movw	r4, r24
    1718:	2c 85       	ldd	r18, Y+12	; 0x0c
    171a:	20 68       	ori	r18, 0x80	; 128
    171c:	22 2e       	mov	r2, r18
    171e:	83 01       	movw	r16, r6
    1720:	23 fc       	sbrc	r2, 3
    1722:	19 c0       	rjmp	.+50     	; 0x1756 <vfprintf+0x1c8>
    1724:	83 2d       	mov	r24, r3
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	48 16       	cp	r4, r24
    172a:	59 06       	cpc	r5, r25
    172c:	a0 f4       	brcc	.+40     	; 0x1756 <vfprintf+0x1c8>
    172e:	b7 01       	movw	r22, r14
    1730:	80 e2       	ldi	r24, 0x20	; 32
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	de d2       	rcall	.+1468   	; 0x1cf2 <fputc>
    1736:	3a 94       	dec	r3
    1738:	f5 cf       	rjmp	.-22     	; 0x1724 <vfprintf+0x196>
    173a:	f5 01       	movw	r30, r10
    173c:	27 fc       	sbrc	r2, 7
    173e:	85 91       	lpm	r24, Z+
    1740:	27 fe       	sbrs	r2, 7
    1742:	81 91       	ld	r24, Z+
    1744:	5f 01       	movw	r10, r30
    1746:	b7 01       	movw	r22, r14
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	d3 d2       	rcall	.+1446   	; 0x1cf2 <fputc>
    174c:	31 10       	cpse	r3, r1
    174e:	3a 94       	dec	r3
    1750:	f1 e0       	ldi	r31, 0x01	; 1
    1752:	4f 1a       	sub	r4, r31
    1754:	51 08       	sbc	r5, r1
    1756:	41 14       	cp	r4, r1
    1758:	51 04       	cpc	r5, r1
    175a:	79 f7       	brne	.-34     	; 0x173a <vfprintf+0x1ac>
    175c:	de c0       	rjmp	.+444    	; 0x191a <vfprintf+0x38c>
    175e:	84 36       	cpi	r24, 0x64	; 100
    1760:	11 f0       	breq	.+4      	; 0x1766 <vfprintf+0x1d8>
    1762:	89 36       	cpi	r24, 0x69	; 105
    1764:	31 f5       	brne	.+76     	; 0x17b2 <vfprintf+0x224>
    1766:	f8 01       	movw	r30, r16
    1768:	27 ff       	sbrs	r18, 7
    176a:	07 c0       	rjmp	.+14     	; 0x177a <vfprintf+0x1ec>
    176c:	60 81       	ld	r22, Z
    176e:	71 81       	ldd	r23, Z+1	; 0x01
    1770:	82 81       	ldd	r24, Z+2	; 0x02
    1772:	93 81       	ldd	r25, Z+3	; 0x03
    1774:	0c 5f       	subi	r16, 0xFC	; 252
    1776:	1f 4f       	sbci	r17, 0xFF	; 255
    1778:	08 c0       	rjmp	.+16     	; 0x178a <vfprintf+0x1fc>
    177a:	60 81       	ld	r22, Z
    177c:	71 81       	ldd	r23, Z+1	; 0x01
    177e:	88 27       	eor	r24, r24
    1780:	77 fd       	sbrc	r23, 7
    1782:	80 95       	com	r24
    1784:	98 2f       	mov	r25, r24
    1786:	0e 5f       	subi	r16, 0xFE	; 254
    1788:	1f 4f       	sbci	r17, 0xFF	; 255
    178a:	2f 76       	andi	r18, 0x6F	; 111
    178c:	b2 2e       	mov	r11, r18
    178e:	97 ff       	sbrs	r25, 7
    1790:	09 c0       	rjmp	.+18     	; 0x17a4 <vfprintf+0x216>
    1792:	90 95       	com	r25
    1794:	80 95       	com	r24
    1796:	70 95       	com	r23
    1798:	61 95       	neg	r22
    179a:	7f 4f       	sbci	r23, 0xFF	; 255
    179c:	8f 4f       	sbci	r24, 0xFF	; 255
    179e:	9f 4f       	sbci	r25, 0xFF	; 255
    17a0:	20 68       	ori	r18, 0x80	; 128
    17a2:	b2 2e       	mov	r11, r18
    17a4:	2a e0       	ldi	r18, 0x0A	; 10
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	a4 01       	movw	r20, r8
    17aa:	d5 d2       	rcall	.+1450   	; 0x1d56 <__ultoa_invert>
    17ac:	a8 2e       	mov	r10, r24
    17ae:	a8 18       	sub	r10, r8
    17b0:	43 c0       	rjmp	.+134    	; 0x1838 <vfprintf+0x2aa>
    17b2:	85 37       	cpi	r24, 0x75	; 117
    17b4:	29 f4       	brne	.+10     	; 0x17c0 <vfprintf+0x232>
    17b6:	2f 7e       	andi	r18, 0xEF	; 239
    17b8:	b2 2e       	mov	r11, r18
    17ba:	2a e0       	ldi	r18, 0x0A	; 10
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	25 c0       	rjmp	.+74     	; 0x180a <vfprintf+0x27c>
    17c0:	f2 2f       	mov	r31, r18
    17c2:	f9 7f       	andi	r31, 0xF9	; 249
    17c4:	bf 2e       	mov	r11, r31
    17c6:	8f 36       	cpi	r24, 0x6F	; 111
    17c8:	c1 f0       	breq	.+48     	; 0x17fa <vfprintf+0x26c>
    17ca:	18 f4       	brcc	.+6      	; 0x17d2 <vfprintf+0x244>
    17cc:	88 35       	cpi	r24, 0x58	; 88
    17ce:	79 f0       	breq	.+30     	; 0x17ee <vfprintf+0x260>
    17d0:	ad c0       	rjmp	.+346    	; 0x192c <vfprintf+0x39e>
    17d2:	80 37       	cpi	r24, 0x70	; 112
    17d4:	19 f0       	breq	.+6      	; 0x17dc <vfprintf+0x24e>
    17d6:	88 37       	cpi	r24, 0x78	; 120
    17d8:	21 f0       	breq	.+8      	; 0x17e2 <vfprintf+0x254>
    17da:	a8 c0       	rjmp	.+336    	; 0x192c <vfprintf+0x39e>
    17dc:	2f 2f       	mov	r18, r31
    17de:	20 61       	ori	r18, 0x10	; 16
    17e0:	b2 2e       	mov	r11, r18
    17e2:	b4 fe       	sbrs	r11, 4
    17e4:	0d c0       	rjmp	.+26     	; 0x1800 <vfprintf+0x272>
    17e6:	8b 2d       	mov	r24, r11
    17e8:	84 60       	ori	r24, 0x04	; 4
    17ea:	b8 2e       	mov	r11, r24
    17ec:	09 c0       	rjmp	.+18     	; 0x1800 <vfprintf+0x272>
    17ee:	24 ff       	sbrs	r18, 4
    17f0:	0a c0       	rjmp	.+20     	; 0x1806 <vfprintf+0x278>
    17f2:	9f 2f       	mov	r25, r31
    17f4:	96 60       	ori	r25, 0x06	; 6
    17f6:	b9 2e       	mov	r11, r25
    17f8:	06 c0       	rjmp	.+12     	; 0x1806 <vfprintf+0x278>
    17fa:	28 e0       	ldi	r18, 0x08	; 8
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	05 c0       	rjmp	.+10     	; 0x180a <vfprintf+0x27c>
    1800:	20 e1       	ldi	r18, 0x10	; 16
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	02 c0       	rjmp	.+4      	; 0x180a <vfprintf+0x27c>
    1806:	20 e1       	ldi	r18, 0x10	; 16
    1808:	32 e0       	ldi	r19, 0x02	; 2
    180a:	f8 01       	movw	r30, r16
    180c:	b7 fe       	sbrs	r11, 7
    180e:	07 c0       	rjmp	.+14     	; 0x181e <vfprintf+0x290>
    1810:	60 81       	ld	r22, Z
    1812:	71 81       	ldd	r23, Z+1	; 0x01
    1814:	82 81       	ldd	r24, Z+2	; 0x02
    1816:	93 81       	ldd	r25, Z+3	; 0x03
    1818:	0c 5f       	subi	r16, 0xFC	; 252
    181a:	1f 4f       	sbci	r17, 0xFF	; 255
    181c:	06 c0       	rjmp	.+12     	; 0x182a <vfprintf+0x29c>
    181e:	60 81       	ld	r22, Z
    1820:	71 81       	ldd	r23, Z+1	; 0x01
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 5f       	subi	r16, 0xFE	; 254
    1828:	1f 4f       	sbci	r17, 0xFF	; 255
    182a:	a4 01       	movw	r20, r8
    182c:	94 d2       	rcall	.+1320   	; 0x1d56 <__ultoa_invert>
    182e:	a8 2e       	mov	r10, r24
    1830:	a8 18       	sub	r10, r8
    1832:	fb 2d       	mov	r31, r11
    1834:	ff 77       	andi	r31, 0x7F	; 127
    1836:	bf 2e       	mov	r11, r31
    1838:	b6 fe       	sbrs	r11, 6
    183a:	0b c0       	rjmp	.+22     	; 0x1852 <vfprintf+0x2c4>
    183c:	2b 2d       	mov	r18, r11
    183e:	2e 7f       	andi	r18, 0xFE	; 254
    1840:	a5 14       	cp	r10, r5
    1842:	50 f4       	brcc	.+20     	; 0x1858 <vfprintf+0x2ca>
    1844:	b4 fe       	sbrs	r11, 4
    1846:	0a c0       	rjmp	.+20     	; 0x185c <vfprintf+0x2ce>
    1848:	b2 fc       	sbrc	r11, 2
    184a:	08 c0       	rjmp	.+16     	; 0x185c <vfprintf+0x2ce>
    184c:	2b 2d       	mov	r18, r11
    184e:	2e 7e       	andi	r18, 0xEE	; 238
    1850:	05 c0       	rjmp	.+10     	; 0x185c <vfprintf+0x2ce>
    1852:	7a 2c       	mov	r7, r10
    1854:	2b 2d       	mov	r18, r11
    1856:	03 c0       	rjmp	.+6      	; 0x185e <vfprintf+0x2d0>
    1858:	7a 2c       	mov	r7, r10
    185a:	01 c0       	rjmp	.+2      	; 0x185e <vfprintf+0x2d0>
    185c:	75 2c       	mov	r7, r5
    185e:	24 ff       	sbrs	r18, 4
    1860:	0d c0       	rjmp	.+26     	; 0x187c <vfprintf+0x2ee>
    1862:	fe 01       	movw	r30, r28
    1864:	ea 0d       	add	r30, r10
    1866:	f1 1d       	adc	r31, r1
    1868:	80 81       	ld	r24, Z
    186a:	80 33       	cpi	r24, 0x30	; 48
    186c:	11 f4       	brne	.+4      	; 0x1872 <vfprintf+0x2e4>
    186e:	29 7e       	andi	r18, 0xE9	; 233
    1870:	09 c0       	rjmp	.+18     	; 0x1884 <vfprintf+0x2f6>
    1872:	22 ff       	sbrs	r18, 2
    1874:	06 c0       	rjmp	.+12     	; 0x1882 <vfprintf+0x2f4>
    1876:	73 94       	inc	r7
    1878:	73 94       	inc	r7
    187a:	04 c0       	rjmp	.+8      	; 0x1884 <vfprintf+0x2f6>
    187c:	82 2f       	mov	r24, r18
    187e:	86 78       	andi	r24, 0x86	; 134
    1880:	09 f0       	breq	.+2      	; 0x1884 <vfprintf+0x2f6>
    1882:	73 94       	inc	r7
    1884:	23 fd       	sbrc	r18, 3
    1886:	12 c0       	rjmp	.+36     	; 0x18ac <vfprintf+0x31e>
    1888:	20 ff       	sbrs	r18, 0
    188a:	06 c0       	rjmp	.+12     	; 0x1898 <vfprintf+0x30a>
    188c:	5a 2c       	mov	r5, r10
    188e:	73 14       	cp	r7, r3
    1890:	18 f4       	brcc	.+6      	; 0x1898 <vfprintf+0x30a>
    1892:	53 0c       	add	r5, r3
    1894:	57 18       	sub	r5, r7
    1896:	73 2c       	mov	r7, r3
    1898:	73 14       	cp	r7, r3
    189a:	60 f4       	brcc	.+24     	; 0x18b4 <vfprintf+0x326>
    189c:	b7 01       	movw	r22, r14
    189e:	80 e2       	ldi	r24, 0x20	; 32
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	2c 87       	std	Y+12, r18	; 0x0c
    18a4:	26 d2       	rcall	.+1100   	; 0x1cf2 <fputc>
    18a6:	73 94       	inc	r7
    18a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    18aa:	f6 cf       	rjmp	.-20     	; 0x1898 <vfprintf+0x30a>
    18ac:	73 14       	cp	r7, r3
    18ae:	10 f4       	brcc	.+4      	; 0x18b4 <vfprintf+0x326>
    18b0:	37 18       	sub	r3, r7
    18b2:	01 c0       	rjmp	.+2      	; 0x18b6 <vfprintf+0x328>
    18b4:	31 2c       	mov	r3, r1
    18b6:	24 ff       	sbrs	r18, 4
    18b8:	11 c0       	rjmp	.+34     	; 0x18dc <vfprintf+0x34e>
    18ba:	b7 01       	movw	r22, r14
    18bc:	80 e3       	ldi	r24, 0x30	; 48
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	2c 87       	std	Y+12, r18	; 0x0c
    18c2:	17 d2       	rcall	.+1070   	; 0x1cf2 <fputc>
    18c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    18c6:	22 ff       	sbrs	r18, 2
    18c8:	16 c0       	rjmp	.+44     	; 0x18f6 <vfprintf+0x368>
    18ca:	21 ff       	sbrs	r18, 1
    18cc:	03 c0       	rjmp	.+6      	; 0x18d4 <vfprintf+0x346>
    18ce:	88 e5       	ldi	r24, 0x58	; 88
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <vfprintf+0x34a>
    18d4:	88 e7       	ldi	r24, 0x78	; 120
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	b7 01       	movw	r22, r14
    18da:	0c c0       	rjmp	.+24     	; 0x18f4 <vfprintf+0x366>
    18dc:	82 2f       	mov	r24, r18
    18de:	86 78       	andi	r24, 0x86	; 134
    18e0:	51 f0       	breq	.+20     	; 0x18f6 <vfprintf+0x368>
    18e2:	21 fd       	sbrc	r18, 1
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <vfprintf+0x35c>
    18e6:	80 e2       	ldi	r24, 0x20	; 32
    18e8:	01 c0       	rjmp	.+2      	; 0x18ec <vfprintf+0x35e>
    18ea:	8b e2       	ldi	r24, 0x2B	; 43
    18ec:	27 fd       	sbrc	r18, 7
    18ee:	8d e2       	ldi	r24, 0x2D	; 45
    18f0:	b7 01       	movw	r22, r14
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	fe d1       	rcall	.+1020   	; 0x1cf2 <fputc>
    18f6:	a5 14       	cp	r10, r5
    18f8:	30 f4       	brcc	.+12     	; 0x1906 <vfprintf+0x378>
    18fa:	b7 01       	movw	r22, r14
    18fc:	80 e3       	ldi	r24, 0x30	; 48
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	f8 d1       	rcall	.+1008   	; 0x1cf2 <fputc>
    1902:	5a 94       	dec	r5
    1904:	f8 cf       	rjmp	.-16     	; 0x18f6 <vfprintf+0x368>
    1906:	aa 94       	dec	r10
    1908:	f4 01       	movw	r30, r8
    190a:	ea 0d       	add	r30, r10
    190c:	f1 1d       	adc	r31, r1
    190e:	80 81       	ld	r24, Z
    1910:	b7 01       	movw	r22, r14
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	ee d1       	rcall	.+988    	; 0x1cf2 <fputc>
    1916:	a1 10       	cpse	r10, r1
    1918:	f6 cf       	rjmp	.-20     	; 0x1906 <vfprintf+0x378>
    191a:	33 20       	and	r3, r3
    191c:	09 f4       	brne	.+2      	; 0x1920 <vfprintf+0x392>
    191e:	5d ce       	rjmp	.-838    	; 0x15da <vfprintf+0x4c>
    1920:	b7 01       	movw	r22, r14
    1922:	80 e2       	ldi	r24, 0x20	; 32
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	e5 d1       	rcall	.+970    	; 0x1cf2 <fputc>
    1928:	3a 94       	dec	r3
    192a:	f7 cf       	rjmp	.-18     	; 0x191a <vfprintf+0x38c>
    192c:	f7 01       	movw	r30, r14
    192e:	86 81       	ldd	r24, Z+6	; 0x06
    1930:	97 81       	ldd	r25, Z+7	; 0x07
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <vfprintf+0x3aa>
    1934:	8f ef       	ldi	r24, 0xFF	; 255
    1936:	9f ef       	ldi	r25, 0xFF	; 255
    1938:	2c 96       	adiw	r28, 0x0c	; 12
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	1f 91       	pop	r17
    194a:	0f 91       	pop	r16
    194c:	ff 90       	pop	r15
    194e:	ef 90       	pop	r14
    1950:	df 90       	pop	r13
    1952:	cf 90       	pop	r12
    1954:	bf 90       	pop	r11
    1956:	af 90       	pop	r10
    1958:	9f 90       	pop	r9
    195a:	8f 90       	pop	r8
    195c:	7f 90       	pop	r7
    195e:	6f 90       	pop	r6
    1960:	5f 90       	pop	r5
    1962:	4f 90       	pop	r4
    1964:	3f 90       	pop	r3
    1966:	2f 90       	pop	r2
    1968:	08 95       	ret

0000196a <__eerd_block_m128>:
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22

0000196e <__eerd_blraw_m128>:
    196e:	fc 01       	movw	r30, r24
    1970:	e1 99       	sbic	0x1c, 1	; 28
    1972:	fe cf       	rjmp	.-4      	; 0x1970 <__eerd_blraw_m128+0x2>
    1974:	06 c0       	rjmp	.+12     	; 0x1982 <__eerd_blraw_m128+0x14>
    1976:	ff bb       	out	0x1f, r31	; 31
    1978:	ee bb       	out	0x1e, r30	; 30
    197a:	e0 9a       	sbi	0x1c, 0	; 28
    197c:	31 96       	adiw	r30, 0x01	; 1
    197e:	0d b2       	in	r0, 0x1d	; 29
    1980:	0d 92       	st	X+, r0
    1982:	41 50       	subi	r20, 0x01	; 1
    1984:	50 40       	sbci	r21, 0x00	; 0
    1986:	b8 f7       	brcc	.-18     	; 0x1976 <__eerd_blraw_m128+0x8>
    1988:	08 95       	ret

0000198a <__eewr_block_m128>:
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <__eewr_block_m128+0xa>
    1990:	2d 91       	ld	r18, X+
    1992:	05 d0       	rcall	.+10     	; 0x199e <__eewr_r18_m128>
    1994:	41 50       	subi	r20, 0x01	; 1
    1996:	50 40       	sbci	r21, 0x00	; 0
    1998:	d8 f7       	brcc	.-10     	; 0x1990 <__eewr_block_m128+0x6>
    199a:	08 95       	ret

0000199c <__eewr_byte_m128>:
    199c:	26 2f       	mov	r18, r22

0000199e <__eewr_r18_m128>:
    199e:	e1 99       	sbic	0x1c, 1	; 28
    19a0:	fe cf       	rjmp	.-4      	; 0x199e <__eewr_r18_m128>
    19a2:	9f bb       	out	0x1f, r25	; 31
    19a4:	8e bb       	out	0x1e, r24	; 30
    19a6:	2d bb       	out	0x1d, r18	; 29
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	e2 9a       	sbi	0x1c, 2	; 28
    19ae:	e1 9a       	sbi	0x1c, 1	; 28
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	01 96       	adiw	r24, 0x01	; 1
    19b4:	08 95       	ret

000019b6 <strtod>:
    19b6:	8f 92       	push	r8
    19b8:	9f 92       	push	r9
    19ba:	af 92       	push	r10
    19bc:	bf 92       	push	r11
    19be:	cf 92       	push	r12
    19c0:	df 92       	push	r13
    19c2:	ef 92       	push	r14
    19c4:	ff 92       	push	r15
    19c6:	0f 93       	push	r16
    19c8:	1f 93       	push	r17
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	8b 01       	movw	r16, r22
    19d0:	61 15       	cp	r22, r1
    19d2:	71 05       	cpc	r23, r1
    19d4:	21 f0       	breq	.+8      	; 0x19de <strtod+0x28>
    19d6:	db 01       	movw	r26, r22
    19d8:	8c 93       	st	X, r24
    19da:	11 96       	adiw	r26, 0x01	; 1
    19dc:	9c 93       	st	X, r25
    19de:	ec 01       	movw	r28, r24
    19e0:	5e 01       	movw	r10, r28
    19e2:	bf ef       	ldi	r27, 0xFF	; 255
    19e4:	ab 1a       	sub	r10, r27
    19e6:	bb 0a       	sbc	r11, r27
    19e8:	75 01       	movw	r14, r10
    19ea:	c8 80       	ld	r12, Y
    19ec:	8c 2d       	mov	r24, r12
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	4a d1       	rcall	.+660    	; 0x1c86 <isspace>
    19f2:	89 2b       	or	r24, r25
    19f4:	11 f0       	breq	.+4      	; 0x19fa <strtod+0x44>
    19f6:	e5 01       	movw	r28, r10
    19f8:	f3 cf       	rjmp	.-26     	; 0x19e0 <strtod+0x2a>
    19fa:	ed e2       	ldi	r30, 0x2D	; 45
    19fc:	ce 12       	cpse	r12, r30
    19fe:	08 c0       	rjmp	.+16     	; 0x1a10 <strtod+0x5a>
    1a00:	7e 01       	movw	r14, r28
    1a02:	f2 e0       	ldi	r31, 0x02	; 2
    1a04:	ef 0e       	add	r14, r31
    1a06:	f1 1c       	adc	r15, r1
    1a08:	c9 80       	ldd	r12, Y+1	; 0x01
    1a0a:	dd 24       	eor	r13, r13
    1a0c:	d3 94       	inc	r13
    1a0e:	09 c0       	rjmp	.+18     	; 0x1a22 <strtod+0x6c>
    1a10:	2b e2       	ldi	r18, 0x2B	; 43
    1a12:	c2 12       	cpse	r12, r18
    1a14:	05 c0       	rjmp	.+10     	; 0x1a20 <strtod+0x6a>
    1a16:	7e 01       	movw	r14, r28
    1a18:	42 e0       	ldi	r20, 0x02	; 2
    1a1a:	e4 0e       	add	r14, r20
    1a1c:	f1 1c       	adc	r15, r1
    1a1e:	c9 80       	ldd	r12, Y+1	; 0x01
    1a20:	d1 2c       	mov	r13, r1
    1a22:	e7 01       	movw	r28, r14
    1a24:	21 97       	sbiw	r28, 0x01	; 1
    1a26:	43 e0       	ldi	r20, 0x03	; 3
    1a28:	50 e0       	ldi	r21, 0x00	; 0
    1a2a:	64 e9       	ldi	r22, 0x94	; 148
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	ce 01       	movw	r24, r28
    1a30:	32 d1       	rcall	.+612    	; 0x1c96 <strncasecmp_P>
    1a32:	89 2b       	or	r24, r25
    1a34:	b9 f4       	brne	.+46     	; 0x1a64 <strtod+0xae>
    1a36:	23 96       	adiw	r28, 0x03	; 3
    1a38:	45 e0       	ldi	r20, 0x05	; 5
    1a3a:	50 e0       	ldi	r21, 0x00	; 0
    1a3c:	6f e8       	ldi	r22, 0x8F	; 143
    1a3e:	70 e0       	ldi	r23, 0x00	; 0
    1a40:	ce 01       	movw	r24, r28
    1a42:	29 d1       	rcall	.+594    	; 0x1c96 <strncasecmp_P>
    1a44:	89 2b       	or	r24, r25
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <strtod+0x94>
    1a48:	25 96       	adiw	r28, 0x05	; 5
    1a4a:	01 15       	cp	r16, r1
    1a4c:	11 05       	cpc	r17, r1
    1a4e:	19 f0       	breq	.+6      	; 0x1a56 <strtod+0xa0>
    1a50:	d8 01       	movw	r26, r16
    1a52:	cd 93       	st	X+, r28
    1a54:	dc 93       	st	X, r29
    1a56:	d1 10       	cpse	r13, r1
    1a58:	00 c1       	rjmp	.+512    	; 0x1c5a <strtod+0x2a4>
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	80 e8       	ldi	r24, 0x80	; 128
    1a60:	9f e7       	ldi	r25, 0x7F	; 127
    1a62:	04 c1       	rjmp	.+520    	; 0x1c6c <strtod+0x2b6>
    1a64:	43 e0       	ldi	r20, 0x03	; 3
    1a66:	50 e0       	ldi	r21, 0x00	; 0
    1a68:	6c e8       	ldi	r22, 0x8C	; 140
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	13 d1       	rcall	.+550    	; 0x1c96 <strncasecmp_P>
    1a70:	89 2b       	or	r24, r25
    1a72:	59 f4       	brne	.+22     	; 0x1a8a <strtod+0xd4>
    1a74:	01 15       	cp	r16, r1
    1a76:	11 05       	cpc	r17, r1
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <strtod+0xc6>
    1a7a:	f4 c0       	rjmp	.+488    	; 0x1c64 <strtod+0x2ae>
    1a7c:	b2 e0       	ldi	r27, 0x02	; 2
    1a7e:	eb 0e       	add	r14, r27
    1a80:	f1 1c       	adc	r15, r1
    1a82:	f8 01       	movw	r30, r16
    1a84:	f1 82       	std	Z+1, r15	; 0x01
    1a86:	e0 82       	st	Z, r14
    1a88:	ed c0       	rjmp	.+474    	; 0x1c64 <strtod+0x2ae>
    1a8a:	f7 01       	movw	r30, r14
    1a8c:	60 e0       	ldi	r22, 0x00	; 0
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	cb 01       	movw	r24, r22
    1a92:	c0 e0       	ldi	r28, 0x00	; 0
    1a94:	d0 e0       	ldi	r29, 0x00	; 0
    1a96:	7f 01       	movw	r14, r30
    1a98:	a0 ed       	ldi	r26, 0xD0	; 208
    1a9a:	aa 2e       	mov	r10, r26
    1a9c:	ac 0c       	add	r10, r12
    1a9e:	29 e0       	ldi	r18, 0x09	; 9
    1aa0:	2a 15       	cp	r18, r10
    1aa2:	28 f1       	brcs	.+74     	; 0x1aee <strtod+0x138>
    1aa4:	4d 2d       	mov	r20, r13
    1aa6:	42 60       	ori	r20, 0x02	; 2
    1aa8:	b4 2e       	mov	r11, r20
    1aaa:	2d 2d       	mov	r18, r13
    1aac:	28 70       	andi	r18, 0x08	; 8
    1aae:	d2 fe       	sbrs	r13, 2
    1ab0:	04 c0       	rjmp	.+8      	; 0x1aba <strtod+0x104>
    1ab2:	21 11       	cpse	r18, r1
    1ab4:	24 c0       	rjmp	.+72     	; 0x1afe <strtod+0x148>
    1ab6:	21 96       	adiw	r28, 0x01	; 1
    1ab8:	22 c0       	rjmp	.+68     	; 0x1afe <strtod+0x148>
    1aba:	21 11       	cpse	r18, r1
    1abc:	21 97       	sbiw	r28, 0x01	; 1
    1abe:	a5 e0       	ldi	r26, 0x05	; 5
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	9b 01       	movw	r18, r22
    1ac4:	ac 01       	movw	r20, r24
    1ac6:	e9 dc       	rcall	.-1582   	; 0x149a <__muluhisi3>
    1ac8:	66 0f       	add	r22, r22
    1aca:	77 1f       	adc	r23, r23
    1acc:	88 1f       	adc	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	6a 0d       	add	r22, r10
    1ad2:	71 1d       	adc	r23, r1
    1ad4:	81 1d       	adc	r24, r1
    1ad6:	91 1d       	adc	r25, r1
    1ad8:	68 39       	cpi	r22, 0x98	; 152
    1ada:	a9 e9       	ldi	r26, 0x99	; 153
    1adc:	7a 07       	cpc	r23, r26
    1ade:	8a 07       	cpc	r24, r26
    1ae0:	a9 e1       	ldi	r26, 0x19	; 25
    1ae2:	9a 07       	cpc	r25, r26
    1ae4:	60 f0       	brcs	.+24     	; 0x1afe <strtod+0x148>
    1ae6:	bd 2d       	mov	r27, r13
    1ae8:	b6 60       	ori	r27, 0x06	; 6
    1aea:	bb 2e       	mov	r11, r27
    1aec:	08 c0       	rjmp	.+16     	; 0x1afe <strtod+0x148>
    1aee:	2e ef       	ldi	r18, 0xFE	; 254
    1af0:	a2 12       	cpse	r10, r18
    1af2:	0a c0       	rjmp	.+20     	; 0x1b08 <strtod+0x152>
    1af4:	d3 fc       	sbrc	r13, 3
    1af6:	50 c0       	rjmp	.+160    	; 0x1b98 <strtod+0x1e2>
    1af8:	4d 2d       	mov	r20, r13
    1afa:	48 60       	ori	r20, 0x08	; 8
    1afc:	b4 2e       	mov	r11, r20
    1afe:	31 96       	adiw	r30, 0x01	; 1
    1b00:	d7 01       	movw	r26, r14
    1b02:	cc 90       	ld	r12, X
    1b04:	db 2c       	mov	r13, r11
    1b06:	c7 cf       	rjmp	.-114    	; 0x1a96 <strtod+0xe0>
    1b08:	2c 2d       	mov	r18, r12
    1b0a:	2f 7d       	andi	r18, 0xDF	; 223
    1b0c:	25 34       	cpi	r18, 0x45	; 69
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <strtod+0x15c>
    1b10:	43 c0       	rjmp	.+134    	; 0x1b98 <strtod+0x1e2>
    1b12:	a0 81       	ld	r26, Z
    1b14:	ad 32       	cpi	r26, 0x2D	; 45
    1b16:	41 f4       	brne	.+16     	; 0x1b28 <strtod+0x172>
    1b18:	bd 2d       	mov	r27, r13
    1b1a:	b0 61       	ori	r27, 0x10	; 16
    1b1c:	db 2e       	mov	r13, r27
    1b1e:	7f 01       	movw	r14, r30
    1b20:	22 e0       	ldi	r18, 0x02	; 2
    1b22:	e2 0e       	add	r14, r18
    1b24:	f1 1c       	adc	r15, r1
    1b26:	0c c0       	rjmp	.+24     	; 0x1b40 <strtod+0x18a>
    1b28:	7f 01       	movw	r14, r30
    1b2a:	ab 32       	cpi	r26, 0x2B	; 43
    1b2c:	31 f0       	breq	.+12     	; 0x1b3a <strtod+0x184>
    1b2e:	4f ef       	ldi	r20, 0xFF	; 255
    1b30:	e4 1a       	sub	r14, r20
    1b32:	f4 0a       	sbc	r15, r20
    1b34:	21 e0       	ldi	r18, 0x01	; 1
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	06 c0       	rjmp	.+12     	; 0x1b46 <strtod+0x190>
    1b3a:	a2 e0       	ldi	r26, 0x02	; 2
    1b3c:	ea 0e       	add	r14, r26
    1b3e:	f1 1c       	adc	r15, r1
    1b40:	a1 81       	ldd	r26, Z+1	; 0x01
    1b42:	22 e0       	ldi	r18, 0x02	; 2
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	a0 53       	subi	r26, 0x30	; 48
    1b48:	aa 30       	cpi	r26, 0x0A	; 10
    1b4a:	18 f0       	brcs	.+6      	; 0x1b52 <strtod+0x19c>
    1b4c:	e2 1a       	sub	r14, r18
    1b4e:	f3 0a       	sbc	r15, r19
    1b50:	23 c0       	rjmp	.+70     	; 0x1b98 <strtod+0x1e2>
    1b52:	f7 01       	movw	r30, r14
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	20 38       	cpi	r18, 0x80	; 128
    1b5a:	bc e0       	ldi	r27, 0x0C	; 12
    1b5c:	3b 07       	cpc	r19, r27
    1b5e:	5c f4       	brge	.+22     	; 0x1b76 <strtod+0x1c0>
    1b60:	a9 01       	movw	r20, r18
    1b62:	44 0f       	add	r20, r20
    1b64:	55 1f       	adc	r21, r21
    1b66:	44 0f       	add	r20, r20
    1b68:	55 1f       	adc	r21, r21
    1b6a:	24 0f       	add	r18, r20
    1b6c:	35 1f       	adc	r19, r21
    1b6e:	22 0f       	add	r18, r18
    1b70:	33 1f       	adc	r19, r19
    1b72:	2a 0f       	add	r18, r26
    1b74:	31 1d       	adc	r19, r1
    1b76:	af 01       	movw	r20, r30
    1b78:	4f 5f       	subi	r20, 0xFF	; 255
    1b7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b7c:	7a 01       	movw	r14, r20
    1b7e:	a0 81       	ld	r26, Z
    1b80:	a0 53       	subi	r26, 0x30	; 48
    1b82:	aa 30       	cpi	r26, 0x0A	; 10
    1b84:	10 f4       	brcc	.+4      	; 0x1b8a <strtod+0x1d4>
    1b86:	fa 01       	movw	r30, r20
    1b88:	e7 cf       	rjmp	.-50     	; 0x1b58 <strtod+0x1a2>
    1b8a:	d4 fe       	sbrs	r13, 4
    1b8c:	03 c0       	rjmp	.+6      	; 0x1b94 <strtod+0x1de>
    1b8e:	31 95       	neg	r19
    1b90:	21 95       	neg	r18
    1b92:	31 09       	sbc	r19, r1
    1b94:	c2 0f       	add	r28, r18
    1b96:	d3 1f       	adc	r29, r19
    1b98:	d1 fe       	sbrs	r13, 1
    1b9a:	09 c0       	rjmp	.+18     	; 0x1bae <strtod+0x1f8>
    1b9c:	01 15       	cp	r16, r1
    1b9e:	11 05       	cpc	r17, r1
    1ba0:	31 f0       	breq	.+12     	; 0x1bae <strtod+0x1f8>
    1ba2:	e1 e0       	ldi	r30, 0x01	; 1
    1ba4:	ee 1a       	sub	r14, r30
    1ba6:	f1 08       	sbc	r15, r1
    1ba8:	d8 01       	movw	r26, r16
    1baa:	ed 92       	st	X+, r14
    1bac:	fc 92       	st	X, r15
    1bae:	39 db       	rcall	.-2446   	; 0x1222 <__floatunsisf>
    1bb0:	2d 2d       	mov	r18, r13
    1bb2:	23 70       	andi	r18, 0x03	; 3
    1bb4:	23 30       	cpi	r18, 0x03	; 3
    1bb6:	19 f0       	breq	.+6      	; 0x1bbe <strtod+0x208>
    1bb8:	4b 01       	movw	r8, r22
    1bba:	5c 01       	movw	r10, r24
    1bbc:	06 c0       	rjmp	.+12     	; 0x1bca <strtod+0x214>
    1bbe:	4b 01       	movw	r8, r22
    1bc0:	5c 01       	movw	r10, r24
    1bc2:	b7 fa       	bst	r11, 7
    1bc4:	b0 94       	com	r11
    1bc6:	b7 f8       	bld	r11, 7
    1bc8:	b0 94       	com	r11
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	a9 01       	movw	r20, r18
    1bd0:	c5 01       	movw	r24, r10
    1bd2:	b4 01       	movw	r22, r8
    1bd4:	f1 da       	rcall	.-2590   	; 0x11b8 <__cmpsf2>
    1bd6:	88 23       	and	r24, r24
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <strtod+0x226>
    1bda:	3c c0       	rjmp	.+120    	; 0x1c54 <strtod+0x29e>
    1bdc:	d7 ff       	sbrs	r29, 7
    1bde:	06 c0       	rjmp	.+12     	; 0x1bec <strtod+0x236>
    1be0:	d1 95       	neg	r29
    1be2:	c1 95       	neg	r28
    1be4:	d1 09       	sbc	r29, r1
    1be6:	0b ea       	ldi	r16, 0xAB	; 171
    1be8:	10 e0       	ldi	r17, 0x00	; 0
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <strtod+0x23a>
    1bec:	03 ec       	ldi	r16, 0xC3	; 195
    1bee:	10 e0       	ldi	r17, 0x00	; 0
    1bf0:	68 01       	movw	r12, r16
    1bf2:	b8 e1       	ldi	r27, 0x18	; 24
    1bf4:	cb 1a       	sub	r12, r27
    1bf6:	d1 08       	sbc	r13, r1
    1bf8:	90 e2       	ldi	r25, 0x20	; 32
    1bfa:	e9 2e       	mov	r14, r25
    1bfc:	f1 2c       	mov	r15, r1
    1bfe:	ce 15       	cp	r28, r14
    1c00:	df 05       	cpc	r29, r15
    1c02:	6c f0       	brlt	.+26     	; 0x1c1e <strtod+0x268>
    1c04:	f8 01       	movw	r30, r16
    1c06:	25 91       	lpm	r18, Z+
    1c08:	35 91       	lpm	r19, Z+
    1c0a:	45 91       	lpm	r20, Z+
    1c0c:	54 91       	lpm	r21, Z
    1c0e:	c5 01       	movw	r24, r10
    1c10:	b4 01       	movw	r22, r8
    1c12:	bd db       	rcall	.-2182   	; 0x138e <__mulsf3>
    1c14:	4b 01       	movw	r8, r22
    1c16:	5c 01       	movw	r10, r24
    1c18:	ce 19       	sub	r28, r14
    1c1a:	df 09       	sbc	r29, r15
    1c1c:	f0 cf       	rjmp	.-32     	; 0x1bfe <strtod+0x248>
    1c1e:	04 50       	subi	r16, 0x04	; 4
    1c20:	11 09       	sbc	r17, r1
    1c22:	f5 94       	asr	r15
    1c24:	e7 94       	ror	r14
    1c26:	0c 15       	cp	r16, r12
    1c28:	1d 05       	cpc	r17, r13
    1c2a:	49 f7       	brne	.-46     	; 0x1bfe <strtod+0x248>
    1c2c:	8a 2d       	mov	r24, r10
    1c2e:	88 0f       	add	r24, r24
    1c30:	8b 2d       	mov	r24, r11
    1c32:	88 1f       	adc	r24, r24
    1c34:	8f 3f       	cpi	r24, 0xFF	; 255
    1c36:	41 f0       	breq	.+16     	; 0x1c48 <strtod+0x292>
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	a9 01       	movw	r20, r18
    1c3e:	c5 01       	movw	r24, r10
    1c40:	b4 01       	movw	r22, r8
    1c42:	ba da       	rcall	.-2700   	; 0x11b8 <__cmpsf2>
    1c44:	81 11       	cpse	r24, r1
    1c46:	06 c0       	rjmp	.+12     	; 0x1c54 <strtod+0x29e>
    1c48:	82 e2       	ldi	r24, 0x22	; 34
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	90 93 fe 02 	sts	0x02FE, r25
    1c50:	80 93 fd 02 	sts	0x02FD, r24
    1c54:	c5 01       	movw	r24, r10
    1c56:	b4 01       	movw	r22, r8
    1c58:	09 c0       	rjmp	.+18     	; 0x1c6c <strtod+0x2b6>
    1c5a:	60 e0       	ldi	r22, 0x00	; 0
    1c5c:	70 e0       	ldi	r23, 0x00	; 0
    1c5e:	80 e8       	ldi	r24, 0x80	; 128
    1c60:	9f ef       	ldi	r25, 0xFF	; 255
    1c62:	04 c0       	rjmp	.+8      	; 0x1c6c <strtod+0x2b6>
    1c64:	60 e0       	ldi	r22, 0x00	; 0
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	80 ec       	ldi	r24, 0xC0	; 192
    1c6a:	9f e7       	ldi	r25, 0x7F	; 127
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	1f 91       	pop	r17
    1c72:	0f 91       	pop	r16
    1c74:	ff 90       	pop	r15
    1c76:	ef 90       	pop	r14
    1c78:	df 90       	pop	r13
    1c7a:	cf 90       	pop	r12
    1c7c:	bf 90       	pop	r11
    1c7e:	af 90       	pop	r10
    1c80:	9f 90       	pop	r9
    1c82:	8f 90       	pop	r8
    1c84:	08 95       	ret

00001c86 <isspace>:
    1c86:	91 11       	cpse	r25, r1
    1c88:	c4 c0       	rjmp	.+392    	; 0x1e12 <__ctype_isfalse>
    1c8a:	80 32       	cpi	r24, 0x20	; 32
    1c8c:	19 f0       	breq	.+6      	; 0x1c94 <isspace+0xe>
    1c8e:	89 50       	subi	r24, 0x09	; 9
    1c90:	85 50       	subi	r24, 0x05	; 5
    1c92:	d0 f7       	brcc	.-12     	; 0x1c88 <isspace+0x2>
    1c94:	08 95       	ret

00001c96 <strncasecmp_P>:
    1c96:	fb 01       	movw	r30, r22
    1c98:	dc 01       	movw	r26, r24
    1c9a:	41 50       	subi	r20, 0x01	; 1
    1c9c:	50 40       	sbci	r21, 0x00	; 0
    1c9e:	88 f0       	brcs	.+34     	; 0x1cc2 <strncasecmp_P+0x2c>
    1ca0:	8d 91       	ld	r24, X+
    1ca2:	81 34       	cpi	r24, 0x41	; 65
    1ca4:	1c f0       	brlt	.+6      	; 0x1cac <strncasecmp_P+0x16>
    1ca6:	8b 35       	cpi	r24, 0x5B	; 91
    1ca8:	0c f4       	brge	.+2      	; 0x1cac <strncasecmp_P+0x16>
    1caa:	80 5e       	subi	r24, 0xE0	; 224
    1cac:	65 91       	lpm	r22, Z+
    1cae:	61 34       	cpi	r22, 0x41	; 65
    1cb0:	1c f0       	brlt	.+6      	; 0x1cb8 <strncasecmp_P+0x22>
    1cb2:	6b 35       	cpi	r22, 0x5B	; 91
    1cb4:	0c f4       	brge	.+2      	; 0x1cb8 <strncasecmp_P+0x22>
    1cb6:	60 5e       	subi	r22, 0xE0	; 224
    1cb8:	86 1b       	sub	r24, r22
    1cba:	61 11       	cpse	r22, r1
    1cbc:	71 f3       	breq	.-36     	; 0x1c9a <strncasecmp_P+0x4>
    1cbe:	99 0b       	sbc	r25, r25
    1cc0:	08 95       	ret
    1cc2:	88 1b       	sub	r24, r24
    1cc4:	fc cf       	rjmp	.-8      	; 0x1cbe <strncasecmp_P+0x28>

00001cc6 <strnlen_P>:
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	05 90       	lpm	r0, Z+
    1cca:	61 50       	subi	r22, 0x01	; 1
    1ccc:	70 40       	sbci	r23, 0x00	; 0
    1cce:	01 10       	cpse	r0, r1
    1cd0:	d8 f7       	brcc	.-10     	; 0x1cc8 <strnlen_P+0x2>
    1cd2:	80 95       	com	r24
    1cd4:	90 95       	com	r25
    1cd6:	8e 0f       	add	r24, r30
    1cd8:	9f 1f       	adc	r25, r31
    1cda:	08 95       	ret

00001cdc <strnlen>:
    1cdc:	fc 01       	movw	r30, r24
    1cde:	61 50       	subi	r22, 0x01	; 1
    1ce0:	70 40       	sbci	r23, 0x00	; 0
    1ce2:	01 90       	ld	r0, Z+
    1ce4:	01 10       	cpse	r0, r1
    1ce6:	d8 f7       	brcc	.-10     	; 0x1cde <strnlen+0x2>
    1ce8:	80 95       	com	r24
    1cea:	90 95       	com	r25
    1cec:	8e 0f       	add	r24, r30
    1cee:	9f 1f       	adc	r25, r31
    1cf0:	08 95       	ret

00001cf2 <fputc>:
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	18 2f       	mov	r17, r24
    1cfc:	09 2f       	mov	r16, r25
    1cfe:	eb 01       	movw	r28, r22
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	81 fd       	sbrc	r24, 1
    1d04:	03 c0       	rjmp	.+6      	; 0x1d0c <fputc+0x1a>
    1d06:	8f ef       	ldi	r24, 0xFF	; 255
    1d08:	9f ef       	ldi	r25, 0xFF	; 255
    1d0a:	20 c0       	rjmp	.+64     	; 0x1d4c <fputc+0x5a>
    1d0c:	82 ff       	sbrs	r24, 2
    1d0e:	10 c0       	rjmp	.+32     	; 0x1d30 <fputc+0x3e>
    1d10:	4e 81       	ldd	r20, Y+6	; 0x06
    1d12:	5f 81       	ldd	r21, Y+7	; 0x07
    1d14:	2c 81       	ldd	r18, Y+4	; 0x04
    1d16:	3d 81       	ldd	r19, Y+5	; 0x05
    1d18:	42 17       	cp	r20, r18
    1d1a:	53 07       	cpc	r21, r19
    1d1c:	7c f4       	brge	.+30     	; 0x1d3c <fputc+0x4a>
    1d1e:	e8 81       	ld	r30, Y
    1d20:	f9 81       	ldd	r31, Y+1	; 0x01
    1d22:	9f 01       	movw	r18, r30
    1d24:	2f 5f       	subi	r18, 0xFF	; 255
    1d26:	3f 4f       	sbci	r19, 0xFF	; 255
    1d28:	39 83       	std	Y+1, r19	; 0x01
    1d2a:	28 83       	st	Y, r18
    1d2c:	10 83       	st	Z, r17
    1d2e:	06 c0       	rjmp	.+12     	; 0x1d3c <fputc+0x4a>
    1d30:	e8 85       	ldd	r30, Y+8	; 0x08
    1d32:	f9 85       	ldd	r31, Y+9	; 0x09
    1d34:	81 2f       	mov	r24, r17
    1d36:	09 95       	icall
    1d38:	89 2b       	or	r24, r25
    1d3a:	29 f7       	brne	.-54     	; 0x1d06 <fputc+0x14>
    1d3c:	2e 81       	ldd	r18, Y+6	; 0x06
    1d3e:	3f 81       	ldd	r19, Y+7	; 0x07
    1d40:	2f 5f       	subi	r18, 0xFF	; 255
    1d42:	3f 4f       	sbci	r19, 0xFF	; 255
    1d44:	3f 83       	std	Y+7, r19	; 0x07
    1d46:	2e 83       	std	Y+6, r18	; 0x06
    1d48:	81 2f       	mov	r24, r17
    1d4a:	90 2f       	mov	r25, r16
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	08 95       	ret

00001d56 <__ultoa_invert>:
    1d56:	fa 01       	movw	r30, r20
    1d58:	aa 27       	eor	r26, r26
    1d5a:	28 30       	cpi	r18, 0x08	; 8
    1d5c:	51 f1       	breq	.+84     	; 0x1db2 <__ultoa_invert+0x5c>
    1d5e:	20 31       	cpi	r18, 0x10	; 16
    1d60:	81 f1       	breq	.+96     	; 0x1dc2 <__ultoa_invert+0x6c>
    1d62:	e8 94       	clt
    1d64:	6f 93       	push	r22
    1d66:	6e 7f       	andi	r22, 0xFE	; 254
    1d68:	6e 5f       	subi	r22, 0xFE	; 254
    1d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	af 4f       	sbci	r26, 0xFF	; 255
    1d72:	b1 e0       	ldi	r27, 0x01	; 1
    1d74:	3e d0       	rcall	.+124    	; 0x1df2 <__ultoa_invert+0x9c>
    1d76:	b4 e0       	ldi	r27, 0x04	; 4
    1d78:	3c d0       	rcall	.+120    	; 0x1df2 <__ultoa_invert+0x9c>
    1d7a:	67 0f       	add	r22, r23
    1d7c:	78 1f       	adc	r23, r24
    1d7e:	89 1f       	adc	r24, r25
    1d80:	9a 1f       	adc	r25, r26
    1d82:	a1 1d       	adc	r26, r1
    1d84:	68 0f       	add	r22, r24
    1d86:	79 1f       	adc	r23, r25
    1d88:	8a 1f       	adc	r24, r26
    1d8a:	91 1d       	adc	r25, r1
    1d8c:	a1 1d       	adc	r26, r1
    1d8e:	6a 0f       	add	r22, r26
    1d90:	71 1d       	adc	r23, r1
    1d92:	81 1d       	adc	r24, r1
    1d94:	91 1d       	adc	r25, r1
    1d96:	a1 1d       	adc	r26, r1
    1d98:	20 d0       	rcall	.+64     	; 0x1dda <__ultoa_invert+0x84>
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <__ultoa_invert+0x48>
    1d9c:	68 94       	set
    1d9e:	3f 91       	pop	r19
    1da0:	2a e0       	ldi	r18, 0x0A	; 10
    1da2:	26 9f       	mul	r18, r22
    1da4:	11 24       	eor	r1, r1
    1da6:	30 19       	sub	r19, r0
    1da8:	30 5d       	subi	r19, 0xD0	; 208
    1daa:	31 93       	st	Z+, r19
    1dac:	de f6       	brtc	.-74     	; 0x1d64 <__ultoa_invert+0xe>
    1dae:	cf 01       	movw	r24, r30
    1db0:	08 95       	ret
    1db2:	46 2f       	mov	r20, r22
    1db4:	47 70       	andi	r20, 0x07	; 7
    1db6:	40 5d       	subi	r20, 0xD0	; 208
    1db8:	41 93       	st	Z+, r20
    1dba:	b3 e0       	ldi	r27, 0x03	; 3
    1dbc:	0f d0       	rcall	.+30     	; 0x1ddc <__ultoa_invert+0x86>
    1dbe:	c9 f7       	brne	.-14     	; 0x1db2 <__ultoa_invert+0x5c>
    1dc0:	f6 cf       	rjmp	.-20     	; 0x1dae <__ultoa_invert+0x58>
    1dc2:	46 2f       	mov	r20, r22
    1dc4:	4f 70       	andi	r20, 0x0F	; 15
    1dc6:	40 5d       	subi	r20, 0xD0	; 208
    1dc8:	4a 33       	cpi	r20, 0x3A	; 58
    1dca:	18 f0       	brcs	.+6      	; 0x1dd2 <__ultoa_invert+0x7c>
    1dcc:	49 5d       	subi	r20, 0xD9	; 217
    1dce:	31 fd       	sbrc	r19, 1
    1dd0:	40 52       	subi	r20, 0x20	; 32
    1dd2:	41 93       	st	Z+, r20
    1dd4:	02 d0       	rcall	.+4      	; 0x1dda <__ultoa_invert+0x84>
    1dd6:	a9 f7       	brne	.-22     	; 0x1dc2 <__ultoa_invert+0x6c>
    1dd8:	ea cf       	rjmp	.-44     	; 0x1dae <__ultoa_invert+0x58>
    1dda:	b4 e0       	ldi	r27, 0x04	; 4
    1ddc:	a6 95       	lsr	r26
    1dde:	97 95       	ror	r25
    1de0:	87 95       	ror	r24
    1de2:	77 95       	ror	r23
    1de4:	67 95       	ror	r22
    1de6:	ba 95       	dec	r27
    1de8:	c9 f7       	brne	.-14     	; 0x1ddc <__ultoa_invert+0x86>
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	61 05       	cpc	r22, r1
    1dee:	71 05       	cpc	r23, r1
    1df0:	08 95       	ret
    1df2:	9b 01       	movw	r18, r22
    1df4:	ac 01       	movw	r20, r24
    1df6:	0a 2e       	mov	r0, r26
    1df8:	06 94       	lsr	r0
    1dfa:	57 95       	ror	r21
    1dfc:	47 95       	ror	r20
    1dfe:	37 95       	ror	r19
    1e00:	27 95       	ror	r18
    1e02:	ba 95       	dec	r27
    1e04:	c9 f7       	brne	.-14     	; 0x1df8 <__ultoa_invert+0xa2>
    1e06:	62 0f       	add	r22, r18
    1e08:	73 1f       	adc	r23, r19
    1e0a:	84 1f       	adc	r24, r20
    1e0c:	95 1f       	adc	r25, r21
    1e0e:	a0 1d       	adc	r26, r0
    1e10:	08 95       	ret

00001e12 <__ctype_isfalse>:
    1e12:	99 27       	eor	r25, r25
    1e14:	88 27       	eor	r24, r24

00001e16 <__ctype_istrue>:
    1e16:	08 95       	ret

00001e18 <_exit>:
    1e18:	f8 94       	cli

00001e1a <__stop_program>:
    1e1a:	ff cf       	rjmp	.-2      	; 0x1e1a <__stop_program>
