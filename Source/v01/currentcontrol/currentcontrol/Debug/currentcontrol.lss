
currentcontrol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000015ee  000016a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015ee  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b1  00800120  00800120  000016c2  2**0
                  ALLOC
  3 .eeprom       00000021  00810000  00810000  000016c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000016e3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  0000173f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015c7  00000000  00000000  000019ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ed  00000000  00000000  00002fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000107c  00000000  00000000  000036a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000818  00000000  00000000  00004720  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008fa  00000000  00000000  00004f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001285  00000000  00000000  00005832  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  00006ab7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	06 c3       	rjmp	.+1548   	; 0x612 <__vector_1>
       6:	00 00       	nop
       8:	0e c3       	rjmp	.+1564   	; 0x626 <__vector_2>
       a:	00 00       	nop
       c:	16 c3       	rjmp	.+1580   	; 0x63a <__vector_3>
       e:	00 00       	nop
      10:	1e c3       	rjmp	.+1596   	; 0x64e <__vector_4>
      12:	00 00       	nop
      14:	26 c3       	rjmp	.+1612   	; 0x662 <__vector_5>
      16:	00 00       	nop
      18:	2e c3       	rjmp	.+1628   	; 0x676 <__vector_6>
      1a:	00 00       	nop
      1c:	36 c3       	rjmp	.+1644   	; 0x68a <__vector_7>
      1e:	00 00       	nop
      20:	3e c3       	rjmp	.+1660   	; 0x69e <__vector_8>
      22:	00 00       	nop
      24:	46 c3       	rjmp	.+1676   	; 0x6b2 <__vector_9>
      26:	00 00       	nop
      28:	4e c3       	rjmp	.+1692   	; 0x6c6 <__vector_10>
      2a:	00 00       	nop
      2c:	56 c3       	rjmp	.+1708   	; 0x6da <__vector_11>
      2e:	00 00       	nop
      30:	5e c3       	rjmp	.+1724   	; 0x6ee <__vector_12>
      32:	00 00       	nop
      34:	66 c3       	rjmp	.+1740   	; 0x702 <__vector_13>
      36:	00 00       	nop
      38:	6e c3       	rjmp	.+1756   	; 0x716 <__vector_14>
      3a:	00 00       	nop
      3c:	76 c3       	rjmp	.+1772   	; 0x72a <__vector_15>
      3e:	00 00       	nop
      40:	7e c3       	rjmp	.+1788   	; 0x73e <__vector_16>
      42:	00 00       	nop
      44:	c7 c3       	rjmp	.+1934   	; 0x7d4 <__vector_17>
      46:	00 00       	nop
      48:	cf c3       	rjmp	.+1950   	; 0x7e8 <__vector_18>
      4a:	00 00       	nop
      4c:	f5 c3       	rjmp	.+2026   	; 0x838 <__vector_19>
      4e:	00 00       	nop
      50:	fd c3       	rjmp	.+2042   	; 0x84c <__vector_20>
      52:	00 00       	nop
      54:	05 c4       	rjmp	.+2058   	; 0x860 <__vector_21>
      56:	00 00       	nop
      58:	0d c4       	rjmp	.+2074   	; 0x874 <__vector_22>
      5a:	00 00       	nop
      5c:	15 c4       	rjmp	.+2090   	; 0x888 <__vector_23>
      5e:	00 00       	nop
      60:	1d c4       	rjmp	.+2106   	; 0x89c <__vector_24>
      62:	00 00       	nop
      64:	25 c4       	rjmp	.+2122   	; 0x8b0 <__vector_25>
      66:	00 00       	nop
      68:	2d c4       	rjmp	.+2138   	; 0x8c4 <__vector_26>
      6a:	00 00       	nop
      6c:	35 c4       	rjmp	.+2154   	; 0x8d8 <__vector_27>
      6e:	00 00       	nop
      70:	3d c4       	rjmp	.+2170   	; 0x8ec <__vector_28>
      72:	00 00       	nop
      74:	45 c4       	rjmp	.+2186   	; 0x900 <__vector_29>
      76:	00 00       	nop
      78:	4d c4       	rjmp	.+2202   	; 0x914 <__vector_30>
      7a:	00 00       	nop
      7c:	90 c4       	rjmp	.+2336   	; 0x99e <__vector_31>
      7e:	00 00       	nop
      80:	98 c4       	rjmp	.+2352   	; 0x9b2 <__vector_32>
      82:	00 00       	nop
      84:	a0 c4       	rjmp	.+2368   	; 0x9c6 <__vector_33>
      86:	00 00       	nop
      88:	a8 c4       	rjmp	.+2384   	; 0x9da <__vector_34>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee ee       	ldi	r30, 0xEE	; 238
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 32       	cpi	r26, 0x20	; 32
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a0 e2       	ldi	r26, 0x20	; 32
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 3d       	cpi	r26, 0xD1	; 209
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	f9 d1       	rcall	.+1010   	; 0x4b6 <main>
      c4:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <_exit>

000000c8 <paramLoadDefaultParameters>:

//
/************************************************************************/
/* @set pid variables                                                                     */
/************************************************************************/
void setPidVariables(void){
      c8:	40 e0       	ldi	r20, 0x00	; 0
      ca:	50 e0       	ldi	r21, 0x00	; 0
      cc:	60 ec       	ldi	r22, 0xC0	; 192
      ce:	7f e3       	ldi	r23, 0x3F	; 63
      d0:	40 93 43 01 	sts	0x0143, r20
      d4:	50 93 44 01 	sts	0x0144, r21
      d8:	60 93 45 01 	sts	0x0145, r22
      dc:	70 93 46 01 	sts	0x0146, r23
      e0:	10 92 79 01 	sts	0x0179, r1
      e4:	10 92 7a 01 	sts	0x017A, r1
      e8:	10 92 7b 01 	sts	0x017B, r1
      ec:	10 92 7c 01 	sts	0x017C, r1
      f0:	8d ec       	ldi	r24, 0xCD	; 205
      f2:	9c ec       	ldi	r25, 0xCC	; 204
      f4:	ac e4       	ldi	r26, 0x4C	; 76
      f6:	be e3       	ldi	r27, 0x3E	; 62
      f8:	80 93 52 01 	sts	0x0152, r24
      fc:	90 93 53 01 	sts	0x0153, r25
     100:	a0 93 54 01 	sts	0x0154, r26
     104:	b0 93 55 01 	sts	0x0155, r27
     108:	10 92 57 01 	sts	0x0157, r1
     10c:	10 92 56 01 	sts	0x0156, r1
     110:	10 92 42 01 	sts	0x0142, r1
     114:	10 92 41 01 	sts	0x0141, r1
     118:	ee ec       	ldi	r30, 0xCE	; 206
     11a:	ff ef       	ldi	r31, 0xFF	; 255
     11c:	f0 93 51 01 	sts	0x0151, r31
     120:	e0 93 50 01 	sts	0x0150, r30
     124:	2e e6       	ldi	r18, 0x6E	; 110
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	30 93 4a 01 	sts	0x014A, r19
     12c:	20 93 49 01 	sts	0x0149, r18
     130:	40 93 43 01 	sts	0x0143, r20
     134:	50 93 44 01 	sts	0x0144, r21
     138:	60 93 45 01 	sts	0x0145, r22
     13c:	70 93 46 01 	sts	0x0146, r23
     140:	10 92 79 01 	sts	0x0179, r1
     144:	10 92 7a 01 	sts	0x017A, r1
     148:	10 92 7b 01 	sts	0x017B, r1
     14c:	10 92 7c 01 	sts	0x017C, r1
     150:	80 93 52 01 	sts	0x0152, r24
     154:	90 93 53 01 	sts	0x0153, r25
     158:	a0 93 54 01 	sts	0x0154, r26
     15c:	b0 93 55 01 	sts	0x0155, r27
     160:	10 92 57 01 	sts	0x0157, r1
     164:	10 92 56 01 	sts	0x0156, r1
     168:	10 92 42 01 	sts	0x0142, r1
     16c:	10 92 41 01 	sts	0x0141, r1
     170:	f0 93 51 01 	sts	0x0151, r31
     174:	e0 93 50 01 	sts	0x0150, r30
     178:	30 93 4a 01 	sts	0x014A, r19
     17c:	20 93 49 01 	sts	0x0149, r18
     180:	08 95       	ret

00000182 <paramSavetoEeprom>:
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	80 93 58 01 	sts	0x0158, r24
     188:	80 91 43 01 	lds	r24, 0x0143
     18c:	90 91 44 01 	lds	r25, 0x0144
     190:	a0 91 45 01 	lds	r26, 0x0145
     194:	b0 91 46 01 	lds	r27, 0x0146
     198:	80 93 61 01 	sts	0x0161, r24
     19c:	90 93 62 01 	sts	0x0162, r25
     1a0:	a0 93 63 01 	sts	0x0163, r26
     1a4:	b0 93 64 01 	sts	0x0164, r27
     1a8:	80 91 52 01 	lds	r24, 0x0152
     1ac:	90 91 53 01 	lds	r25, 0x0153
     1b0:	a0 91 54 01 	lds	r26, 0x0154
     1b4:	b0 91 55 01 	lds	r27, 0x0155
     1b8:	80 93 69 01 	sts	0x0169, r24
     1bc:	90 93 6a 01 	sts	0x016A, r25
     1c0:	a0 93 6b 01 	sts	0x016B, r26
     1c4:	b0 93 6c 01 	sts	0x016C, r27
     1c8:	80 91 79 01 	lds	r24, 0x0179
     1cc:	90 91 7a 01 	lds	r25, 0x017A
     1d0:	a0 91 7b 01 	lds	r26, 0x017B
     1d4:	b0 91 7c 01 	lds	r27, 0x017C
     1d8:	80 93 65 01 	sts	0x0165, r24
     1dc:	90 93 66 01 	sts	0x0166, r25
     1e0:	a0 93 67 01 	sts	0x0167, r26
     1e4:	b0 93 68 01 	sts	0x0168, r27
     1e8:	41 e2       	ldi	r20, 0x21	; 33
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	60 e0       	ldi	r22, 0x00	; 0
     1ee:	70 e0       	ldi	r23, 0x00	; 0
     1f0:	88 e5       	ldi	r24, 0x58	; 88
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__eewr_block_m128>
     1f8:	08 95       	ret

000001fa <setSlope>:
     1fa:	cf 92       	push	r12
     1fc:	df 92       	push	r13
     1fe:	ef 92       	push	r14
     200:	ff 92       	push	r15
     202:	88 23       	and	r24, r24
     204:	09 f4       	brne	.+2      	; 0x208 <setSlope+0xe>
     206:	47 c0       	rjmp	.+142    	; 0x296 <setSlope+0x9c>
     208:	2d ec       	ldi	r18, 0xCD	; 205
     20a:	3c ec       	ldi	r19, 0xCC	; 204
     20c:	4c ec       	ldi	r20, 0xCC	; 204
     20e:	5d e3       	ldi	r21, 0x3D	; 61
     210:	60 91 02 01 	lds	r22, 0x0102
     214:	70 91 03 01 	lds	r23, 0x0103
     218:	80 91 04 01 	lds	r24, 0x0104
     21c:	90 91 05 01 	lds	r25, 0x0105
     220:	46 d5       	rcall	.+2700   	; 0xcae <__addsf3>
     222:	6b 01       	movw	r12, r22
     224:	7c 01       	movw	r14, r24
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	40 e0       	ldi	r20, 0x00	; 0
     22c:	50 e4       	ldi	r21, 0x40	; 64
     22e:	8a d6       	rcall	.+3348   	; 0xf44 <__gesf2>
     230:	18 16       	cp	r1, r24
     232:	44 f5       	brge	.+80     	; 0x284 <setSlope+0x8a>
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	a0 e0       	ldi	r26, 0x00	; 0
     23a:	b0 e4       	ldi	r27, 0x40	; 64
     23c:	80 93 02 01 	sts	0x0102, r24
     240:	90 93 03 01 	sts	0x0103, r25
     244:	a0 93 04 01 	sts	0x0104, r26
     248:	b0 93 05 01 	sts	0x0105, r27
     24c:	2d ec       	ldi	r18, 0xCD	; 205
     24e:	3c ec       	ldi	r19, 0xCC	; 204
     250:	4c ec       	ldi	r20, 0xCC	; 204
     252:	5d e3       	ldi	r21, 0x3D	; 61
     254:	60 91 02 01 	lds	r22, 0x0102
     258:	70 91 03 01 	lds	r23, 0x0103
     25c:	80 91 04 01 	lds	r24, 0x0104
     260:	90 91 05 01 	lds	r25, 0x0105
     264:	88 d5       	rcall	.+2832   	; 0xd76 <__cmpsf2>
     266:	88 23       	and	r24, r24
     268:	64 f5       	brge	.+88     	; 0x2c2 <setSlope+0xc8>
     26a:	8d ec       	ldi	r24, 0xCD	; 205
     26c:	9c ec       	ldi	r25, 0xCC	; 204
     26e:	ac ec       	ldi	r26, 0xCC	; 204
     270:	bd e3       	ldi	r27, 0x3D	; 61
     272:	80 93 02 01 	sts	0x0102, r24
     276:	90 93 03 01 	sts	0x0103, r25
     27a:	a0 93 04 01 	sts	0x0104, r26
     27e:	b0 93 05 01 	sts	0x0105, r27
     282:	1f c0       	rjmp	.+62     	; 0x2c2 <setSlope+0xc8>
     284:	c0 92 02 01 	sts	0x0102, r12
     288:	d0 92 03 01 	sts	0x0103, r13
     28c:	e0 92 04 01 	sts	0x0104, r14
     290:	f0 92 05 01 	sts	0x0105, r15
     294:	db cf       	rjmp	.-74     	; 0x24c <setSlope+0x52>
     296:	2d ec       	ldi	r18, 0xCD	; 205
     298:	3c ec       	ldi	r19, 0xCC	; 204
     29a:	4c ec       	ldi	r20, 0xCC	; 204
     29c:	5d e3       	ldi	r21, 0x3D	; 61
     29e:	60 91 02 01 	lds	r22, 0x0102
     2a2:	70 91 03 01 	lds	r23, 0x0103
     2a6:	80 91 04 01 	lds	r24, 0x0104
     2aa:	90 91 05 01 	lds	r25, 0x0105
     2ae:	fe d4       	rcall	.+2556   	; 0xcac <__subsf3>
     2b0:	60 93 02 01 	sts	0x0102, r22
     2b4:	70 93 03 01 	sts	0x0103, r23
     2b8:	80 93 04 01 	sts	0x0104, r24
     2bc:	90 93 05 01 	sts	0x0105, r25
     2c0:	c5 cf       	rjmp	.-118    	; 0x24c <setSlope+0x52>
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	08 95       	ret

000002cc <stateMachine>:
     2cc:	87 70       	andi	r24, 0x07	; 7
     2ce:	90 91 26 01 	lds	r25, 0x0126
     2d2:	91 30       	cpi	r25, 0x01	; 1
     2d4:	59 f0       	breq	.+22     	; 0x2ec <stateMachine+0x20>
     2d6:	18 f0       	brcs	.+6      	; 0x2de <stateMachine+0x12>
     2d8:	92 30       	cpi	r25, 0x02	; 2
     2da:	c9 f0       	breq	.+50     	; 0x30e <stateMachine+0x42>
     2dc:	08 95       	ret
     2de:	ac 98       	cbi	0x15, 4	; 21
     2e0:	ab 9a       	sbi	0x15, 3	; 21
     2e2:	81 30       	cpi	r24, 0x01	; 1
     2e4:	e9 f4       	brne	.+58     	; 0x320 <stateMachine+0x54>
     2e6:	80 93 26 01 	sts	0x0126, r24
     2ea:	08 95       	ret
     2ec:	ac 9a       	sbi	0x15, 4	; 21
     2ee:	ab 98       	cbi	0x15, 3	; 21
     2f0:	83 30       	cpi	r24, 0x03	; 3
     2f2:	19 f4       	brne	.+6      	; 0x2fa <stateMachine+0x2e>
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	81 cf       	rjmp	.-254    	; 0x1fa <setSlope>
     2f8:	08 95       	ret
     2fa:	84 30       	cpi	r24, 0x04	; 4
     2fc:	19 f4       	brne	.+6      	; 0x304 <stateMachine+0x38>
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	7c cf       	rjmp	.-264    	; 0x1fa <setSlope>
     302:	08 95       	ret
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	61 f4       	brne	.+24     	; 0x320 <stateMachine+0x54>
     308:	80 93 26 01 	sts	0x0126, r24
     30c:	08 95       	ret
     30e:	ac 98       	cbi	0x15, 4	; 21
     310:	ab 98       	cbi	0x15, 3	; 21
     312:	80 91 27 01 	lds	r24, 0x0127
     316:	8f 5f       	subi	r24, 0xFF	; 255
     318:	80 93 27 01 	sts	0x0127, r24
     31c:	10 92 26 01 	sts	0x0126, r1
     320:	08 95       	ret

00000322 <schedulerInit>:
/************************************************************************/
/* Sheduler config                                                                     */
/************************************************************************/
void schedulerInit(void){
	
	TCCR0 |= TIMER0_SCHED_PRESC;
     322:	83 b7       	in	r24, 0x33	; 51
     324:	85 60       	ori	r24, 0x05	; 5
     326:	83 bf       	out	0x33, r24	; 51
	TCNT0 |= TIMER0_SCHED_RELOAD; // timer count reaload
     328:	82 b7       	in	r24, 0x32	; 50
     32a:	84 66       	ori	r24, 0x64	; 100
     32c:	82 bf       	out	0x32, r24	; 50
	TIMSK |= (1<< TOIE0); // Enable timer interrupt
     32e:	87 b7       	in	r24, 0x37	; 55
     330:	81 60       	ori	r24, 0x01	; 1
     332:	87 bf       	out	0x37, r24	; 55
     334:	08 95       	ret

00000336 <pwmInit>:
	The formula for Fast PWM
	F(PWM) = F(Clock)/(N*(1+TOP)
	*/
	// max 245 Hz at 16mhz with full top
	
	TCCR1B =0;
     336:	1e bc       	out	0x2e, r1	; 46
	TCCR1A =0;
     338:	1f bc       	out	0x2f, r1	; 47
	TCCR1A |= (1<<COM1B1) |(1<<WGM11);
     33a:	8f b5       	in	r24, 0x2f	; 47
     33c:	82 62       	ori	r24, 0x22	; 34
     33e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM13) | (1<<CS10); // CHECK! 
     340:	8e b5       	in	r24, 0x2e	; 46
     342:	81 61       	ori	r24, 0x11	; 17
     344:	8e bd       	out	0x2e, r24	; 46
	
	ICR1 = CURRENT_MAXPWM;
     346:	80 e4       	ldi	r24, 0x40	; 64
     348:	96 e0       	ldi	r25, 0x06	; 6
     34a:	97 bd       	out	0x27, r25	; 39
     34c:	86 bd       	out	0x26, r24	; 38
     34e:	08 95       	ret

00000350 <controlInit>:


/************************************************************************/
/* @Control init                                                                   */
/************************************************************************/
void controlInit(void){		
     350:	ef 92       	push	r14
     352:	ff 92       	push	r15
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17

	PID_setPid(pidP,pidI,pidD);
     358:	e0 90 79 01 	lds	r14, 0x0179
     35c:	f0 90 7a 01 	lds	r15, 0x017A
     360:	00 91 7b 01 	lds	r16, 0x017B
     364:	10 91 7c 01 	lds	r17, 0x017C
     368:	20 91 52 01 	lds	r18, 0x0152
     36c:	30 91 53 01 	lds	r19, 0x0153
     370:	40 91 54 01 	lds	r20, 0x0154
     374:	50 91 55 01 	lds	r21, 0x0155
     378:	60 91 43 01 	lds	r22, 0x0143
     37c:	70 91 44 01 	lds	r23, 0x0144
     380:	80 91 45 01 	lds	r24, 0x0145
     384:	90 91 46 01 	lds	r25, 0x0146
     388:	32 d3       	rcall	.+1636   	; 0x9ee <PID_setPid>
	// set pid Limits
	PID_setLimitsIerr(-12000,12000); // can be changed, define this ans use variable
     38a:	60 ee       	ldi	r22, 0xE0	; 224
     38c:	7e e2       	ldi	r23, 0x2E	; 46
     38e:	80 e2       	ldi	r24, 0x20	; 32
     390:	91 ed       	ldi	r25, 0xD1	; 209
     392:	57 d3       	rcall	.+1710   	; 0xa42 <PID_setLimitsIerr>
	
}
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	08 95       	ret

0000039e <controlLoop>:

/************************************************************************/
/* @control loop                                                                     */
/************************************************************************/
uint16_t controlLoop(void){
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
int16_t setValue=0;
int16_t feedbackValue=0;
static int16_t  old_pwm=0;	
	// read adc
	setValue = ADC_readAndWAIT(0);
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	1e d1       	rcall	.+572    	; 0x5e2 <ADC_readAndWAIT>
     3a6:	ec 01       	movw	r28, r24
	feedbackValue = ADC_readAndWAIT(1);
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	1b d1       	rcall	.+566    	; 0x5e2 <ADC_readAndWAIT>
	USART1_sendStr(bufferDummy);
	#endif*/
	
	
	// Calculate error
	int16_t pidret = PID_update(setValue,feedbackValue, 1);
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	40 e8       	ldi	r20, 0x80	; 128
     3b2:	5f e3       	ldi	r21, 0x3F	; 63
     3b4:	bc 01       	movw	r22, r24
     3b6:	ce 01       	movw	r24, r28
     3b8:	4d d3       	rcall	.+1690   	; 0xa54 <PID_update>
	
	int16_t newpwm = old_pwm + pidret;
     3ba:	20 91 24 01 	lds	r18, 0x0124
     3be:	30 91 25 01 	lds	r19, 0x0125
     3c2:	82 0f       	add	r24, r18
     3c4:	93 1f       	adc	r25, r19
	
	old_pwm = newpwm;
     3c6:	90 93 25 01 	sts	0x0125, r25
     3ca:	80 93 24 01 	sts	0x0124, r24
     3ce:	81 34       	cpi	r24, 0x41	; 65
     3d0:	26 e0       	ldi	r18, 0x06	; 6
     3d2:	92 07       	cpc	r25, r18
     3d4:	14 f0       	brlt	.+4      	; 0x3da <controlLoop+0x3c>
     3d6:	80 e4       	ldi	r24, 0x40	; 64
     3d8:	96 e0       	ldi	r25, 0x06	; 6
     3da:	99 23       	and	r25, r25
     3dc:	14 f4       	brge	.+4      	; 0x3e2 <controlLoop+0x44>
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
// 	sprintf(bufferDummy,"%4x\n\r",newpwm);
// 	USART1_sendStr(bufferDummy);
// 	#endif
*/
	return newpwm;
}
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <configGPIO>:
/*@Config GPIO                                                          */
/************************************************************************/
void configGPIO(void){
	
	//DDRF = 0x00;
	DDRB = 0xFF;
     3e8:	8f ef       	ldi	r24, 0xFF	; 255
     3ea:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
     3ec:	18 ba       	out	0x18, r1	; 24
	DDRC =  0b00011000; 
     3ee:	98 e1       	ldi	r25, 0x18	; 24
     3f0:	94 bb       	out	0x14, r25	; 20
	PORTC =	0b11111111; // ENABLE PULLSUPS
     3f2:	85 bb       	out	0x15, r24	; 21
	DDRD |= 0xfe;
     3f4:	81 b3       	in	r24, 0x11	; 17
     3f6:	8e 6f       	ori	r24, 0xFE	; 254
     3f8:	81 bb       	out	0x11, r24	; 17
     3fa:	08 95       	ret

000003fc <decodeButton>:
/************************************************************************/
/* @decode Button                                                                     */
/************************************************************************/

uint8_t decodeButton(uint8_t button){
	button &=0x07;
     3fc:	87 70       	andi	r24, 0x07	; 7
	switch (button){
     3fe:	82 30       	cpi	r24, 0x02	; 2
     400:	89 f0       	breq	.+34     	; 0x424 <decodeButton+0x28>
     402:	18 f4       	brcc	.+6      	; 0x40a <decodeButton+0xe>
     404:	81 30       	cpi	r24, 0x01	; 1
     406:	31 f0       	breq	.+12     	; 0x414 <decodeButton+0x18>
     408:	0b c0       	rjmp	.+22     	; 0x420 <decodeButton+0x24>
     40a:	84 30       	cpi	r24, 0x04	; 4
     40c:	29 f0       	breq	.+10     	; 0x418 <decodeButton+0x1c>
     40e:	87 30       	cpi	r24, 0x07	; 7
     410:	29 f0       	breq	.+10     	; 0x41c <decodeButton+0x20>
     412:	06 c0       	rjmp	.+12     	; 0x420 <decodeButton+0x24>
		
		case 1: return BUTTON_ENTER;
     414:	82 e0       	ldi	r24, 0x02	; 2
     416:	08 95       	ret
			break;
		
		case 2: return BUTTON_UP;
			break;	
		
		case 4: return BUTTON_DOWN;
     418:	84 e0       	ldi	r24, 0x04	; 4
     41a:	08 95       	ret
			break;
			
		case 7: return BUTTON_PROG;//	
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	08 95       	ret
	
			
		default: return 0;
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	08 95       	ret
	switch (button){
		
		case 1: return BUTTON_ENTER;
			break;
		
		case 2: return BUTTON_UP;
     424:	83 e0       	ldi	r24, 0x03	; 3
	
			
		default: return 0;
			break;	
	}
}
     426:	08 95       	ret

00000428 <debounceKey>:

#define N_DEBOUNCE 3
/************************************************************************/
/* @debounce function                                                                     */
/************************************************************************/
uint8_t debounceKey(uint8_t codeNew){
     428:	28 2f       	mov	r18, r24
	uint8_t key =0; // by default
	static codeOld;
	static keyCount;
	
	// ALREADY SOMETHIN PRESSED
	if(keyCount != 0){
     42a:	40 91 22 01 	lds	r20, 0x0122
     42e:	50 91 23 01 	lds	r21, 0x0123
     432:	41 15       	cp	r20, r1
     434:	51 05       	cpc	r21, r1
     436:	b9 f0       	breq	.+46     	; 0x466 <debounceKey+0x3e>
		
		// IF SAME KEY and inside debounce times save
		if(codeNew == codeOld && keyCount <N_DEBOUNCE){ // ONLY IF EQUAL AND DEBOUNCE AVAILABLE
     438:	e8 2f       	mov	r30, r24
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	60 91 20 01 	lds	r22, 0x0120
     440:	70 91 21 01 	lds	r23, 0x0121
     444:	e6 17       	cp	r30, r22
     446:	f7 07       	cpc	r31, r23
     448:	81 f5       	brne	.+96     	; 0x4aa <debounceKey+0x82>
     44a:	43 30       	cpi	r20, 0x03	; 3
     44c:	51 05       	cpc	r21, r1
     44e:	7c f5       	brge	.+94     	; 0x4ae <debounceKey+0x86>
			codeOld =codeNew;
			keyCount++;
     450:	4f 5f       	subi	r20, 0xFF	; 255
     452:	5f 4f       	sbci	r21, 0xFF	; 255
     454:	50 93 23 01 	sts	0x0123, r21
     458:	40 93 22 01 	sts	0x0122, r20
			// Reached debounce value and valid key
			if (keyCount == N_DEBOUNCE){
     45c:	43 30       	cpi	r20, 0x03	; 3
     45e:	51 05       	cpc	r21, r1
     460:	41 f1       	breq	.+80     	; 0x4b2 <debounceKey+0x8a>
		
	}

		
	// INITIAL CONDITION
	if (keyCount == 0){
     462:	45 2b       	or	r20, r21
     464:	71 f4       	brne	.+28     	; 0x482 <debounceKey+0x5a>
		codeOld = codeNew;
     466:	42 2f       	mov	r20, r18
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	50 93 21 01 	sts	0x0121, r21
     46e:	40 93 20 01 	sts	0x0120, r20
		keyCount++;
     472:	41 e0       	ldi	r20, 0x01	; 1
     474:	50 e0       	ldi	r21, 0x00	; 0
     476:	50 93 23 01 	sts	0x0123, r21
     47a:	40 93 22 01 	sts	0x0122, r20
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	01 c0       	rjmp	.+2      	; 0x484 <debounceKey+0x5c>
#define N_DEBOUNCE 3
/************************************************************************/
/* @debounce function                                                                     */
/************************************************************************/
uint8_t debounceKey(uint8_t codeNew){
	uint8_t key =0; // by default
     482:	80 e0       	ldi	r24, 0x00	; 0
		codeOld = codeNew;
		keyCount++;
	}
		
	// if pressed key different reset (user must release the key for new run)
	if(codeNew != codeOld){
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	40 91 20 01 	lds	r20, 0x0120
     48a:	50 91 21 01 	lds	r21, 0x0121
     48e:	24 17       	cp	r18, r20
     490:	35 07       	cpc	r19, r21
     492:	81 f0       	breq	.+32     	; 0x4b4 <debounceKey+0x8c>
		codeOld =codeNew;
     494:	30 93 21 01 	sts	0x0121, r19
     498:	20 93 20 01 	sts	0x0120, r18
		keyCount =1;
     49c:	21 e0       	ldi	r18, 0x01	; 1
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	30 93 23 01 	sts	0x0123, r19
     4a4:	20 93 22 01 	sts	0x0122, r18
     4a8:	08 95       	ret
#define N_DEBOUNCE 3
/************************************************************************/
/* @debounce function                                                                     */
/************************************************************************/
uint8_t debounceKey(uint8_t codeNew){
	uint8_t key =0; // by default
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	eb cf       	rjmp	.-42     	; 0x484 <debounceKey+0x5c>
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	e9 cf       	rjmp	.-46     	; 0x484 <debounceKey+0x5c>
     4b2:	e8 cf       	rjmp	.-48     	; 0x484 <debounceKey+0x5c>
	if(codeNew != codeOld){
		codeOld =codeNew;
		keyCount =1;
	}
	return key;	
}
     4b4:	08 95       	ret

000004b6 <main>:
uint16_t pwm=0;
uint8_t portVal=0;


	//1.  config stuffs
	USART1_config(USART1_MY_UBBRN,USART_DATA_FORMAT_8BITS|USART_STOP_BITS_1,USART_TRANSMIT_ENABLE|USART_RECEIVE_ENABLE| USART_INTERRUPT_ENABLE);
     4b6:	48 e9       	ldi	r20, 0x98	; 152
     4b8:	66 e0       	ldi	r22, 0x06	; 6
     4ba:	80 e1       	ldi	r24, 0x10	; 16
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	a9 d3       	rcall	.+1874   	; 0xc12 <USART1_config>
	
	ADC_init(ADC_ENABLE,ADC_REF_VCC,ADC_calcPreScaler(ADC_MAX_FREQ));
     4c0:	88 e4       	ldi	r24, 0x48	; 72
     4c2:	86 d0       	rcall	.+268    	; 0x5d0 <ADC_calcPreScaler>
     4c4:	48 2f       	mov	r20, r24
     4c6:	60 e4       	ldi	r22, 0x40	; 64
     4c8:	80 e8       	ldi	r24, 0x80	; 128
     4ca:	84 d0       	rcall	.+264    	; 0x5d4 <ADC_init>
	configGPIO();
     4cc:	8d df       	rcall	.-230    	; 0x3e8 <configGPIO>
	schedulerInit();
     4ce:	29 df       	rcall	.-430    	; 0x322 <schedulerInit>
	pwmInit();
     4d0:	32 df       	rcall	.-412    	; 0x336 <pwmInit>
	
	
	
	// call the memory read here
	
	paramLoadDefaultParameters(); // 
     4d2:	fa dd       	rcall	.-1036   	; 0xc8 <paramLoadDefaultParameters>
	controlInit();
     4d4:	3d df       	rcall	.-390    	; 0x350 <controlInit>
	
	
	USART1_sendStr("Hello\n\r");
     4d6:	82 e1       	ldi	r24, 0x12	; 18
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	ac d3       	rcall	.+1880   	; 0xc34 <USART1_sendStr>
	
	
	state= STATE_IDLE; // by default
     4dc:	10 92 26 01 	sts	0x0126, r1
	IDLE_LED_ON;
     4e0:	ac 98       	cbi	0x15, 4	; 21
	PRGM_LED_OFF;
     4e2:	ab 9a       	sbi	0x15, 3	; 21
	
	//2. enable interrups
	sei();
     4e4:	78 94       	sei
	
	flagCurrentEnable =1;
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	80 93 4f 01 	sts	0x014F, r24

/************************************************************************/
/* @main                                                                      */
/************************************************************************/
int main(void){
uint16_t pwm=0;
     4ec:	c1 2c       	mov	r12, r1
     4ee:	d1 2c       	mov	r13, r1
			codeNew = decodeButton(portVal);
			codeNew = debounceKey(codeNew);
		
			
			#ifdef DEBUG
			sprintf(bufferDummy,"%x\n\r",codeNew);
     4f0:	0f 2e       	mov	r0, r31
     4f2:	fa e1       	ldi	r31, 0x1A	; 26
     4f4:	af 2e       	mov	r10, r31
     4f6:	f1 e0       	ldi	r31, 0x01	; 1
     4f8:	bf 2e       	mov	r11, r31
     4fa:	f0 2d       	mov	r31, r0
     4fc:	cd e7       	ldi	r28, 0x7D	; 125
     4fe:	d1 e0       	ldi	r29, 0x01	; 1
		if(pwm >CURRENT_MAXPWM) pwm=0;
		_delay_ms(10);
		*/
		 
		//1. buttons read
		if(flagTaskReadButtons){
     500:	80 91 2a 01 	lds	r24, 0x012A
     504:	88 23       	and	r24, r24
     506:	c9 f0       	breq	.+50     	; 0x53a <main+0x84>
				
			uint8_t codeNew;
			//portVal=0; // just
			portVal = (~(PINC & 0x07)&0x07); // Handle inverted logic
     508:	83 b3       	in	r24, 0x13	; 19
     50a:	80 95       	com	r24
			
			codeNew = decodeButton(portVal);
     50c:	87 70       	andi	r24, 0x07	; 7
     50e:	76 df       	rcall	.-276    	; 0x3fc <decodeButton>
			codeNew = debounceKey(codeNew);
     510:	8b df       	rcall	.-234    	; 0x428 <debounceKey>
     512:	18 2f       	mov	r17, r24
		
			
			#ifdef DEBUG
			sprintf(bufferDummy,"%x\n\r",codeNew);
     514:	1f 92       	push	r1
     516:	8f 93       	push	r24
     518:	bf 92       	push	r11
     51a:	af 92       	push	r10
     51c:	df 93       	push	r29
     51e:	cf 93       	push	r28
     520:	8c d5       	rcall	.+2840   	; 0x103a <sprintf>
			USART1_sendStr(bufferDummy);
     522:	ce 01       	movw	r24, r28
     524:	87 d3       	rcall	.+1806   	; 0xc34 <USART1_sendStr>
			#endif	
			
			stateMachine(codeNew); 
     526:	81 2f       	mov	r24, r17
     528:	d1 de       	rcall	.-606    	; 0x2cc <stateMachine>
	
			
			flagTaskReadButtons=0;
     52a:	10 92 2a 01 	sts	0x012A, r1
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
		}
		
		
		if(flagSaveParameters){
     53a:	80 91 27 01 	lds	r24, 0x0127
     53e:	88 23       	and	r24, r24
     540:	19 f0       	breq	.+6      	; 0x548 <main+0x92>
			
			paramSavetoEeprom();
     542:	1f de       	rcall	.-962    	; 0x182 <paramSavetoEeprom>
			
			flagSaveParameters=0;
     544:	10 92 27 01 	sts	0x0127, r1
		}
		
		
		
		// 2. Control loop to be esecuted
		if(flagTaskControl){
     548:	80 91 29 01 	lds	r24, 0x0129
     54c:	88 23       	and	r24, r24
     54e:	21 f0       	breq	.+8      	; 0x558 <main+0xa2>
	
			pwm = controlLoop();
     550:	26 df       	rcall	.-436    	; 0x39e <controlLoop>
     552:	6c 01       	movw	r12, r24
			flagTaskControl=0;
     554:	10 92 29 01 	sts	0x0129, r1
			
		
			
		}
		
		if(flagCurrentEnable){
     558:	80 91 4f 01 	lds	r24, 0x014F
     55c:	88 23       	and	r24, r24
     55e:	19 f0       	breq	.+6      	; 0x566 <main+0xb0>
			// Update ocr 16 bits
			OCR1B= pwm;
     560:	d9 bc       	out	0x29, r13	; 41
     562:	c8 bc       	out	0x28, r12	; 40
     564:	02 c0       	rjmp	.+4      	; 0x56a <main+0xb4>
		
		}else OCR1B =0;
     566:	19 bc       	out	0x29, r1	; 41
     568:	18 bc       	out	0x28, r1	; 40
		
		//4. new message arrive
		if(flagTaskUsartMessage){
     56a:	80 91 28 01 	lds	r24, 0x0128
     56e:	88 23       	and	r24, r24
     570:	09 f4       	brne	.+2      	; 0x574 <main+0xbe>
     572:	c6 cf       	rjmp	.-116    	; 0x500 <main+0x4a>
			
			// extrct the message
			
			// update Pid parameters
			PID_setPid(pidP,pidI,pidD);
     574:	e0 90 79 01 	lds	r14, 0x0179
     578:	f0 90 7a 01 	lds	r15, 0x017A
     57c:	00 91 7b 01 	lds	r16, 0x017B
     580:	10 91 7c 01 	lds	r17, 0x017C
     584:	20 91 52 01 	lds	r18, 0x0152
     588:	30 91 53 01 	lds	r19, 0x0153
     58c:	40 91 54 01 	lds	r20, 0x0154
     590:	50 91 55 01 	lds	r21, 0x0155
     594:	60 91 43 01 	lds	r22, 0x0143
     598:	70 91 44 01 	lds	r23, 0x0144
     59c:	80 91 45 01 	lds	r24, 0x0145
     5a0:	90 91 46 01 	lds	r25, 0x0146
     5a4:	24 d2       	rcall	.+1096   	; 0x9ee <PID_setPid>
			PID_setLimitsPerr(pidPerrMin,pidPerrMax);
     5a6:	60 91 4d 01 	lds	r22, 0x014D
     5aa:	70 91 4e 01 	lds	r23, 0x014E
     5ae:	80 91 9b 01 	lds	r24, 0x019B
     5b2:	90 91 9c 01 	lds	r25, 0x019C
     5b6:	3c d2       	rcall	.+1144   	; 0xa30 <PID_setLimitsPerr>
			PID_setLimitsIerr(pidIerrMin,pidIerrMax);
     5b8:	60 91 47 01 	lds	r22, 0x0147
     5bc:	70 91 48 01 	lds	r23, 0x0148
     5c0:	80 91 4b 01 	lds	r24, 0x014B
     5c4:	90 91 4c 01 	lds	r25, 0x014C
     5c8:	3c d2       	rcall	.+1144   	; 0xa42 <PID_setLimitsIerr>
			flagTaskUsartMessage=0;
     5ca:	10 92 28 01 	sts	0x0128, r1
     5ce:	98 cf       	rjmp	.-208    	; 0x500 <main+0x4a>

000005d0 <ADC_calcPreScaler>:
	// grab values é ler pra uma var adcl e adch
	*val = ADCL;
	*val |= (ADCH <<8);
	return 1;
	
}
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	08 95       	ret

000005d4 <ADC_init>:
     5d4:	96 b1       	in	r25, 0x06	; 6
     5d6:	89 2b       	or	r24, r25
     5d8:	86 b9       	out	0x06, r24	; 6
     5da:	86 b1       	in	r24, 0x06	; 6
     5dc:	86 b9       	out	0x06, r24	; 6
     5de:	67 b9       	out	0x07, r22	; 7
     5e0:	08 95       	ret

000005e2 <ADC_readAndWAIT>:
uint16_t ADC_readAndWAIT(uint8_t ch){
uint16_t val;
	
	
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
     5e2:	97 b1       	in	r25, 0x07	; 7
/************************************************************************/
uint16_t ADC_readAndWAIT(uint8_t ch){
uint16_t val;
	
	
	ch &= 0b00000111;  // AND operation with 7
     5e4:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
     5e6:	98 7f       	andi	r25, 0xF8	; 248
     5e8:	98 2b       	or	r25, r24
     5ea:	97 b9       	out	0x07, r25	; 7
	

	
	//-- Start conv
	ADCSRA |= ADC_START_CONV;
     5ec:	36 9a       	sbi	0x06, 6	; 6
	
	// wait until complete
	while(ADCSRA & ADC_START_CONV);
     5ee:	36 99       	sbic	0x06, 6	; 6
     5f0:	fe cf       	rjmp	.-4      	; 0x5ee <ADC_readAndWAIT+0xc>
	
	// grab values é ler pra uma var adcl e adch
	val = ADCL;
     5f2:	84 b1       	in	r24, 0x04	; 4
	val |= (ADCH <<8);
     5f4:	25 b1       	in	r18, 0x05	; 5
     5f6:	90 e0       	ldi	r25, 0x00	; 0
	return val;
	 
     5f8:	92 2b       	or	r25, r18
     5fa:	08 95       	ret

000005fc <clearBuffer>:


/************************************************************************/
/* @Clear Buffer                                                        */
/************************************************************************/
void clearBuffer(void){
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for(i=0; i< USART_BUFFER_LENGHT; i++) usartBuffer[i]=0;
     600:	fc 01       	movw	r30, r24
     602:	e2 56       	subi	r30, 0x62	; 98
     604:	fe 4f       	sbci	r31, 0xFE	; 254
     606:	10 82       	st	Z, r1
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	82 33       	cpi	r24, 0x32	; 50
     60c:	91 05       	cpc	r25, r1
     60e:	c1 f7       	brne	.-16     	; 0x600 <clearBuffer+0x4>

}
     610:	08 95       	ret

00000612 <__vector_1>:
/************************************************************************/

/************************************************************************/
/* handler External Interrupt Request 0                                                                     */
/************************************************************************/
ISR(INT0_vect){
     612:	1f 92       	push	r1
     614:	0f 92       	push	r0
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	0f 92       	push	r0
     61a:	11 24       	eor	r1, r1
	
}
     61c:	0f 90       	pop	r0
     61e:	0f be       	out	0x3f, r0	; 63
     620:	0f 90       	pop	r0
     622:	1f 90       	pop	r1
     624:	18 95       	reti

00000626 <__vector_2>:


/************************************************************************/
/* handler External Interrupt Request 1                                                                   */
/************************************************************************/
ISR(INT1_vect){
     626:	1f 92       	push	r1
     628:	0f 92       	push	r0
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	0f 92       	push	r0
     62e:	11 24       	eor	r1, r1
	
}
     630:	0f 90       	pop	r0
     632:	0f be       	out	0x3f, r0	; 63
     634:	0f 90       	pop	r0
     636:	1f 90       	pop	r1
     638:	18 95       	reti

0000063a <__vector_3>:


/************************************************************************/
/* handler External Interrupt Request 2                                                                    */
/************************************************************************/
ISR(INT2_vect){
     63a:	1f 92       	push	r1
     63c:	0f 92       	push	r0
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	0f 92       	push	r0
     642:	11 24       	eor	r1, r1
	
}
     644:	0f 90       	pop	r0
     646:	0f be       	out	0x3f, r0	; 63
     648:	0f 90       	pop	r0
     64a:	1f 90       	pop	r1
     64c:	18 95       	reti

0000064e <__vector_4>:


/************************************************************************/
/* handler External Interrupt Request 3                                                                    */
/************************************************************************/
ISR(INT3_vect){
     64e:	1f 92       	push	r1
     650:	0f 92       	push	r0
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	0f 92       	push	r0
     656:	11 24       	eor	r1, r1
	
}
     658:	0f 90       	pop	r0
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	0f 90       	pop	r0
     65e:	1f 90       	pop	r1
     660:	18 95       	reti

00000662 <__vector_5>:


/************************************************************************/
/* handler External Interrupt Request 4                                                                   */
/************************************************************************/
ISR(INT4_vect){
     662:	1f 92       	push	r1
     664:	0f 92       	push	r0
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	0f 92       	push	r0
     66a:	11 24       	eor	r1, r1
	
}
     66c:	0f 90       	pop	r0
     66e:	0f be       	out	0x3f, r0	; 63
     670:	0f 90       	pop	r0
     672:	1f 90       	pop	r1
     674:	18 95       	reti

00000676 <__vector_6>:

/************************************************************************/
/* handler External Interrupt Request 5                                                                    */
/************************************************************************/
ISR(INT5_vect){
     676:	1f 92       	push	r1
     678:	0f 92       	push	r0
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	0f 92       	push	r0
     67e:	11 24       	eor	r1, r1
	
}
     680:	0f 90       	pop	r0
     682:	0f be       	out	0x3f, r0	; 63
     684:	0f 90       	pop	r0
     686:	1f 90       	pop	r1
     688:	18 95       	reti

0000068a <__vector_7>:


/************************************************************************/
/* handler External Interrupt Request 6                                                                  */
/************************************************************************/
ISR(INT6_vect){
     68a:	1f 92       	push	r1
     68c:	0f 92       	push	r0
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	0f 92       	push	r0
     692:	11 24       	eor	r1, r1
	
}
     694:	0f 90       	pop	r0
     696:	0f be       	out	0x3f, r0	; 63
     698:	0f 90       	pop	r0
     69a:	1f 90       	pop	r1
     69c:	18 95       	reti

0000069e <__vector_8>:


/************************************************************************/
/* handler External Interrupt Request 7                                                                   */
/************************************************************************/
ISR(INT7_vect){
     69e:	1f 92       	push	r1
     6a0:	0f 92       	push	r0
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	0f 92       	push	r0
     6a6:	11 24       	eor	r1, r1
	
}
     6a8:	0f 90       	pop	r0
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	0f 90       	pop	r0
     6ae:	1f 90       	pop	r1
     6b0:	18 95       	reti

000006b2 <__vector_9>:
/************************************************************************/

/************************************************************************/
/* handler Timer/Counter2 Compare Match                                                                  */
/************************************************************************/
ISR(TIMER2_COMP_vect){
     6b2:	1f 92       	push	r1
     6b4:	0f 92       	push	r0
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	0f 92       	push	r0
     6ba:	11 24       	eor	r1, r1
	
}
     6bc:	0f 90       	pop	r0
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	0f 90       	pop	r0
     6c2:	1f 90       	pop	r1
     6c4:	18 95       	reti

000006c6 <__vector_10>:


/************************************************************************/
/* handler Timer/Counter2 Overflow                                                                 */
/************************************************************************/
ISR(TIMER2_OVF_vect){
     6c6:	1f 92       	push	r1
     6c8:	0f 92       	push	r0
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	0f 92       	push	r0
     6ce:	11 24       	eor	r1, r1
	
	
	
}
     6d0:	0f 90       	pop	r0
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	0f 90       	pop	r0
     6d6:	1f 90       	pop	r1
     6d8:	18 95       	reti

000006da <__vector_11>:


/************************************************************************/
/* handler Timer/Counter1 Capture Event                                                               */
/************************************************************************/
ISR(TIMER1_CAPT_vect){
     6da:	1f 92       	push	r1
     6dc:	0f 92       	push	r0
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	0f 92       	push	r0
     6e2:	11 24       	eor	r1, r1
	
}
     6e4:	0f 90       	pop	r0
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	0f 90       	pop	r0
     6ea:	1f 90       	pop	r1
     6ec:	18 95       	reti

000006ee <__vector_12>:


/************************************************************************/
/* handler Timer/Counter1 Compare Match A                                                              */
/************************************************************************/
ISR(TIMER1_COMPA_vect){
     6ee:	1f 92       	push	r1
     6f0:	0f 92       	push	r0
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	0f 92       	push	r0
     6f6:	11 24       	eor	r1, r1
	
}
     6f8:	0f 90       	pop	r0
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	0f 90       	pop	r0
     6fe:	1f 90       	pop	r1
     700:	18 95       	reti

00000702 <__vector_13>:


/************************************************************************/
/* handler Timer/Counter1 Compare Match B                                                             */
/************************************************************************/
ISR(TIMER1_COMPB_vect){
     702:	1f 92       	push	r1
     704:	0f 92       	push	r0
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	0f 92       	push	r0
     70a:	11 24       	eor	r1, r1
	
}
     70c:	0f 90       	pop	r0
     70e:	0f be       	out	0x3f, r0	; 63
     710:	0f 90       	pop	r0
     712:	1f 90       	pop	r1
     714:	18 95       	reti

00000716 <__vector_14>:


/************************************************************************/
/* handler Timer/Counter1 Overflow                                                            */
/************************************************************************/
ISR(TIMER1_OVF_vect){
     716:	1f 92       	push	r1
     718:	0f 92       	push	r0
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	0f 92       	push	r0
     71e:	11 24       	eor	r1, r1
	
}
     720:	0f 90       	pop	r0
     722:	0f be       	out	0x3f, r0	; 63
     724:	0f 90       	pop	r0
     726:	1f 90       	pop	r1
     728:	18 95       	reti

0000072a <__vector_15>:


/************************************************************************/
/* handler Timer/Counter0 Compare Match                                                           */
/************************************************************************/
ISR(TIMER0_COMP_vect){
     72a:	1f 92       	push	r1
     72c:	0f 92       	push	r0
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	0f 92       	push	r0
     732:	11 24       	eor	r1, r1
	
}
     734:	0f 90       	pop	r0
     736:	0f be       	out	0x3f, r0	; 63
     738:	0f 90       	pop	r0
     73a:	1f 90       	pop	r1
     73c:	18 95       	reti

0000073e <__vector_16>:
extern uint8_t flagTaskControl;
extern uint8_t flagTaskUsartMessage;
/************************************************************************/
/* handler Timer/Counter0 Overflow     CHECK                                                     */
/************************************************************************/
ISR(TIMER0_OVF_vect){
     73e:	1f 92       	push	r1
     740:	0f 92       	push	r0
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	0f 92       	push	r0
     746:	11 24       	eor	r1, r1
     748:	2f 93       	push	r18
     74a:	3f 93       	push	r19
     74c:	5f 93       	push	r21
     74e:	6f 93       	push	r22
     750:	7f 93       	push	r23
     752:	8f 93       	push	r24
     754:	9f 93       	push	r25
     756:	af 93       	push	r26
     758:	bf 93       	push	r27
	static uint16_t msCounter;
	// scheduling period 
	// control enabled
	msCounter++;
     75a:	20 91 2b 01 	lds	r18, 0x012B
     75e:	30 91 2c 01 	lds	r19, 0x012C
     762:	2f 5f       	subi	r18, 0xFF	; 255
     764:	3f 4f       	sbci	r19, 0xFF	; 255
     766:	30 93 2c 01 	sts	0x012C, r19
     76a:	20 93 2b 01 	sts	0x012B, r18
	
	if(msCounter % taskControlPeriod == 0) flagTaskControl++;
     76e:	60 91 06 01 	lds	r22, 0x0106
     772:	70 91 07 01 	lds	r23, 0x0107
     776:	c9 01       	movw	r24, r18
     778:	4c d4       	rcall	.+2200   	; 0x1012 <__udivmodhi4>
     77a:	89 2b       	or	r24, r25
     77c:	29 f4       	brne	.+10     	; 0x788 <__vector_16+0x4a>
     77e:	80 91 29 01 	lds	r24, 0x0129
     782:	8f 5f       	subi	r24, 0xFF	; 255
     784:	80 93 29 01 	sts	0x0129, r24
	if(msCounter % taskReadButtonsPeriod == 0) flagTaskReadButtons++;
     788:	60 91 08 01 	lds	r22, 0x0108
     78c:	70 91 09 01 	lds	r23, 0x0109
     790:	c9 01       	movw	r24, r18
     792:	3f d4       	rcall	.+2174   	; 0x1012 <__udivmodhi4>
     794:	89 2b       	or	r24, r25
     796:	29 f4       	brne	.+10     	; 0x7a2 <__vector_16+0x64>
     798:	80 91 2a 01 	lds	r24, 0x012A
     79c:	8f 5f       	subi	r24, 0xFF	; 255
     79e:	80 93 2a 01 	sts	0x012A, r24
	
	// reload values // deve dar uns 5segundos
	if(msCounter > schedulerMaxCount) msCounter=0;
     7a2:	80 91 00 01 	lds	r24, 0x0100
     7a6:	90 91 01 01 	lds	r25, 0x0101
     7aa:	82 17       	cp	r24, r18
     7ac:	93 07       	cpc	r25, r19
     7ae:	20 f4       	brcc	.+8      	; 0x7b8 <__vector_16+0x7a>
     7b0:	10 92 2c 01 	sts	0x012C, r1
     7b4:	10 92 2b 01 	sts	0x012B, r1
	
	
	
	
	
}
     7b8:	bf 91       	pop	r27
     7ba:	af 91       	pop	r26
     7bc:	9f 91       	pop	r25
     7be:	8f 91       	pop	r24
     7c0:	7f 91       	pop	r23
     7c2:	6f 91       	pop	r22
     7c4:	5f 91       	pop	r21
     7c6:	3f 91       	pop	r19
     7c8:	2f 91       	pop	r18
     7ca:	0f 90       	pop	r0
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	0f 90       	pop	r0
     7d0:	1f 90       	pop	r1
     7d2:	18 95       	reti

000007d4 <__vector_17>:
/************************************************************************/

/************************************************************************/
/* handler SPI Serial Transfer Complete                                                         */
/************************************************************************/
ISR(SPI_STC_vect){
     7d4:	1f 92       	push	r1
     7d6:	0f 92       	push	r0
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	0f 92       	push	r0
     7dc:	11 24       	eor	r1, r1
	
}
     7de:	0f 90       	pop	r0
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	0f 90       	pop	r0
     7e4:	1f 90       	pop	r1
     7e6:	18 95       	reti

000007e8 <__vector_18>:


/************************************************************************/
/* handler USART0, Rx Complete                                                        */
/************************************************************************/
ISR(USART0_RX_vect){
     7e8:	1f 92       	push	r1
     7ea:	0f 92       	push	r0
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	0f 92       	push	r0
     7f0:	11 24       	eor	r1, r1
     7f2:	0b b6       	in	r0, 0x3b	; 59
     7f4:	0f 92       	push	r0
     7f6:	2f 93       	push	r18
     7f8:	3f 93       	push	r19
     7fa:	4f 93       	push	r20
     7fc:	5f 93       	push	r21
     7fe:	6f 93       	push	r22
     800:	7f 93       	push	r23
     802:	8f 93       	push	r24
     804:	9f 93       	push	r25
     806:	af 93       	push	r26
     808:	bf 93       	push	r27
     80a:	ef 93       	push	r30
     80c:	ff 93       	push	r31
	char c;
	c =USART0_receiveChar();
     80e:	4a d2       	rcall	.+1172   	; 0xca4 <USART0_receiveChar>
	// manda caracter para usart 0
	USART1_sendChar(c);
     810:	09 d2       	rcall	.+1042   	; 0xc24 <USART1_sendChar>
}
     812:	ff 91       	pop	r31
     814:	ef 91       	pop	r30
     816:	bf 91       	pop	r27
     818:	af 91       	pop	r26
     81a:	9f 91       	pop	r25
     81c:	8f 91       	pop	r24
     81e:	7f 91       	pop	r23
     820:	6f 91       	pop	r22
     822:	5f 91       	pop	r21
     824:	4f 91       	pop	r20
     826:	3f 91       	pop	r19
     828:	2f 91       	pop	r18
     82a:	0f 90       	pop	r0
     82c:	0b be       	out	0x3b, r0	; 59
     82e:	0f 90       	pop	r0
     830:	0f be       	out	0x3f, r0	; 63
     832:	0f 90       	pop	r0
     834:	1f 90       	pop	r1
     836:	18 95       	reti

00000838 <__vector_19>:


/************************************************************************/
/* handler USART0 Data Register Empty                                                       */
/************************************************************************/
ISR(USART0_UDRE_vect){
     838:	1f 92       	push	r1
     83a:	0f 92       	push	r0
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	0f 92       	push	r0
     840:	11 24       	eor	r1, r1

}
     842:	0f 90       	pop	r0
     844:	0f be       	out	0x3f, r0	; 63
     846:	0f 90       	pop	r0
     848:	1f 90       	pop	r1
     84a:	18 95       	reti

0000084c <__vector_20>:


/************************************************************************/
/* handler USART0, Tx Complete                                                       */
/************************************************************************/
ISR(USART0_TX_vect){
     84c:	1f 92       	push	r1
     84e:	0f 92       	push	r0
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	0f 92       	push	r0
     854:	11 24       	eor	r1, r1

}
     856:	0f 90       	pop	r0
     858:	0f be       	out	0x3f, r0	; 63
     85a:	0f 90       	pop	r0
     85c:	1f 90       	pop	r1
     85e:	18 95       	reti

00000860 <__vector_21>:
/************************************************************************/

/************************************************************************/
/* handler ADC Conversion Complete                                                    */
/************************************************************************/
ISR(ADC_vect){
     860:	1f 92       	push	r1
     862:	0f 92       	push	r0
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	0f 92       	push	r0
     868:	11 24       	eor	r1, r1

}
     86a:	0f 90       	pop	r0
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	0f 90       	pop	r0
     870:	1f 90       	pop	r1
     872:	18 95       	reti

00000874 <__vector_22>:
/************************************************************************/

/************************************************************************/
/* handler EEPROM Ready                                                   */
/************************************************************************/
ISR(EE_READY_vect){
     874:	1f 92       	push	r1
     876:	0f 92       	push	r0
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	0f 92       	push	r0
     87c:	11 24       	eor	r1, r1

}
     87e:	0f 90       	pop	r0
     880:	0f be       	out	0x3f, r0	; 63
     882:	0f 90       	pop	r0
     884:	1f 90       	pop	r1
     886:	18 95       	reti

00000888 <__vector_23>:
/************************************************************************/

/************************************************************************/
/* handler Analog Comparator                                                  */
/************************************************************************/
ISR(ANALOG_COMP_vect){
     888:	1f 92       	push	r1
     88a:	0f 92       	push	r0
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	0f 92       	push	r0
     890:	11 24       	eor	r1, r1

}
     892:	0f 90       	pop	r0
     894:	0f be       	out	0x3f, r0	; 63
     896:	0f 90       	pop	r0
     898:	1f 90       	pop	r1
     89a:	18 95       	reti

0000089c <__vector_24>:
/************************************************************************/

/************************************************************************/
/* handler  Timer/Counter1 Compare Match C                                               */
/************************************************************************/
ISR(TIMER1_COMPC_vect){
     89c:	1f 92       	push	r1
     89e:	0f 92       	push	r0
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	0f 92       	push	r0
     8a4:	11 24       	eor	r1, r1

}
     8a6:	0f 90       	pop	r0
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	0f 90       	pop	r0
     8ac:	1f 90       	pop	r1
     8ae:	18 95       	reti

000008b0 <__vector_25>:


/************************************************************************/
/* handler Timer/Counter3 Capture Event                                             */
/************************************************************************/
ISR(TIMER3_CAPT_vect){
     8b0:	1f 92       	push	r1
     8b2:	0f 92       	push	r0
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	0f 92       	push	r0
     8b8:	11 24       	eor	r1, r1

}
     8ba:	0f 90       	pop	r0
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	0f 90       	pop	r0
     8c0:	1f 90       	pop	r1
     8c2:	18 95       	reti

000008c4 <__vector_26>:


/************************************************************************/
/* handler Timer/Counter3 Compare Match A                                             */
/************************************************************************/
ISR(TIMER3_COMPA_vect){
     8c4:	1f 92       	push	r1
     8c6:	0f 92       	push	r0
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	0f 92       	push	r0
     8cc:	11 24       	eor	r1, r1

}
     8ce:	0f 90       	pop	r0
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	0f 90       	pop	r0
     8d4:	1f 90       	pop	r1
     8d6:	18 95       	reti

000008d8 <__vector_27>:


/************************************************************************/
/* handler Timer/Counter3 Compare Match B                                             */
/************************************************************************/
ISR(TIMER3_COMPB_vect){
     8d8:	1f 92       	push	r1
     8da:	0f 92       	push	r0
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	0f 92       	push	r0
     8e0:	11 24       	eor	r1, r1

}
     8e2:	0f 90       	pop	r0
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	0f 90       	pop	r0
     8e8:	1f 90       	pop	r1
     8ea:	18 95       	reti

000008ec <__vector_28>:


/************************************************************************/
/* handler Timer/Counter3 Compare Match C                                           */
/************************************************************************/
ISR(TIMER3_COMPC_vect){
     8ec:	1f 92       	push	r1
     8ee:	0f 92       	push	r0
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	0f 92       	push	r0
     8f4:	11 24       	eor	r1, r1

}
     8f6:	0f 90       	pop	r0
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	0f 90       	pop	r0
     8fc:	1f 90       	pop	r1
     8fe:	18 95       	reti

00000900 <__vector_29>:


/************************************************************************/
/* handler Timer/Counter3 Overflow                                           */
/************************************************************************/
ISR(TIMER3_OVF_vect){
     900:	1f 92       	push	r1
     902:	0f 92       	push	r0
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	0f 92       	push	r0
     908:	11 24       	eor	r1, r1

}
     90a:	0f 90       	pop	r0
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	0f 90       	pop	r0
     910:	1f 90       	pop	r1
     912:	18 95       	reti

00000914 <__vector_30>:
/************************************************************************/

/************************************************************************/
/* handler USART1, Rx Complete                                                                    */
/************************************************************************/
ISR(USART1_RX_vect){
     914:	1f 92       	push	r1
     916:	0f 92       	push	r0
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	0f 92       	push	r0
     91c:	11 24       	eor	r1, r1
     91e:	0b b6       	in	r0, 0x3b	; 59
     920:	0f 92       	push	r0
     922:	2f 93       	push	r18
     924:	3f 93       	push	r19
     926:	4f 93       	push	r20
     928:	5f 93       	push	r21
     92a:	6f 93       	push	r22
     92c:	7f 93       	push	r23
     92e:	8f 93       	push	r24
     930:	9f 93       	push	r25
     932:	af 93       	push	r26
     934:	bf 93       	push	r27
     936:	cf 93       	push	r28
     938:	ef 93       	push	r30
     93a:	ff 93       	push	r31
	char c;

	
	c =USART1_receiveChar();
     93c:	a7 d1       	rcall	.+846    	; 0xc8c <USART1_receiveChar>
     93e:	c8 2f       	mov	r28, r24
	USART0_sendChar(c); // reply with received char
     940:	ad d1       	rcall	.+858    	; 0xc9c <USART0_sendChar>
	if(c== MSG_END_CARACTER){
     942:	cc 37       	cpi	r28, 0x7C	; 124
     944:	31 f4       	brne	.+12     	; 0x952 <__vector_30+0x3e>
		nReceivedBytes=0;
     946:	10 92 d0 01 	sts	0x01D0, r1
		flagNewMessage=1;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	80 93 9d 01 	sts	0x019D, r24
		return;
     950:	12 c0       	rjmp	.+36     	; 0x976 <__vector_30+0x62>
	}
	// save caracter to buffer
	usartBuffer[nReceivedBytes]=c;
     952:	e0 91 d0 01 	lds	r30, 0x01D0
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	e2 56       	subi	r30, 0x62	; 98
     95a:	fe 4f       	sbci	r31, 0xFE	; 254
     95c:	c0 83       	st	Z, r28
	nReceivedBytes++;
     95e:	80 91 d0 01 	lds	r24, 0x01D0
     962:	8f 5f       	subi	r24, 0xFF	; 255
     964:	80 93 d0 01 	sts	0x01D0, r24

	// test if buffer underrun	
	if(nReceivedBytes> USART_BUFFER_LENGHT+1){
     968:	80 91 d0 01 	lds	r24, 0x01D0
     96c:	84 33       	cpi	r24, 0x34	; 52
     96e:	18 f0       	brcs	.+6      	; 0x976 <__vector_30+0x62>
		nReceivedBytes=0;
     970:	10 92 d0 01 	sts	0x01D0, r1
		clearBuffer();
     974:	43 de       	rcall	.-890    	; 0x5fc <clearBuffer>
	}
}
     976:	ff 91       	pop	r31
     978:	ef 91       	pop	r30
     97a:	cf 91       	pop	r28
     97c:	bf 91       	pop	r27
     97e:	af 91       	pop	r26
     980:	9f 91       	pop	r25
     982:	8f 91       	pop	r24
     984:	7f 91       	pop	r23
     986:	6f 91       	pop	r22
     988:	5f 91       	pop	r21
     98a:	4f 91       	pop	r20
     98c:	3f 91       	pop	r19
     98e:	2f 91       	pop	r18
     990:	0f 90       	pop	r0
     992:	0b be       	out	0x3b, r0	; 59
     994:	0f 90       	pop	r0
     996:	0f be       	out	0x3f, r0	; 63
     998:	0f 90       	pop	r0
     99a:	1f 90       	pop	r1
     99c:	18 95       	reti

0000099e <__vector_31>:


/************************************************************************/
/* handler USART1 Data Register Empty                                          */
/************************************************************************/
ISR(USART1_UDRE_vect){
     99e:	1f 92       	push	r1
     9a0:	0f 92       	push	r0
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	0f 92       	push	r0
     9a6:	11 24       	eor	r1, r1

}
     9a8:	0f 90       	pop	r0
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	0f 90       	pop	r0
     9ae:	1f 90       	pop	r1
     9b0:	18 95       	reti

000009b2 <__vector_32>:


/************************************************************************/
/* handler USART1, Tx Complete                                         */
/************************************************************************/
ISR(USART1_TX_vect){
     9b2:	1f 92       	push	r1
     9b4:	0f 92       	push	r0
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	0f 92       	push	r0
     9ba:	11 24       	eor	r1, r1

}
     9bc:	0f 90       	pop	r0
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	0f 90       	pop	r0
     9c2:	1f 90       	pop	r1
     9c4:	18 95       	reti

000009c6 <__vector_33>:


/************************************************************************/
/* handler Two-wire Serial Interface                                       */
/************************************************************************/
ISR(TWI_vect){
     9c6:	1f 92       	push	r1
     9c8:	0f 92       	push	r0
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	0f 92       	push	r0
     9ce:	11 24       	eor	r1, r1

}
     9d0:	0f 90       	pop	r0
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	0f 90       	pop	r0
     9d6:	1f 90       	pop	r1
     9d8:	18 95       	reti

000009da <__vector_34>:


/************************************************************************/
/* handler Store Program Memory Ready                                       */
/************************************************************************/
ISR(SPM_READY_vect){
     9da:	1f 92       	push	r1
     9dc:	0f 92       	push	r0
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	0f 92       	push	r0
     9e2:	11 24       	eor	r1, r1

}
     9e4:	0f 90       	pop	r0
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	0f 90       	pop	r0
     9ea:	1f 90       	pop	r1
     9ec:	18 95       	reti

000009ee <PID_setPid>:

/*
 * reset I term limit
 */
void PID_resetIerr() {
	pid_Ierr = 0;
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	60 93 3d 01 	sts	0x013D, r22
     9fa:	70 93 3e 01 	sts	0x013E, r23
     9fe:	80 93 3f 01 	sts	0x013F, r24
     a02:	90 93 40 01 	sts	0x0140, r25
     a06:	20 93 39 01 	sts	0x0139, r18
     a0a:	30 93 3a 01 	sts	0x013A, r19
     a0e:	40 93 3b 01 	sts	0x013B, r20
     a12:	50 93 3c 01 	sts	0x013C, r21
     a16:	e0 92 35 01 	sts	0x0135, r14
     a1a:	f0 92 36 01 	sts	0x0136, r15
     a1e:	00 93 37 01 	sts	0x0137, r16
     a22:	10 93 38 01 	sts	0x0138, r17
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	ff 90       	pop	r15
     a2c:	ef 90       	pop	r14
     a2e:	08 95       	ret

00000a30 <PID_setLimitsPerr>:
     a30:	90 93 11 01 	sts	0x0111, r25
     a34:	80 93 10 01 	sts	0x0110, r24
     a38:	70 93 0f 01 	sts	0x010F, r23
     a3c:	60 93 0e 01 	sts	0x010E, r22
     a40:	08 95       	ret

00000a42 <PID_setLimitsIerr>:
     a42:	90 93 0d 01 	sts	0x010D, r25
     a46:	80 93 0c 01 	sts	0x010C, r24
     a4a:	70 93 0b 01 	sts	0x010B, r23
     a4e:	60 93 0a 01 	sts	0x010A, r22
     a52:	08 95       	ret

00000a54 <PID_update>:


/*
 * pid control algorithm
 */
int16_t PID_update(int16_t setpoint, int16_t input, double dt) {
     a54:	4f 92       	push	r4
     a56:	5f 92       	push	r5
     a58:	6f 92       	push	r6
     a5a:	7f 92       	push	r7
     a5c:	8f 92       	push	r8
     a5e:	9f 92       	push	r9
     a60:	af 92       	push	r10
     a62:	bf 92       	push	r11
     a64:	cf 92       	push	r12
     a66:	df 92       	push	r13
     a68:	ef 92       	push	r14
     a6a:	ff 92       	push	r15
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
	//if this function get called always at the same period, dt = 1 can be used
	//otherwise dt should be calculated
	static int16_t inputprev = 0;

	//compute P error
	pid_Perr = setpoint - input;
     a74:	86 1b       	sub	r24, r22
     a76:	97 0b       	sbc	r25, r23
     a78:	90 93 34 01 	sts	0x0134, r25
     a7c:	80 93 33 01 	sts	0x0133, r24
	// Apply saturation if need
	if(pid_Perr < pid_Perrmin)
     a80:	20 91 33 01 	lds	r18, 0x0133
     a84:	30 91 34 01 	lds	r19, 0x0134
     a88:	80 91 10 01 	lds	r24, 0x0110
     a8c:	90 91 11 01 	lds	r25, 0x0111
     a90:	28 17       	cp	r18, r24
     a92:	39 07       	cpc	r19, r25
     a94:	4c f4       	brge	.+18     	; 0xaa8 <PID_update+0x54>
		pid_Perr = pid_Perrmin;
     a96:	80 91 10 01 	lds	r24, 0x0110
     a9a:	90 91 11 01 	lds	r25, 0x0111
     a9e:	90 93 34 01 	sts	0x0134, r25
     aa2:	80 93 33 01 	sts	0x0133, r24
     aa6:	13 c0       	rjmp	.+38     	; 0xace <PID_update+0x7a>
	else if(pid_Perr > pid_Perrmax)
     aa8:	20 91 33 01 	lds	r18, 0x0133
     aac:	30 91 34 01 	lds	r19, 0x0134
     ab0:	80 91 0e 01 	lds	r24, 0x010E
     ab4:	90 91 0f 01 	lds	r25, 0x010F
     ab8:	82 17       	cp	r24, r18
     aba:	93 07       	cpc	r25, r19
     abc:	44 f4       	brge	.+16     	; 0xace <PID_update+0x7a>
		pid_Perr = pid_Perrmax;
     abe:	80 91 0e 01 	lds	r24, 0x010E
     ac2:	90 91 0f 01 	lds	r25, 0x010F
     ac6:	90 93 34 01 	sts	0x0134, r25
     aca:	80 93 33 01 	sts	0x0133, r24

	//compute I error
	pid_Ierr += pid_Ierr;
     ace:	20 91 31 01 	lds	r18, 0x0131
     ad2:	30 91 32 01 	lds	r19, 0x0132
     ad6:	80 91 31 01 	lds	r24, 0x0131
     ada:	90 91 32 01 	lds	r25, 0x0132
     ade:	82 0f       	add	r24, r18
     ae0:	93 1f       	adc	r25, r19
     ae2:	90 93 32 01 	sts	0x0132, r25
     ae6:	80 93 31 01 	sts	0x0131, r24
	// apli Saturation if need
	if(pid_Ierr < pid_Ierrmin)
     aea:	20 91 31 01 	lds	r18, 0x0131
     aee:	30 91 32 01 	lds	r19, 0x0132
     af2:	80 91 0c 01 	lds	r24, 0x010C
     af6:	90 91 0d 01 	lds	r25, 0x010D
     afa:	28 17       	cp	r18, r24
     afc:	39 07       	cpc	r19, r25
     afe:	4c f4       	brge	.+18     	; 0xb12 <PID_update+0xbe>
		pid_Ierr = pid_Ierrmin;
     b00:	80 91 0c 01 	lds	r24, 0x010C
     b04:	90 91 0d 01 	lds	r25, 0x010D
     b08:	90 93 32 01 	sts	0x0132, r25
     b0c:	80 93 31 01 	sts	0x0131, r24
     b10:	13 c0       	rjmp	.+38     	; 0xb38 <PID_update+0xe4>
	else if(pid_Ierr > pid_Ierrmax)
     b12:	20 91 31 01 	lds	r18, 0x0131
     b16:	30 91 32 01 	lds	r19, 0x0132
     b1a:	80 91 0a 01 	lds	r24, 0x010A
     b1e:	90 91 0b 01 	lds	r25, 0x010B
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	44 f4       	brge	.+16     	; 0xb38 <PID_update+0xe4>
		pid_Ierr = pid_Ierrmax;
     b28:	80 91 0a 01 	lds	r24, 0x010A
     b2c:	90 91 0b 01 	lds	r25, 0x010B
     b30:	90 93 32 01 	sts	0x0132, r25
     b34:	80 93 31 01 	sts	0x0131, r24

	//compute D error
	pid_Derr = (inputprev - input);
     b38:	80 91 2d 01 	lds	r24, 0x012D
     b3c:	90 91 2e 01 	lds	r25, 0x012E
     b40:	86 1b       	sub	r24, r22
     b42:	97 0b       	sbc	r25, r23
     b44:	90 93 30 01 	sts	0x0130, r25
     b48:	80 93 2f 01 	sts	0x012F, r24

	//record last value
	inputprev = input;
     b4c:	70 93 2e 01 	sts	0x012E, r23
     b50:	60 93 2d 01 	sts	0x012D, r22

	//compute output Apply the gains
	int16_t output = (pid_pidP*pid_Perr) + (pid_pidI*pid_Ierr) + (pid_pidD*pid_Derr);
     b54:	60 91 33 01 	lds	r22, 0x0133
     b58:	70 91 34 01 	lds	r23, 0x0134
     b5c:	c0 90 3d 01 	lds	r12, 0x013D
     b60:	d0 90 3e 01 	lds	r13, 0x013E
     b64:	e0 90 3f 01 	lds	r14, 0x013F
     b68:	f0 90 40 01 	lds	r15, 0x0140
     b6c:	c0 91 31 01 	lds	r28, 0x0131
     b70:	d0 91 32 01 	lds	r29, 0x0132
     b74:	40 90 39 01 	lds	r4, 0x0139
     b78:	50 90 3a 01 	lds	r5, 0x013A
     b7c:	60 90 3b 01 	lds	r6, 0x013B
     b80:	70 90 3c 01 	lds	r7, 0x013C
     b84:	00 91 2f 01 	lds	r16, 0x012F
     b88:	10 91 30 01 	lds	r17, 0x0130
     b8c:	80 90 35 01 	lds	r8, 0x0135
     b90:	90 90 36 01 	lds	r9, 0x0136
     b94:	a0 90 37 01 	lds	r10, 0x0137
     b98:	b0 90 38 01 	lds	r11, 0x0138
     b9c:	88 27       	eor	r24, r24
     b9e:	77 fd       	sbrc	r23, 7
     ba0:	80 95       	com	r24
     ba2:	98 2f       	mov	r25, r24
     ba4:	1f d1       	rcall	.+574    	; 0xde4 <__floatsisf>
     ba6:	a7 01       	movw	r20, r14
     ba8:	96 01       	movw	r18, r12
     baa:	d0 d1       	rcall	.+928    	; 0xf4c <__mulsf3>
     bac:	6b 01       	movw	r12, r22
     bae:	7c 01       	movw	r14, r24
     bb0:	be 01       	movw	r22, r28
     bb2:	88 27       	eor	r24, r24
     bb4:	77 fd       	sbrc	r23, 7
     bb6:	80 95       	com	r24
     bb8:	98 2f       	mov	r25, r24
     bba:	14 d1       	rcall	.+552    	; 0xde4 <__floatsisf>
     bbc:	a3 01       	movw	r20, r6
     bbe:	92 01       	movw	r18, r4
     bc0:	c5 d1       	rcall	.+906    	; 0xf4c <__mulsf3>
     bc2:	9b 01       	movw	r18, r22
     bc4:	ac 01       	movw	r20, r24
     bc6:	c7 01       	movw	r24, r14
     bc8:	b6 01       	movw	r22, r12
     bca:	71 d0       	rcall	.+226    	; 0xcae <__addsf3>
     bcc:	6b 01       	movw	r12, r22
     bce:	7c 01       	movw	r14, r24
     bd0:	b8 01       	movw	r22, r16
     bd2:	88 27       	eor	r24, r24
     bd4:	77 fd       	sbrc	r23, 7
     bd6:	80 95       	com	r24
     bd8:	98 2f       	mov	r25, r24
     bda:	04 d1       	rcall	.+520    	; 0xde4 <__floatsisf>
     bdc:	a5 01       	movw	r20, r10
     bde:	94 01       	movw	r18, r8
     be0:	b5 d1       	rcall	.+874    	; 0xf4c <__mulsf3>
     be2:	9b 01       	movw	r18, r22
     be4:	ac 01       	movw	r20, r24
     be6:	c7 01       	movw	r24, r14
     be8:	b6 01       	movw	r22, r12
     bea:	61 d0       	rcall	.+194    	; 0xcae <__addsf3>
     bec:	c8 d0       	rcall	.+400    	; 0xd7e <__fixsfsi>

	return output;
     bee:	cb 01       	movw	r24, r22
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	df 90       	pop	r13
     bfe:	cf 90       	pop	r12
     c00:	bf 90       	pop	r11
     c02:	af 90       	pop	r10
     c04:	9f 90       	pop	r9
     c06:	8f 90       	pop	r8
     c08:	7f 90       	pop	r7
     c0a:	6f 90       	pop	r6
     c0c:	5f 90       	pop	r5
     c0e:	4f 90       	pop	r4
     c10:	08 95       	ret

00000c12 <USART1_config>:
		{
			USART0_sendChar(*(data+i));	//CALL FUNCTION AND SEND CHAR IN THAT POSITION
		}
	}

}
     c12:	90 93 98 00 	sts	0x0098, r25
     c16:	80 93 99 00 	sts	0x0099, r24
     c1a:	40 93 9a 00 	sts	0x009A, r20
     c1e:	60 93 9d 00 	sts	0x009D, r22
     c22:	08 95       	ret

00000c24 <USART1_sendChar>:
     c24:	eb e9       	ldi	r30, 0x9B	; 155
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	90 81       	ld	r25, Z
     c2a:	95 ff       	sbrs	r25, 5
     c2c:	fd cf       	rjmp	.-6      	; 0xc28 <USART1_sendChar+0x4>
     c2e:	80 93 9c 00 	sts	0x009C, r24
     c32:	08 95       	ret

00000c34 <USART1_sendStr>:
     c34:	ef 92       	push	r14
     c36:	ff 92       	push	r15
     c38:	0f 93       	push	r16
     c3a:	1f 93       	push	r17
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	fc 01       	movw	r30, r24
     c42:	dc 01       	movw	r26, r24
     c44:	0d 90       	ld	r0, X+
     c46:	00 20       	and	r0, r0
     c48:	e9 f7       	brne	.-6      	; 0xc44 <USART1_sendStr+0x10>
     c4a:	11 97       	sbiw	r26, 0x01	; 1
     c4c:	7d 01       	movw	r14, r26
     c4e:	e8 1a       	sub	r14, r24
     c50:	f9 0a       	sbc	r15, r25
     c52:	1e 14       	cp	r1, r14
     c54:	1f 04       	cpc	r1, r15
     c56:	9c f4       	brge	.+38     	; 0xc7e <USART1_sendStr+0x4a>
     c58:	80 81       	ld	r24, Z
     c5a:	88 23       	and	r24, r24
     c5c:	81 f0       	breq	.+32     	; 0xc7e <USART1_sendStr+0x4a>
     c5e:	8f 01       	movw	r16, r30
     c60:	0f 5f       	subi	r16, 0xFF	; 255
     c62:	1f 4f       	sbci	r17, 0xFF	; 255
     c64:	c0 e0       	ldi	r28, 0x00	; 0
     c66:	d0 e0       	ldi	r29, 0x00	; 0
     c68:	05 c0       	rjmp	.+10     	; 0xc74 <USART1_sendStr+0x40>
     c6a:	f8 01       	movw	r30, r16
     c6c:	81 91       	ld	r24, Z+
     c6e:	8f 01       	movw	r16, r30
     c70:	88 23       	and	r24, r24
     c72:	29 f0       	breq	.+10     	; 0xc7e <USART1_sendStr+0x4a>
     c74:	d7 df       	rcall	.-82     	; 0xc24 <USART1_sendChar>
     c76:	21 96       	adiw	r28, 0x01	; 1
     c78:	ec 16       	cp	r14, r28
     c7a:	fd 06       	cpc	r15, r29
     c7c:	b1 f7       	brne	.-20     	; 0xc6a <USART1_sendStr+0x36>
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	1f 91       	pop	r17
     c84:	0f 91       	pop	r16
     c86:	ff 90       	pop	r15
     c88:	ef 90       	pop	r14
     c8a:	08 95       	ret

00000c8c <USART1_receiveChar>:
     c8c:	eb e9       	ldi	r30, 0x9B	; 155
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	88 23       	and	r24, r24
     c94:	ec f7       	brge	.-6      	; 0xc90 <USART1_receiveChar+0x4>
     c96:	80 91 9c 00 	lds	r24, 0x009C
     c9a:	08 95       	ret

00000c9c <USART0_sendChar>:
     c9c:	5d 9b       	sbis	0x0b, 5	; 11
     c9e:	fe cf       	rjmp	.-4      	; 0xc9c <USART0_sendChar>
     ca0:	8c b9       	out	0x0c, r24	; 12
     ca2:	08 95       	ret

00000ca4 <USART0_receiveChar>:
/************************************************************************/
/* USART RECEIVE CHAR                                                   */
/************************************************************************/
char USART0_receiveChar(void){
	//wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );	// do nothing
     ca4:	5f 9b       	sbis	0x0b, 7	; 11
     ca6:	fe cf       	rjmp	.-4      	; 0xca4 <USART0_receiveChar>
	
	return UDR0;
     ca8:	8c b1       	in	r24, 0x0c	; 12
}
     caa:	08 95       	ret

00000cac <__subsf3>:
     cac:	50 58       	subi	r21, 0x80	; 128

00000cae <__addsf3>:
     cae:	bb 27       	eor	r27, r27
     cb0:	aa 27       	eor	r26, r26
     cb2:	0e d0       	rcall	.+28     	; 0xcd0 <__addsf3x>
     cb4:	0d c1       	rjmp	.+538    	; 0xed0 <__fp_round>
     cb6:	fe d0       	rcall	.+508    	; 0xeb4 <__fp_pscA>
     cb8:	30 f0       	brcs	.+12     	; 0xcc6 <__addsf3+0x18>
     cba:	03 d1       	rcall	.+518    	; 0xec2 <__fp_pscB>
     cbc:	20 f0       	brcs	.+8      	; 0xcc6 <__addsf3+0x18>
     cbe:	31 f4       	brne	.+12     	; 0xccc <__addsf3+0x1e>
     cc0:	9f 3f       	cpi	r25, 0xFF	; 255
     cc2:	11 f4       	brne	.+4      	; 0xcc8 <__addsf3+0x1a>
     cc4:	1e f4       	brtc	.+6      	; 0xccc <__addsf3+0x1e>
     cc6:	f3 c0       	rjmp	.+486    	; 0xeae <__fp_nan>
     cc8:	0e f4       	brtc	.+2      	; 0xccc <__addsf3+0x1e>
     cca:	e0 95       	com	r30
     ccc:	e7 fb       	bst	r30, 7
     cce:	e9 c0       	rjmp	.+466    	; 0xea2 <__fp_inf>

00000cd0 <__addsf3x>:
     cd0:	e9 2f       	mov	r30, r25
     cd2:	0f d1       	rcall	.+542    	; 0xef2 <__fp_split3>
     cd4:	80 f3       	brcs	.-32     	; 0xcb6 <__addsf3+0x8>
     cd6:	ba 17       	cp	r27, r26
     cd8:	62 07       	cpc	r22, r18
     cda:	73 07       	cpc	r23, r19
     cdc:	84 07       	cpc	r24, r20
     cde:	95 07       	cpc	r25, r21
     ce0:	18 f0       	brcs	.+6      	; 0xce8 <__addsf3x+0x18>
     ce2:	71 f4       	brne	.+28     	; 0xd00 <__addsf3x+0x30>
     ce4:	9e f5       	brtc	.+102    	; 0xd4c <__addsf3x+0x7c>
     ce6:	27 c1       	rjmp	.+590    	; 0xf36 <__fp_zero>
     ce8:	0e f4       	brtc	.+2      	; 0xcec <__addsf3x+0x1c>
     cea:	e0 95       	com	r30
     cec:	0b 2e       	mov	r0, r27
     cee:	ba 2f       	mov	r27, r26
     cf0:	a0 2d       	mov	r26, r0
     cf2:	0b 01       	movw	r0, r22
     cf4:	b9 01       	movw	r22, r18
     cf6:	90 01       	movw	r18, r0
     cf8:	0c 01       	movw	r0, r24
     cfa:	ca 01       	movw	r24, r20
     cfc:	a0 01       	movw	r20, r0
     cfe:	11 24       	eor	r1, r1
     d00:	ff 27       	eor	r31, r31
     d02:	59 1b       	sub	r21, r25
     d04:	99 f0       	breq	.+38     	; 0xd2c <__addsf3x+0x5c>
     d06:	59 3f       	cpi	r21, 0xF9	; 249
     d08:	50 f4       	brcc	.+20     	; 0xd1e <__addsf3x+0x4e>
     d0a:	50 3e       	cpi	r21, 0xE0	; 224
     d0c:	68 f1       	brcs	.+90     	; 0xd68 <__addsf3x+0x98>
     d0e:	1a 16       	cp	r1, r26
     d10:	f0 40       	sbci	r31, 0x00	; 0
     d12:	a2 2f       	mov	r26, r18
     d14:	23 2f       	mov	r18, r19
     d16:	34 2f       	mov	r19, r20
     d18:	44 27       	eor	r20, r20
     d1a:	58 5f       	subi	r21, 0xF8	; 248
     d1c:	f3 cf       	rjmp	.-26     	; 0xd04 <__addsf3x+0x34>
     d1e:	46 95       	lsr	r20
     d20:	37 95       	ror	r19
     d22:	27 95       	ror	r18
     d24:	a7 95       	ror	r26
     d26:	f0 40       	sbci	r31, 0x00	; 0
     d28:	53 95       	inc	r21
     d2a:	c9 f7       	brne	.-14     	; 0xd1e <__addsf3x+0x4e>
     d2c:	7e f4       	brtc	.+30     	; 0xd4c <__addsf3x+0x7c>
     d2e:	1f 16       	cp	r1, r31
     d30:	ba 0b       	sbc	r27, r26
     d32:	62 0b       	sbc	r22, r18
     d34:	73 0b       	sbc	r23, r19
     d36:	84 0b       	sbc	r24, r20
     d38:	ba f0       	brmi	.+46     	; 0xd68 <__addsf3x+0x98>
     d3a:	91 50       	subi	r25, 0x01	; 1
     d3c:	a1 f0       	breq	.+40     	; 0xd66 <__addsf3x+0x96>
     d3e:	ff 0f       	add	r31, r31
     d40:	bb 1f       	adc	r27, r27
     d42:	66 1f       	adc	r22, r22
     d44:	77 1f       	adc	r23, r23
     d46:	88 1f       	adc	r24, r24
     d48:	c2 f7       	brpl	.-16     	; 0xd3a <__addsf3x+0x6a>
     d4a:	0e c0       	rjmp	.+28     	; 0xd68 <__addsf3x+0x98>
     d4c:	ba 0f       	add	r27, r26
     d4e:	62 1f       	adc	r22, r18
     d50:	73 1f       	adc	r23, r19
     d52:	84 1f       	adc	r24, r20
     d54:	48 f4       	brcc	.+18     	; 0xd68 <__addsf3x+0x98>
     d56:	87 95       	ror	r24
     d58:	77 95       	ror	r23
     d5a:	67 95       	ror	r22
     d5c:	b7 95       	ror	r27
     d5e:	f7 95       	ror	r31
     d60:	9e 3f       	cpi	r25, 0xFE	; 254
     d62:	08 f0       	brcs	.+2      	; 0xd66 <__addsf3x+0x96>
     d64:	b3 cf       	rjmp	.-154    	; 0xccc <__addsf3+0x1e>
     d66:	93 95       	inc	r25
     d68:	88 0f       	add	r24, r24
     d6a:	08 f0       	brcs	.+2      	; 0xd6e <__addsf3x+0x9e>
     d6c:	99 27       	eor	r25, r25
     d6e:	ee 0f       	add	r30, r30
     d70:	97 95       	ror	r25
     d72:	87 95       	ror	r24
     d74:	08 95       	ret

00000d76 <__cmpsf2>:
     d76:	71 d0       	rcall	.+226    	; 0xe5a <__fp_cmp>
     d78:	08 f4       	brcc	.+2      	; 0xd7c <__cmpsf2+0x6>
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	08 95       	ret

00000d7e <__fixsfsi>:
     d7e:	04 d0       	rcall	.+8      	; 0xd88 <__fixunssfsi>
     d80:	68 94       	set
     d82:	b1 11       	cpse	r27, r1
     d84:	d9 c0       	rjmp	.+434    	; 0xf38 <__fp_szero>
     d86:	08 95       	ret

00000d88 <__fixunssfsi>:
     d88:	bc d0       	rcall	.+376    	; 0xf02 <__fp_splitA>
     d8a:	88 f0       	brcs	.+34     	; 0xdae <__fixunssfsi+0x26>
     d8c:	9f 57       	subi	r25, 0x7F	; 127
     d8e:	90 f0       	brcs	.+36     	; 0xdb4 <__fixunssfsi+0x2c>
     d90:	b9 2f       	mov	r27, r25
     d92:	99 27       	eor	r25, r25
     d94:	b7 51       	subi	r27, 0x17	; 23
     d96:	a0 f0       	brcs	.+40     	; 0xdc0 <__fixunssfsi+0x38>
     d98:	d1 f0       	breq	.+52     	; 0xdce <__fixunssfsi+0x46>
     d9a:	66 0f       	add	r22, r22
     d9c:	77 1f       	adc	r23, r23
     d9e:	88 1f       	adc	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	1a f0       	brmi	.+6      	; 0xdaa <__fixunssfsi+0x22>
     da4:	ba 95       	dec	r27
     da6:	c9 f7       	brne	.-14     	; 0xd9a <__fixunssfsi+0x12>
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__fixunssfsi+0x46>
     daa:	b1 30       	cpi	r27, 0x01	; 1
     dac:	81 f0       	breq	.+32     	; 0xdce <__fixunssfsi+0x46>
     dae:	c3 d0       	rcall	.+390    	; 0xf36 <__fp_zero>
     db0:	b1 e0       	ldi	r27, 0x01	; 1
     db2:	08 95       	ret
     db4:	c0 c0       	rjmp	.+384    	; 0xf36 <__fp_zero>
     db6:	67 2f       	mov	r22, r23
     db8:	78 2f       	mov	r23, r24
     dba:	88 27       	eor	r24, r24
     dbc:	b8 5f       	subi	r27, 0xF8	; 248
     dbe:	39 f0       	breq	.+14     	; 0xdce <__fixunssfsi+0x46>
     dc0:	b9 3f       	cpi	r27, 0xF9	; 249
     dc2:	cc f3       	brlt	.-14     	; 0xdb6 <__fixunssfsi+0x2e>
     dc4:	86 95       	lsr	r24
     dc6:	77 95       	ror	r23
     dc8:	67 95       	ror	r22
     dca:	b3 95       	inc	r27
     dcc:	d9 f7       	brne	.-10     	; 0xdc4 <__fixunssfsi+0x3c>
     dce:	3e f4       	brtc	.+14     	; 0xdde <__fixunssfsi+0x56>
     dd0:	90 95       	com	r25
     dd2:	80 95       	com	r24
     dd4:	70 95       	com	r23
     dd6:	61 95       	neg	r22
     dd8:	7f 4f       	sbci	r23, 0xFF	; 255
     dda:	8f 4f       	sbci	r24, 0xFF	; 255
     ddc:	9f 4f       	sbci	r25, 0xFF	; 255
     dde:	08 95       	ret

00000de0 <__floatunsisf>:
     de0:	e8 94       	clt
     de2:	09 c0       	rjmp	.+18     	; 0xdf6 <__floatsisf+0x12>

00000de4 <__floatsisf>:
     de4:	97 fb       	bst	r25, 7
     de6:	3e f4       	brtc	.+14     	; 0xdf6 <__floatsisf+0x12>
     de8:	90 95       	com	r25
     dea:	80 95       	com	r24
     dec:	70 95       	com	r23
     dee:	61 95       	neg	r22
     df0:	7f 4f       	sbci	r23, 0xFF	; 255
     df2:	8f 4f       	sbci	r24, 0xFF	; 255
     df4:	9f 4f       	sbci	r25, 0xFF	; 255
     df6:	99 23       	and	r25, r25
     df8:	a9 f0       	breq	.+42     	; 0xe24 <__floatsisf+0x40>
     dfa:	f9 2f       	mov	r31, r25
     dfc:	96 e9       	ldi	r25, 0x96	; 150
     dfe:	bb 27       	eor	r27, r27
     e00:	93 95       	inc	r25
     e02:	f6 95       	lsr	r31
     e04:	87 95       	ror	r24
     e06:	77 95       	ror	r23
     e08:	67 95       	ror	r22
     e0a:	b7 95       	ror	r27
     e0c:	f1 11       	cpse	r31, r1
     e0e:	f8 cf       	rjmp	.-16     	; 0xe00 <__floatsisf+0x1c>
     e10:	fa f4       	brpl	.+62     	; 0xe50 <__floatsisf+0x6c>
     e12:	bb 0f       	add	r27, r27
     e14:	11 f4       	brne	.+4      	; 0xe1a <__floatsisf+0x36>
     e16:	60 ff       	sbrs	r22, 0
     e18:	1b c0       	rjmp	.+54     	; 0xe50 <__floatsisf+0x6c>
     e1a:	6f 5f       	subi	r22, 0xFF	; 255
     e1c:	7f 4f       	sbci	r23, 0xFF	; 255
     e1e:	8f 4f       	sbci	r24, 0xFF	; 255
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
     e22:	16 c0       	rjmp	.+44     	; 0xe50 <__floatsisf+0x6c>
     e24:	88 23       	and	r24, r24
     e26:	11 f0       	breq	.+4      	; 0xe2c <__floatsisf+0x48>
     e28:	96 e9       	ldi	r25, 0x96	; 150
     e2a:	11 c0       	rjmp	.+34     	; 0xe4e <__floatsisf+0x6a>
     e2c:	77 23       	and	r23, r23
     e2e:	21 f0       	breq	.+8      	; 0xe38 <__floatsisf+0x54>
     e30:	9e e8       	ldi	r25, 0x8E	; 142
     e32:	87 2f       	mov	r24, r23
     e34:	76 2f       	mov	r23, r22
     e36:	05 c0       	rjmp	.+10     	; 0xe42 <__floatsisf+0x5e>
     e38:	66 23       	and	r22, r22
     e3a:	71 f0       	breq	.+28     	; 0xe58 <__floatsisf+0x74>
     e3c:	96 e8       	ldi	r25, 0x86	; 134
     e3e:	86 2f       	mov	r24, r22
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	2a f0       	brmi	.+10     	; 0xe50 <__floatsisf+0x6c>
     e46:	9a 95       	dec	r25
     e48:	66 0f       	add	r22, r22
     e4a:	77 1f       	adc	r23, r23
     e4c:	88 1f       	adc	r24, r24
     e4e:	da f7       	brpl	.-10     	; 0xe46 <__floatsisf+0x62>
     e50:	88 0f       	add	r24, r24
     e52:	96 95       	lsr	r25
     e54:	87 95       	ror	r24
     e56:	97 f9       	bld	r25, 7
     e58:	08 95       	ret

00000e5a <__fp_cmp>:
     e5a:	99 0f       	add	r25, r25
     e5c:	00 08       	sbc	r0, r0
     e5e:	55 0f       	add	r21, r21
     e60:	aa 0b       	sbc	r26, r26
     e62:	e0 e8       	ldi	r30, 0x80	; 128
     e64:	fe ef       	ldi	r31, 0xFE	; 254
     e66:	16 16       	cp	r1, r22
     e68:	17 06       	cpc	r1, r23
     e6a:	e8 07       	cpc	r30, r24
     e6c:	f9 07       	cpc	r31, r25
     e6e:	c0 f0       	brcs	.+48     	; 0xea0 <__fp_cmp+0x46>
     e70:	12 16       	cp	r1, r18
     e72:	13 06       	cpc	r1, r19
     e74:	e4 07       	cpc	r30, r20
     e76:	f5 07       	cpc	r31, r21
     e78:	98 f0       	brcs	.+38     	; 0xea0 <__fp_cmp+0x46>
     e7a:	62 1b       	sub	r22, r18
     e7c:	73 0b       	sbc	r23, r19
     e7e:	84 0b       	sbc	r24, r20
     e80:	95 0b       	sbc	r25, r21
     e82:	39 f4       	brne	.+14     	; 0xe92 <__fp_cmp+0x38>
     e84:	0a 26       	eor	r0, r26
     e86:	61 f0       	breq	.+24     	; 0xea0 <__fp_cmp+0x46>
     e88:	23 2b       	or	r18, r19
     e8a:	24 2b       	or	r18, r20
     e8c:	25 2b       	or	r18, r21
     e8e:	21 f4       	brne	.+8      	; 0xe98 <__fp_cmp+0x3e>
     e90:	08 95       	ret
     e92:	0a 26       	eor	r0, r26
     e94:	09 f4       	brne	.+2      	; 0xe98 <__fp_cmp+0x3e>
     e96:	a1 40       	sbci	r26, 0x01	; 1
     e98:	a6 95       	lsr	r26
     e9a:	8f ef       	ldi	r24, 0xFF	; 255
     e9c:	81 1d       	adc	r24, r1
     e9e:	81 1d       	adc	r24, r1
     ea0:	08 95       	ret

00000ea2 <__fp_inf>:
     ea2:	97 f9       	bld	r25, 7
     ea4:	9f 67       	ori	r25, 0x7F	; 127
     ea6:	80 e8       	ldi	r24, 0x80	; 128
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	08 95       	ret

00000eae <__fp_nan>:
     eae:	9f ef       	ldi	r25, 0xFF	; 255
     eb0:	80 ec       	ldi	r24, 0xC0	; 192
     eb2:	08 95       	ret

00000eb4 <__fp_pscA>:
     eb4:	00 24       	eor	r0, r0
     eb6:	0a 94       	dec	r0
     eb8:	16 16       	cp	r1, r22
     eba:	17 06       	cpc	r1, r23
     ebc:	18 06       	cpc	r1, r24
     ebe:	09 06       	cpc	r0, r25
     ec0:	08 95       	ret

00000ec2 <__fp_pscB>:
     ec2:	00 24       	eor	r0, r0
     ec4:	0a 94       	dec	r0
     ec6:	12 16       	cp	r1, r18
     ec8:	13 06       	cpc	r1, r19
     eca:	14 06       	cpc	r1, r20
     ecc:	05 06       	cpc	r0, r21
     ece:	08 95       	ret

00000ed0 <__fp_round>:
     ed0:	09 2e       	mov	r0, r25
     ed2:	03 94       	inc	r0
     ed4:	00 0c       	add	r0, r0
     ed6:	11 f4       	brne	.+4      	; 0xedc <__fp_round+0xc>
     ed8:	88 23       	and	r24, r24
     eda:	52 f0       	brmi	.+20     	; 0xef0 <__fp_round+0x20>
     edc:	bb 0f       	add	r27, r27
     ede:	40 f4       	brcc	.+16     	; 0xef0 <__fp_round+0x20>
     ee0:	bf 2b       	or	r27, r31
     ee2:	11 f4       	brne	.+4      	; 0xee8 <__fp_round+0x18>
     ee4:	60 ff       	sbrs	r22, 0
     ee6:	04 c0       	rjmp	.+8      	; 0xef0 <__fp_round+0x20>
     ee8:	6f 5f       	subi	r22, 0xFF	; 255
     eea:	7f 4f       	sbci	r23, 0xFF	; 255
     eec:	8f 4f       	sbci	r24, 0xFF	; 255
     eee:	9f 4f       	sbci	r25, 0xFF	; 255
     ef0:	08 95       	ret

00000ef2 <__fp_split3>:
     ef2:	57 fd       	sbrc	r21, 7
     ef4:	90 58       	subi	r25, 0x80	; 128
     ef6:	44 0f       	add	r20, r20
     ef8:	55 1f       	adc	r21, r21
     efa:	59 f0       	breq	.+22     	; 0xf12 <__fp_splitA+0x10>
     efc:	5f 3f       	cpi	r21, 0xFF	; 255
     efe:	71 f0       	breq	.+28     	; 0xf1c <__fp_splitA+0x1a>
     f00:	47 95       	ror	r20

00000f02 <__fp_splitA>:
     f02:	88 0f       	add	r24, r24
     f04:	97 fb       	bst	r25, 7
     f06:	99 1f       	adc	r25, r25
     f08:	61 f0       	breq	.+24     	; 0xf22 <__fp_splitA+0x20>
     f0a:	9f 3f       	cpi	r25, 0xFF	; 255
     f0c:	79 f0       	breq	.+30     	; 0xf2c <__fp_splitA+0x2a>
     f0e:	87 95       	ror	r24
     f10:	08 95       	ret
     f12:	12 16       	cp	r1, r18
     f14:	13 06       	cpc	r1, r19
     f16:	14 06       	cpc	r1, r20
     f18:	55 1f       	adc	r21, r21
     f1a:	f2 cf       	rjmp	.-28     	; 0xf00 <__fp_split3+0xe>
     f1c:	46 95       	lsr	r20
     f1e:	f1 df       	rcall	.-30     	; 0xf02 <__fp_splitA>
     f20:	08 c0       	rjmp	.+16     	; 0xf32 <__fp_splitA+0x30>
     f22:	16 16       	cp	r1, r22
     f24:	17 06       	cpc	r1, r23
     f26:	18 06       	cpc	r1, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	f1 cf       	rjmp	.-30     	; 0xf0e <__fp_splitA+0xc>
     f2c:	86 95       	lsr	r24
     f2e:	71 05       	cpc	r23, r1
     f30:	61 05       	cpc	r22, r1
     f32:	08 94       	sec
     f34:	08 95       	ret

00000f36 <__fp_zero>:
     f36:	e8 94       	clt

00000f38 <__fp_szero>:
     f38:	bb 27       	eor	r27, r27
     f3a:	66 27       	eor	r22, r22
     f3c:	77 27       	eor	r23, r23
     f3e:	cb 01       	movw	r24, r22
     f40:	97 f9       	bld	r25, 7
     f42:	08 95       	ret

00000f44 <__gesf2>:
     f44:	8a df       	rcall	.-236    	; 0xe5a <__fp_cmp>
     f46:	08 f4       	brcc	.+2      	; 0xf4a <__gesf2+0x6>
     f48:	8f ef       	ldi	r24, 0xFF	; 255
     f4a:	08 95       	ret

00000f4c <__mulsf3>:
     f4c:	0b d0       	rcall	.+22     	; 0xf64 <__mulsf3x>
     f4e:	c0 cf       	rjmp	.-128    	; 0xed0 <__fp_round>
     f50:	b1 df       	rcall	.-158    	; 0xeb4 <__fp_pscA>
     f52:	28 f0       	brcs	.+10     	; 0xf5e <__mulsf3+0x12>
     f54:	b6 df       	rcall	.-148    	; 0xec2 <__fp_pscB>
     f56:	18 f0       	brcs	.+6      	; 0xf5e <__mulsf3+0x12>
     f58:	95 23       	and	r25, r21
     f5a:	09 f0       	breq	.+2      	; 0xf5e <__mulsf3+0x12>
     f5c:	a2 cf       	rjmp	.-188    	; 0xea2 <__fp_inf>
     f5e:	a7 cf       	rjmp	.-178    	; 0xeae <__fp_nan>
     f60:	11 24       	eor	r1, r1
     f62:	ea cf       	rjmp	.-44     	; 0xf38 <__fp_szero>

00000f64 <__mulsf3x>:
     f64:	c6 df       	rcall	.-116    	; 0xef2 <__fp_split3>
     f66:	a0 f3       	brcs	.-24     	; 0xf50 <__mulsf3+0x4>

00000f68 <__mulsf3_pse>:
     f68:	95 9f       	mul	r25, r21
     f6a:	d1 f3       	breq	.-12     	; 0xf60 <__mulsf3+0x14>
     f6c:	95 0f       	add	r25, r21
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	55 1f       	adc	r21, r21
     f72:	62 9f       	mul	r22, r18
     f74:	f0 01       	movw	r30, r0
     f76:	72 9f       	mul	r23, r18
     f78:	bb 27       	eor	r27, r27
     f7a:	f0 0d       	add	r31, r0
     f7c:	b1 1d       	adc	r27, r1
     f7e:	63 9f       	mul	r22, r19
     f80:	aa 27       	eor	r26, r26
     f82:	f0 0d       	add	r31, r0
     f84:	b1 1d       	adc	r27, r1
     f86:	aa 1f       	adc	r26, r26
     f88:	64 9f       	mul	r22, r20
     f8a:	66 27       	eor	r22, r22
     f8c:	b0 0d       	add	r27, r0
     f8e:	a1 1d       	adc	r26, r1
     f90:	66 1f       	adc	r22, r22
     f92:	82 9f       	mul	r24, r18
     f94:	22 27       	eor	r18, r18
     f96:	b0 0d       	add	r27, r0
     f98:	a1 1d       	adc	r26, r1
     f9a:	62 1f       	adc	r22, r18
     f9c:	73 9f       	mul	r23, r19
     f9e:	b0 0d       	add	r27, r0
     fa0:	a1 1d       	adc	r26, r1
     fa2:	62 1f       	adc	r22, r18
     fa4:	83 9f       	mul	r24, r19
     fa6:	a0 0d       	add	r26, r0
     fa8:	61 1d       	adc	r22, r1
     faa:	22 1f       	adc	r18, r18
     fac:	74 9f       	mul	r23, r20
     fae:	33 27       	eor	r19, r19
     fb0:	a0 0d       	add	r26, r0
     fb2:	61 1d       	adc	r22, r1
     fb4:	23 1f       	adc	r18, r19
     fb6:	84 9f       	mul	r24, r20
     fb8:	60 0d       	add	r22, r0
     fba:	21 1d       	adc	r18, r1
     fbc:	82 2f       	mov	r24, r18
     fbe:	76 2f       	mov	r23, r22
     fc0:	6a 2f       	mov	r22, r26
     fc2:	11 24       	eor	r1, r1
     fc4:	9f 57       	subi	r25, 0x7F	; 127
     fc6:	50 40       	sbci	r21, 0x00	; 0
     fc8:	8a f0       	brmi	.+34     	; 0xfec <__mulsf3_pse+0x84>
     fca:	e1 f0       	breq	.+56     	; 0x1004 <__mulsf3_pse+0x9c>
     fcc:	88 23       	and	r24, r24
     fce:	4a f0       	brmi	.+18     	; 0xfe2 <__mulsf3_pse+0x7a>
     fd0:	ee 0f       	add	r30, r30
     fd2:	ff 1f       	adc	r31, r31
     fd4:	bb 1f       	adc	r27, r27
     fd6:	66 1f       	adc	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	88 1f       	adc	r24, r24
     fdc:	91 50       	subi	r25, 0x01	; 1
     fde:	50 40       	sbci	r21, 0x00	; 0
     fe0:	a9 f7       	brne	.-22     	; 0xfcc <__mulsf3_pse+0x64>
     fe2:	9e 3f       	cpi	r25, 0xFE	; 254
     fe4:	51 05       	cpc	r21, r1
     fe6:	70 f0       	brcs	.+28     	; 0x1004 <__mulsf3_pse+0x9c>
     fe8:	5c cf       	rjmp	.-328    	; 0xea2 <__fp_inf>
     fea:	a6 cf       	rjmp	.-180    	; 0xf38 <__fp_szero>
     fec:	5f 3f       	cpi	r21, 0xFF	; 255
     fee:	ec f3       	brlt	.-6      	; 0xfea <__mulsf3_pse+0x82>
     ff0:	98 3e       	cpi	r25, 0xE8	; 232
     ff2:	dc f3       	brlt	.-10     	; 0xfea <__mulsf3_pse+0x82>
     ff4:	86 95       	lsr	r24
     ff6:	77 95       	ror	r23
     ff8:	67 95       	ror	r22
     ffa:	b7 95       	ror	r27
     ffc:	f7 95       	ror	r31
     ffe:	e7 95       	ror	r30
    1000:	9f 5f       	subi	r25, 0xFF	; 255
    1002:	c1 f7       	brne	.-16     	; 0xff4 <__mulsf3_pse+0x8c>
    1004:	fe 2b       	or	r31, r30
    1006:	88 0f       	add	r24, r24
    1008:	91 1d       	adc	r25, r1
    100a:	96 95       	lsr	r25
    100c:	87 95       	ror	r24
    100e:	97 f9       	bld	r25, 7
    1010:	08 95       	ret

00001012 <__udivmodhi4>:
    1012:	aa 1b       	sub	r26, r26
    1014:	bb 1b       	sub	r27, r27
    1016:	51 e1       	ldi	r21, 0x11	; 17
    1018:	07 c0       	rjmp	.+14     	; 0x1028 <__udivmodhi4_ep>

0000101a <__udivmodhi4_loop>:
    101a:	aa 1f       	adc	r26, r26
    101c:	bb 1f       	adc	r27, r27
    101e:	a6 17       	cp	r26, r22
    1020:	b7 07       	cpc	r27, r23
    1022:	10 f0       	brcs	.+4      	; 0x1028 <__udivmodhi4_ep>
    1024:	a6 1b       	sub	r26, r22
    1026:	b7 0b       	sbc	r27, r23

00001028 <__udivmodhi4_ep>:
    1028:	88 1f       	adc	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	5a 95       	dec	r21
    102e:	a9 f7       	brne	.-22     	; 0x101a <__udivmodhi4_loop>
    1030:	80 95       	com	r24
    1032:	90 95       	com	r25
    1034:	bc 01       	movw	r22, r24
    1036:	cd 01       	movw	r24, r26
    1038:	08 95       	ret

0000103a <sprintf>:
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	2e 97       	sbiw	r28, 0x0e	; 14
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	0d 89       	ldd	r16, Y+21	; 0x15
    1054:	1e 89       	ldd	r17, Y+22	; 0x16
    1056:	86 e0       	ldi	r24, 0x06	; 6
    1058:	8c 83       	std	Y+4, r24	; 0x04
    105a:	1a 83       	std	Y+2, r17	; 0x02
    105c:	09 83       	std	Y+1, r16	; 0x01
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	9f e7       	ldi	r25, 0x7F	; 127
    1062:	9e 83       	std	Y+6, r25	; 0x06
    1064:	8d 83       	std	Y+5, r24	; 0x05
    1066:	ae 01       	movw	r20, r28
    1068:	47 5e       	subi	r20, 0xE7	; 231
    106a:	5f 4f       	sbci	r21, 0xFF	; 255
    106c:	6f 89       	ldd	r22, Y+23	; 0x17
    106e:	78 8d       	ldd	r23, Y+24	; 0x18
    1070:	ce 01       	movw	r24, r28
    1072:	01 96       	adiw	r24, 0x01	; 1
    1074:	10 d0       	rcall	.+32     	; 0x1096 <vfprintf>
    1076:	ef 81       	ldd	r30, Y+7	; 0x07
    1078:	f8 85       	ldd	r31, Y+8	; 0x08
    107a:	e0 0f       	add	r30, r16
    107c:	f1 1f       	adc	r31, r17
    107e:	10 82       	st	Z, r1
    1080:	2e 96       	adiw	r28, 0x0e	; 14
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	08 95       	ret

00001096 <vfprintf>:
    1096:	2f 92       	push	r2
    1098:	3f 92       	push	r3
    109a:	4f 92       	push	r4
    109c:	5f 92       	push	r5
    109e:	6f 92       	push	r6
    10a0:	7f 92       	push	r7
    10a2:	8f 92       	push	r8
    10a4:	9f 92       	push	r9
    10a6:	af 92       	push	r10
    10a8:	bf 92       	push	r11
    10aa:	cf 92       	push	r12
    10ac:	df 92       	push	r13
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	2c 97       	sbiw	r28, 0x0c	; 12
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	7c 01       	movw	r14, r24
    10cc:	6b 01       	movw	r12, r22
    10ce:	8a 01       	movw	r16, r20
    10d0:	fc 01       	movw	r30, r24
    10d2:	17 82       	std	Z+7, r1	; 0x07
    10d4:	16 82       	std	Z+6, r1	; 0x06
    10d6:	83 81       	ldd	r24, Z+3	; 0x03
    10d8:	81 ff       	sbrs	r24, 1
    10da:	b0 c1       	rjmp	.+864    	; 0x143c <__stack+0x33d>
    10dc:	ce 01       	movw	r24, r28
    10de:	01 96       	adiw	r24, 0x01	; 1
    10e0:	4c 01       	movw	r8, r24
    10e2:	f7 01       	movw	r30, r14
    10e4:	93 81       	ldd	r25, Z+3	; 0x03
    10e6:	f6 01       	movw	r30, r12
    10e8:	93 fd       	sbrc	r25, 3
    10ea:	85 91       	lpm	r24, Z+
    10ec:	93 ff       	sbrs	r25, 3
    10ee:	81 91       	ld	r24, Z+
    10f0:	6f 01       	movw	r12, r30
    10f2:	88 23       	and	r24, r24
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <vfprintf+0x62>
    10f6:	9e c1       	rjmp	.+828    	; 0x1434 <__stack+0x335>
    10f8:	85 32       	cpi	r24, 0x25	; 37
    10fa:	39 f4       	brne	.+14     	; 0x110a <__stack+0xb>
    10fc:	93 fd       	sbrc	r25, 3
    10fe:	85 91       	lpm	r24, Z+
    1100:	93 ff       	sbrs	r25, 3
    1102:	81 91       	ld	r24, Z+
    1104:	6f 01       	movw	r12, r30
    1106:	85 32       	cpi	r24, 0x25	; 37
    1108:	21 f4       	brne	.+8      	; 0x1112 <__stack+0x13>
    110a:	b7 01       	movw	r22, r14
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	dd d1       	rcall	.+954    	; 0x14ca <fputc>
    1110:	e8 cf       	rjmp	.-48     	; 0x10e2 <vfprintf+0x4c>
    1112:	51 2c       	mov	r5, r1
    1114:	31 2c       	mov	r3, r1
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	20 32       	cpi	r18, 0x20	; 32
    111a:	a0 f4       	brcc	.+40     	; 0x1144 <__stack+0x45>
    111c:	8b 32       	cpi	r24, 0x2B	; 43
    111e:	69 f0       	breq	.+26     	; 0x113a <__stack+0x3b>
    1120:	30 f4       	brcc	.+12     	; 0x112e <__stack+0x2f>
    1122:	80 32       	cpi	r24, 0x20	; 32
    1124:	59 f0       	breq	.+22     	; 0x113c <__stack+0x3d>
    1126:	83 32       	cpi	r24, 0x23	; 35
    1128:	69 f4       	brne	.+26     	; 0x1144 <__stack+0x45>
    112a:	20 61       	ori	r18, 0x10	; 16
    112c:	2c c0       	rjmp	.+88     	; 0x1186 <__stack+0x87>
    112e:	8d 32       	cpi	r24, 0x2D	; 45
    1130:	39 f0       	breq	.+14     	; 0x1140 <__stack+0x41>
    1132:	80 33       	cpi	r24, 0x30	; 48
    1134:	39 f4       	brne	.+14     	; 0x1144 <__stack+0x45>
    1136:	21 60       	ori	r18, 0x01	; 1
    1138:	26 c0       	rjmp	.+76     	; 0x1186 <__stack+0x87>
    113a:	22 60       	ori	r18, 0x02	; 2
    113c:	24 60       	ori	r18, 0x04	; 4
    113e:	23 c0       	rjmp	.+70     	; 0x1186 <__stack+0x87>
    1140:	28 60       	ori	r18, 0x08	; 8
    1142:	21 c0       	rjmp	.+66     	; 0x1186 <__stack+0x87>
    1144:	27 fd       	sbrc	r18, 7
    1146:	27 c0       	rjmp	.+78     	; 0x1196 <__stack+0x97>
    1148:	30 ed       	ldi	r19, 0xD0	; 208
    114a:	38 0f       	add	r19, r24
    114c:	3a 30       	cpi	r19, 0x0A	; 10
    114e:	78 f4       	brcc	.+30     	; 0x116e <__stack+0x6f>
    1150:	26 ff       	sbrs	r18, 6
    1152:	06 c0       	rjmp	.+12     	; 0x1160 <__stack+0x61>
    1154:	fa e0       	ldi	r31, 0x0A	; 10
    1156:	5f 9e       	mul	r5, r31
    1158:	30 0d       	add	r19, r0
    115a:	11 24       	eor	r1, r1
    115c:	53 2e       	mov	r5, r19
    115e:	13 c0       	rjmp	.+38     	; 0x1186 <__stack+0x87>
    1160:	8a e0       	ldi	r24, 0x0A	; 10
    1162:	38 9e       	mul	r3, r24
    1164:	30 0d       	add	r19, r0
    1166:	11 24       	eor	r1, r1
    1168:	33 2e       	mov	r3, r19
    116a:	20 62       	ori	r18, 0x20	; 32
    116c:	0c c0       	rjmp	.+24     	; 0x1186 <__stack+0x87>
    116e:	8e 32       	cpi	r24, 0x2E	; 46
    1170:	21 f4       	brne	.+8      	; 0x117a <__stack+0x7b>
    1172:	26 fd       	sbrc	r18, 6
    1174:	5f c1       	rjmp	.+702    	; 0x1434 <__stack+0x335>
    1176:	20 64       	ori	r18, 0x40	; 64
    1178:	06 c0       	rjmp	.+12     	; 0x1186 <__stack+0x87>
    117a:	8c 36       	cpi	r24, 0x6C	; 108
    117c:	11 f4       	brne	.+4      	; 0x1182 <__stack+0x83>
    117e:	20 68       	ori	r18, 0x80	; 128
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <__stack+0x87>
    1182:	88 36       	cpi	r24, 0x68	; 104
    1184:	41 f4       	brne	.+16     	; 0x1196 <__stack+0x97>
    1186:	f6 01       	movw	r30, r12
    1188:	93 fd       	sbrc	r25, 3
    118a:	85 91       	lpm	r24, Z+
    118c:	93 ff       	sbrs	r25, 3
    118e:	81 91       	ld	r24, Z+
    1190:	6f 01       	movw	r12, r30
    1192:	81 11       	cpse	r24, r1
    1194:	c1 cf       	rjmp	.-126    	; 0x1118 <__stack+0x19>
    1196:	98 2f       	mov	r25, r24
    1198:	9f 7d       	andi	r25, 0xDF	; 223
    119a:	95 54       	subi	r25, 0x45	; 69
    119c:	93 30       	cpi	r25, 0x03	; 3
    119e:	28 f4       	brcc	.+10     	; 0x11aa <__stack+0xab>
    11a0:	0c 5f       	subi	r16, 0xFC	; 252
    11a2:	1f 4f       	sbci	r17, 0xFF	; 255
    11a4:	ff e3       	ldi	r31, 0x3F	; 63
    11a6:	f9 83       	std	Y+1, r31	; 0x01
    11a8:	0d c0       	rjmp	.+26     	; 0x11c4 <__stack+0xc5>
    11aa:	83 36       	cpi	r24, 0x63	; 99
    11ac:	31 f0       	breq	.+12     	; 0x11ba <__stack+0xbb>
    11ae:	83 37       	cpi	r24, 0x73	; 115
    11b0:	71 f0       	breq	.+28     	; 0x11ce <__stack+0xcf>
    11b2:	83 35       	cpi	r24, 0x53	; 83
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <__stack+0xb9>
    11b6:	57 c0       	rjmp	.+174    	; 0x1266 <__stack+0x167>
    11b8:	21 c0       	rjmp	.+66     	; 0x11fc <__stack+0xfd>
    11ba:	f8 01       	movw	r30, r16
    11bc:	80 81       	ld	r24, Z
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	0e 5f       	subi	r16, 0xFE	; 254
    11c2:	1f 4f       	sbci	r17, 0xFF	; 255
    11c4:	44 24       	eor	r4, r4
    11c6:	43 94       	inc	r4
    11c8:	51 2c       	mov	r5, r1
    11ca:	54 01       	movw	r10, r8
    11cc:	14 c0       	rjmp	.+40     	; 0x11f6 <__stack+0xf7>
    11ce:	38 01       	movw	r6, r16
    11d0:	f2 e0       	ldi	r31, 0x02	; 2
    11d2:	6f 0e       	add	r6, r31
    11d4:	71 1c       	adc	r7, r1
    11d6:	f8 01       	movw	r30, r16
    11d8:	a0 80       	ld	r10, Z
    11da:	b1 80       	ldd	r11, Z+1	; 0x01
    11dc:	26 ff       	sbrs	r18, 6
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <__stack+0xe7>
    11e0:	65 2d       	mov	r22, r5
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <__stack+0xeb>
    11e6:	6f ef       	ldi	r22, 0xFF	; 255
    11e8:	7f ef       	ldi	r23, 0xFF	; 255
    11ea:	c5 01       	movw	r24, r10
    11ec:	2c 87       	std	Y+12, r18	; 0x0c
    11ee:	62 d1       	rcall	.+708    	; 0x14b4 <strnlen>
    11f0:	2c 01       	movw	r4, r24
    11f2:	83 01       	movw	r16, r6
    11f4:	2c 85       	ldd	r18, Y+12	; 0x0c
    11f6:	2f 77       	andi	r18, 0x7F	; 127
    11f8:	22 2e       	mov	r2, r18
    11fa:	16 c0       	rjmp	.+44     	; 0x1228 <__stack+0x129>
    11fc:	38 01       	movw	r6, r16
    11fe:	f2 e0       	ldi	r31, 0x02	; 2
    1200:	6f 0e       	add	r6, r31
    1202:	71 1c       	adc	r7, r1
    1204:	f8 01       	movw	r30, r16
    1206:	a0 80       	ld	r10, Z
    1208:	b1 80       	ldd	r11, Z+1	; 0x01
    120a:	26 ff       	sbrs	r18, 6
    120c:	03 c0       	rjmp	.+6      	; 0x1214 <__stack+0x115>
    120e:	65 2d       	mov	r22, r5
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <__stack+0x119>
    1214:	6f ef       	ldi	r22, 0xFF	; 255
    1216:	7f ef       	ldi	r23, 0xFF	; 255
    1218:	c5 01       	movw	r24, r10
    121a:	2c 87       	std	Y+12, r18	; 0x0c
    121c:	40 d1       	rcall	.+640    	; 0x149e <strnlen_P>
    121e:	2c 01       	movw	r4, r24
    1220:	2c 85       	ldd	r18, Y+12	; 0x0c
    1222:	20 68       	ori	r18, 0x80	; 128
    1224:	22 2e       	mov	r2, r18
    1226:	83 01       	movw	r16, r6
    1228:	23 fc       	sbrc	r2, 3
    122a:	19 c0       	rjmp	.+50     	; 0x125e <__stack+0x15f>
    122c:	83 2d       	mov	r24, r3
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	48 16       	cp	r4, r24
    1232:	59 06       	cpc	r5, r25
    1234:	a0 f4       	brcc	.+40     	; 0x125e <__stack+0x15f>
    1236:	b7 01       	movw	r22, r14
    1238:	80 e2       	ldi	r24, 0x20	; 32
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	46 d1       	rcall	.+652    	; 0x14ca <fputc>
    123e:	3a 94       	dec	r3
    1240:	f5 cf       	rjmp	.-22     	; 0x122c <__stack+0x12d>
    1242:	f5 01       	movw	r30, r10
    1244:	27 fc       	sbrc	r2, 7
    1246:	85 91       	lpm	r24, Z+
    1248:	27 fe       	sbrs	r2, 7
    124a:	81 91       	ld	r24, Z+
    124c:	5f 01       	movw	r10, r30
    124e:	b7 01       	movw	r22, r14
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	3b d1       	rcall	.+630    	; 0x14ca <fputc>
    1254:	31 10       	cpse	r3, r1
    1256:	3a 94       	dec	r3
    1258:	f1 e0       	ldi	r31, 0x01	; 1
    125a:	4f 1a       	sub	r4, r31
    125c:	51 08       	sbc	r5, r1
    125e:	41 14       	cp	r4, r1
    1260:	51 04       	cpc	r5, r1
    1262:	79 f7       	brne	.-34     	; 0x1242 <__stack+0x143>
    1264:	de c0       	rjmp	.+444    	; 0x1422 <__stack+0x323>
    1266:	84 36       	cpi	r24, 0x64	; 100
    1268:	11 f0       	breq	.+4      	; 0x126e <__stack+0x16f>
    126a:	89 36       	cpi	r24, 0x69	; 105
    126c:	31 f5       	brne	.+76     	; 0x12ba <__stack+0x1bb>
    126e:	f8 01       	movw	r30, r16
    1270:	27 ff       	sbrs	r18, 7
    1272:	07 c0       	rjmp	.+14     	; 0x1282 <__stack+0x183>
    1274:	60 81       	ld	r22, Z
    1276:	71 81       	ldd	r23, Z+1	; 0x01
    1278:	82 81       	ldd	r24, Z+2	; 0x02
    127a:	93 81       	ldd	r25, Z+3	; 0x03
    127c:	0c 5f       	subi	r16, 0xFC	; 252
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
    1280:	08 c0       	rjmp	.+16     	; 0x1292 <__stack+0x193>
    1282:	60 81       	ld	r22, Z
    1284:	71 81       	ldd	r23, Z+1	; 0x01
    1286:	88 27       	eor	r24, r24
    1288:	77 fd       	sbrc	r23, 7
    128a:	80 95       	com	r24
    128c:	98 2f       	mov	r25, r24
    128e:	0e 5f       	subi	r16, 0xFE	; 254
    1290:	1f 4f       	sbci	r17, 0xFF	; 255
    1292:	2f 76       	andi	r18, 0x6F	; 111
    1294:	b2 2e       	mov	r11, r18
    1296:	97 ff       	sbrs	r25, 7
    1298:	09 c0       	rjmp	.+18     	; 0x12ac <__stack+0x1ad>
    129a:	90 95       	com	r25
    129c:	80 95       	com	r24
    129e:	70 95       	com	r23
    12a0:	61 95       	neg	r22
    12a2:	7f 4f       	sbci	r23, 0xFF	; 255
    12a4:	8f 4f       	sbci	r24, 0xFF	; 255
    12a6:	9f 4f       	sbci	r25, 0xFF	; 255
    12a8:	20 68       	ori	r18, 0x80	; 128
    12aa:	b2 2e       	mov	r11, r18
    12ac:	2a e0       	ldi	r18, 0x0A	; 10
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	a4 01       	movw	r20, r8
    12b2:	3d d1       	rcall	.+634    	; 0x152e <__ultoa_invert>
    12b4:	a8 2e       	mov	r10, r24
    12b6:	a8 18       	sub	r10, r8
    12b8:	43 c0       	rjmp	.+134    	; 0x1340 <__stack+0x241>
    12ba:	85 37       	cpi	r24, 0x75	; 117
    12bc:	29 f4       	brne	.+10     	; 0x12c8 <__stack+0x1c9>
    12be:	2f 7e       	andi	r18, 0xEF	; 239
    12c0:	b2 2e       	mov	r11, r18
    12c2:	2a e0       	ldi	r18, 0x0A	; 10
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	25 c0       	rjmp	.+74     	; 0x1312 <__stack+0x213>
    12c8:	f2 2f       	mov	r31, r18
    12ca:	f9 7f       	andi	r31, 0xF9	; 249
    12cc:	bf 2e       	mov	r11, r31
    12ce:	8f 36       	cpi	r24, 0x6F	; 111
    12d0:	c1 f0       	breq	.+48     	; 0x1302 <__stack+0x203>
    12d2:	18 f4       	brcc	.+6      	; 0x12da <__stack+0x1db>
    12d4:	88 35       	cpi	r24, 0x58	; 88
    12d6:	79 f0       	breq	.+30     	; 0x12f6 <__stack+0x1f7>
    12d8:	ad c0       	rjmp	.+346    	; 0x1434 <__stack+0x335>
    12da:	80 37       	cpi	r24, 0x70	; 112
    12dc:	19 f0       	breq	.+6      	; 0x12e4 <__stack+0x1e5>
    12de:	88 37       	cpi	r24, 0x78	; 120
    12e0:	21 f0       	breq	.+8      	; 0x12ea <__stack+0x1eb>
    12e2:	a8 c0       	rjmp	.+336    	; 0x1434 <__stack+0x335>
    12e4:	2f 2f       	mov	r18, r31
    12e6:	20 61       	ori	r18, 0x10	; 16
    12e8:	b2 2e       	mov	r11, r18
    12ea:	b4 fe       	sbrs	r11, 4
    12ec:	0d c0       	rjmp	.+26     	; 0x1308 <__stack+0x209>
    12ee:	8b 2d       	mov	r24, r11
    12f0:	84 60       	ori	r24, 0x04	; 4
    12f2:	b8 2e       	mov	r11, r24
    12f4:	09 c0       	rjmp	.+18     	; 0x1308 <__stack+0x209>
    12f6:	24 ff       	sbrs	r18, 4
    12f8:	0a c0       	rjmp	.+20     	; 0x130e <__stack+0x20f>
    12fa:	9f 2f       	mov	r25, r31
    12fc:	96 60       	ori	r25, 0x06	; 6
    12fe:	b9 2e       	mov	r11, r25
    1300:	06 c0       	rjmp	.+12     	; 0x130e <__stack+0x20f>
    1302:	28 e0       	ldi	r18, 0x08	; 8
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	05 c0       	rjmp	.+10     	; 0x1312 <__stack+0x213>
    1308:	20 e1       	ldi	r18, 0x10	; 16
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <__stack+0x213>
    130e:	20 e1       	ldi	r18, 0x10	; 16
    1310:	32 e0       	ldi	r19, 0x02	; 2
    1312:	f8 01       	movw	r30, r16
    1314:	b7 fe       	sbrs	r11, 7
    1316:	07 c0       	rjmp	.+14     	; 0x1326 <__stack+0x227>
    1318:	60 81       	ld	r22, Z
    131a:	71 81       	ldd	r23, Z+1	; 0x01
    131c:	82 81       	ldd	r24, Z+2	; 0x02
    131e:	93 81       	ldd	r25, Z+3	; 0x03
    1320:	0c 5f       	subi	r16, 0xFC	; 252
    1322:	1f 4f       	sbci	r17, 0xFF	; 255
    1324:	06 c0       	rjmp	.+12     	; 0x1332 <__stack+0x233>
    1326:	60 81       	ld	r22, Z
    1328:	71 81       	ldd	r23, Z+1	; 0x01
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 5f       	subi	r16, 0xFE	; 254
    1330:	1f 4f       	sbci	r17, 0xFF	; 255
    1332:	a4 01       	movw	r20, r8
    1334:	fc d0       	rcall	.+504    	; 0x152e <__ultoa_invert>
    1336:	a8 2e       	mov	r10, r24
    1338:	a8 18       	sub	r10, r8
    133a:	fb 2d       	mov	r31, r11
    133c:	ff 77       	andi	r31, 0x7F	; 127
    133e:	bf 2e       	mov	r11, r31
    1340:	b6 fe       	sbrs	r11, 6
    1342:	0b c0       	rjmp	.+22     	; 0x135a <__stack+0x25b>
    1344:	2b 2d       	mov	r18, r11
    1346:	2e 7f       	andi	r18, 0xFE	; 254
    1348:	a5 14       	cp	r10, r5
    134a:	50 f4       	brcc	.+20     	; 0x1360 <__stack+0x261>
    134c:	b4 fe       	sbrs	r11, 4
    134e:	0a c0       	rjmp	.+20     	; 0x1364 <__stack+0x265>
    1350:	b2 fc       	sbrc	r11, 2
    1352:	08 c0       	rjmp	.+16     	; 0x1364 <__stack+0x265>
    1354:	2b 2d       	mov	r18, r11
    1356:	2e 7e       	andi	r18, 0xEE	; 238
    1358:	05 c0       	rjmp	.+10     	; 0x1364 <__stack+0x265>
    135a:	7a 2c       	mov	r7, r10
    135c:	2b 2d       	mov	r18, r11
    135e:	03 c0       	rjmp	.+6      	; 0x1366 <__stack+0x267>
    1360:	7a 2c       	mov	r7, r10
    1362:	01 c0       	rjmp	.+2      	; 0x1366 <__stack+0x267>
    1364:	75 2c       	mov	r7, r5
    1366:	24 ff       	sbrs	r18, 4
    1368:	0d c0       	rjmp	.+26     	; 0x1384 <__stack+0x285>
    136a:	fe 01       	movw	r30, r28
    136c:	ea 0d       	add	r30, r10
    136e:	f1 1d       	adc	r31, r1
    1370:	80 81       	ld	r24, Z
    1372:	80 33       	cpi	r24, 0x30	; 48
    1374:	11 f4       	brne	.+4      	; 0x137a <__stack+0x27b>
    1376:	29 7e       	andi	r18, 0xE9	; 233
    1378:	09 c0       	rjmp	.+18     	; 0x138c <__stack+0x28d>
    137a:	22 ff       	sbrs	r18, 2
    137c:	06 c0       	rjmp	.+12     	; 0x138a <__stack+0x28b>
    137e:	73 94       	inc	r7
    1380:	73 94       	inc	r7
    1382:	04 c0       	rjmp	.+8      	; 0x138c <__stack+0x28d>
    1384:	82 2f       	mov	r24, r18
    1386:	86 78       	andi	r24, 0x86	; 134
    1388:	09 f0       	breq	.+2      	; 0x138c <__stack+0x28d>
    138a:	73 94       	inc	r7
    138c:	23 fd       	sbrc	r18, 3
    138e:	12 c0       	rjmp	.+36     	; 0x13b4 <__stack+0x2b5>
    1390:	20 ff       	sbrs	r18, 0
    1392:	06 c0       	rjmp	.+12     	; 0x13a0 <__stack+0x2a1>
    1394:	5a 2c       	mov	r5, r10
    1396:	73 14       	cp	r7, r3
    1398:	18 f4       	brcc	.+6      	; 0x13a0 <__stack+0x2a1>
    139a:	53 0c       	add	r5, r3
    139c:	57 18       	sub	r5, r7
    139e:	73 2c       	mov	r7, r3
    13a0:	73 14       	cp	r7, r3
    13a2:	60 f4       	brcc	.+24     	; 0x13bc <__stack+0x2bd>
    13a4:	b7 01       	movw	r22, r14
    13a6:	80 e2       	ldi	r24, 0x20	; 32
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	2c 87       	std	Y+12, r18	; 0x0c
    13ac:	8e d0       	rcall	.+284    	; 0x14ca <fputc>
    13ae:	73 94       	inc	r7
    13b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    13b2:	f6 cf       	rjmp	.-20     	; 0x13a0 <__stack+0x2a1>
    13b4:	73 14       	cp	r7, r3
    13b6:	10 f4       	brcc	.+4      	; 0x13bc <__stack+0x2bd>
    13b8:	37 18       	sub	r3, r7
    13ba:	01 c0       	rjmp	.+2      	; 0x13be <__stack+0x2bf>
    13bc:	31 2c       	mov	r3, r1
    13be:	24 ff       	sbrs	r18, 4
    13c0:	11 c0       	rjmp	.+34     	; 0x13e4 <__stack+0x2e5>
    13c2:	b7 01       	movw	r22, r14
    13c4:	80 e3       	ldi	r24, 0x30	; 48
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	2c 87       	std	Y+12, r18	; 0x0c
    13ca:	7f d0       	rcall	.+254    	; 0x14ca <fputc>
    13cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    13ce:	22 ff       	sbrs	r18, 2
    13d0:	16 c0       	rjmp	.+44     	; 0x13fe <__stack+0x2ff>
    13d2:	21 ff       	sbrs	r18, 1
    13d4:	03 c0       	rjmp	.+6      	; 0x13dc <__stack+0x2dd>
    13d6:	88 e5       	ldi	r24, 0x58	; 88
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <__stack+0x2e1>
    13dc:	88 e7       	ldi	r24, 0x78	; 120
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	b7 01       	movw	r22, r14
    13e2:	0c c0       	rjmp	.+24     	; 0x13fc <__stack+0x2fd>
    13e4:	82 2f       	mov	r24, r18
    13e6:	86 78       	andi	r24, 0x86	; 134
    13e8:	51 f0       	breq	.+20     	; 0x13fe <__stack+0x2ff>
    13ea:	21 fd       	sbrc	r18, 1
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <__stack+0x2f3>
    13ee:	80 e2       	ldi	r24, 0x20	; 32
    13f0:	01 c0       	rjmp	.+2      	; 0x13f4 <__stack+0x2f5>
    13f2:	8b e2       	ldi	r24, 0x2B	; 43
    13f4:	27 fd       	sbrc	r18, 7
    13f6:	8d e2       	ldi	r24, 0x2D	; 45
    13f8:	b7 01       	movw	r22, r14
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	66 d0       	rcall	.+204    	; 0x14ca <fputc>
    13fe:	a5 14       	cp	r10, r5
    1400:	30 f4       	brcc	.+12     	; 0x140e <__stack+0x30f>
    1402:	b7 01       	movw	r22, r14
    1404:	80 e3       	ldi	r24, 0x30	; 48
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	60 d0       	rcall	.+192    	; 0x14ca <fputc>
    140a:	5a 94       	dec	r5
    140c:	f8 cf       	rjmp	.-16     	; 0x13fe <__stack+0x2ff>
    140e:	aa 94       	dec	r10
    1410:	f4 01       	movw	r30, r8
    1412:	ea 0d       	add	r30, r10
    1414:	f1 1d       	adc	r31, r1
    1416:	80 81       	ld	r24, Z
    1418:	b7 01       	movw	r22, r14
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	56 d0       	rcall	.+172    	; 0x14ca <fputc>
    141e:	a1 10       	cpse	r10, r1
    1420:	f6 cf       	rjmp	.-20     	; 0x140e <__stack+0x30f>
    1422:	33 20       	and	r3, r3
    1424:	09 f4       	brne	.+2      	; 0x1428 <__stack+0x329>
    1426:	5d ce       	rjmp	.-838    	; 0x10e2 <vfprintf+0x4c>
    1428:	b7 01       	movw	r22, r14
    142a:	80 e2       	ldi	r24, 0x20	; 32
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	4d d0       	rcall	.+154    	; 0x14ca <fputc>
    1430:	3a 94       	dec	r3
    1432:	f7 cf       	rjmp	.-18     	; 0x1422 <__stack+0x323>
    1434:	f7 01       	movw	r30, r14
    1436:	86 81       	ldd	r24, Z+6	; 0x06
    1438:	97 81       	ldd	r25, Z+7	; 0x07
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <__stack+0x341>
    143c:	8f ef       	ldi	r24, 0xFF	; 255
    143e:	9f ef       	ldi	r25, 0xFF	; 255
    1440:	2c 96       	adiw	r28, 0x0c	; 12
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	df 90       	pop	r13
    145a:	cf 90       	pop	r12
    145c:	bf 90       	pop	r11
    145e:	af 90       	pop	r10
    1460:	9f 90       	pop	r9
    1462:	8f 90       	pop	r8
    1464:	7f 90       	pop	r7
    1466:	6f 90       	pop	r6
    1468:	5f 90       	pop	r5
    146a:	4f 90       	pop	r4
    146c:	3f 90       	pop	r3
    146e:	2f 90       	pop	r2
    1470:	08 95       	ret

00001472 <__eewr_block_m128>:
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	02 c0       	rjmp	.+4      	; 0x147c <__eewr_block_m128+0xa>
    1478:	2d 91       	ld	r18, X+
    147a:	05 d0       	rcall	.+10     	; 0x1486 <__eewr_r18_m128>
    147c:	41 50       	subi	r20, 0x01	; 1
    147e:	50 40       	sbci	r21, 0x00	; 0
    1480:	d8 f7       	brcc	.-10     	; 0x1478 <__eewr_block_m128+0x6>
    1482:	08 95       	ret

00001484 <__eewr_byte_m128>:
    1484:	26 2f       	mov	r18, r22

00001486 <__eewr_r18_m128>:
    1486:	e1 99       	sbic	0x1c, 1	; 28
    1488:	fe cf       	rjmp	.-4      	; 0x1486 <__eewr_r18_m128>
    148a:	9f bb       	out	0x1f, r25	; 31
    148c:	8e bb       	out	0x1e, r24	; 30
    148e:	2d bb       	out	0x1d, r18	; 29
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	e2 9a       	sbi	0x1c, 2	; 28
    1496:	e1 9a       	sbi	0x1c, 1	; 28
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	01 96       	adiw	r24, 0x01	; 1
    149c:	08 95       	ret

0000149e <strnlen_P>:
    149e:	fc 01       	movw	r30, r24
    14a0:	05 90       	lpm	r0, Z+
    14a2:	61 50       	subi	r22, 0x01	; 1
    14a4:	70 40       	sbci	r23, 0x00	; 0
    14a6:	01 10       	cpse	r0, r1
    14a8:	d8 f7       	brcc	.-10     	; 0x14a0 <strnlen_P+0x2>
    14aa:	80 95       	com	r24
    14ac:	90 95       	com	r25
    14ae:	8e 0f       	add	r24, r30
    14b0:	9f 1f       	adc	r25, r31
    14b2:	08 95       	ret

000014b4 <strnlen>:
    14b4:	fc 01       	movw	r30, r24
    14b6:	61 50       	subi	r22, 0x01	; 1
    14b8:	70 40       	sbci	r23, 0x00	; 0
    14ba:	01 90       	ld	r0, Z+
    14bc:	01 10       	cpse	r0, r1
    14be:	d8 f7       	brcc	.-10     	; 0x14b6 <strnlen+0x2>
    14c0:	80 95       	com	r24
    14c2:	90 95       	com	r25
    14c4:	8e 0f       	add	r24, r30
    14c6:	9f 1f       	adc	r25, r31
    14c8:	08 95       	ret

000014ca <fputc>:
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	18 2f       	mov	r17, r24
    14d4:	09 2f       	mov	r16, r25
    14d6:	eb 01       	movw	r28, r22
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	81 fd       	sbrc	r24, 1
    14dc:	03 c0       	rjmp	.+6      	; 0x14e4 <fputc+0x1a>
    14de:	8f ef       	ldi	r24, 0xFF	; 255
    14e0:	9f ef       	ldi	r25, 0xFF	; 255
    14e2:	20 c0       	rjmp	.+64     	; 0x1524 <fputc+0x5a>
    14e4:	82 ff       	sbrs	r24, 2
    14e6:	10 c0       	rjmp	.+32     	; 0x1508 <fputc+0x3e>
    14e8:	4e 81       	ldd	r20, Y+6	; 0x06
    14ea:	5f 81       	ldd	r21, Y+7	; 0x07
    14ec:	2c 81       	ldd	r18, Y+4	; 0x04
    14ee:	3d 81       	ldd	r19, Y+5	; 0x05
    14f0:	42 17       	cp	r20, r18
    14f2:	53 07       	cpc	r21, r19
    14f4:	7c f4       	brge	.+30     	; 0x1514 <fputc+0x4a>
    14f6:	e8 81       	ld	r30, Y
    14f8:	f9 81       	ldd	r31, Y+1	; 0x01
    14fa:	9f 01       	movw	r18, r30
    14fc:	2f 5f       	subi	r18, 0xFF	; 255
    14fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1500:	39 83       	std	Y+1, r19	; 0x01
    1502:	28 83       	st	Y, r18
    1504:	10 83       	st	Z, r17
    1506:	06 c0       	rjmp	.+12     	; 0x1514 <fputc+0x4a>
    1508:	e8 85       	ldd	r30, Y+8	; 0x08
    150a:	f9 85       	ldd	r31, Y+9	; 0x09
    150c:	81 2f       	mov	r24, r17
    150e:	09 95       	icall
    1510:	89 2b       	or	r24, r25
    1512:	29 f7       	brne	.-54     	; 0x14de <fputc+0x14>
    1514:	2e 81       	ldd	r18, Y+6	; 0x06
    1516:	3f 81       	ldd	r19, Y+7	; 0x07
    1518:	2f 5f       	subi	r18, 0xFF	; 255
    151a:	3f 4f       	sbci	r19, 0xFF	; 255
    151c:	3f 83       	std	Y+7, r19	; 0x07
    151e:	2e 83       	std	Y+6, r18	; 0x06
    1520:	81 2f       	mov	r24, r17
    1522:	90 2f       	mov	r25, r16
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	08 95       	ret

0000152e <__ultoa_invert>:
    152e:	fa 01       	movw	r30, r20
    1530:	aa 27       	eor	r26, r26
    1532:	28 30       	cpi	r18, 0x08	; 8
    1534:	51 f1       	breq	.+84     	; 0x158a <__ultoa_invert+0x5c>
    1536:	20 31       	cpi	r18, 0x10	; 16
    1538:	81 f1       	breq	.+96     	; 0x159a <__ultoa_invert+0x6c>
    153a:	e8 94       	clt
    153c:	6f 93       	push	r22
    153e:	6e 7f       	andi	r22, 0xFE	; 254
    1540:	6e 5f       	subi	r22, 0xFE	; 254
    1542:	7f 4f       	sbci	r23, 0xFF	; 255
    1544:	8f 4f       	sbci	r24, 0xFF	; 255
    1546:	9f 4f       	sbci	r25, 0xFF	; 255
    1548:	af 4f       	sbci	r26, 0xFF	; 255
    154a:	b1 e0       	ldi	r27, 0x01	; 1
    154c:	3e d0       	rcall	.+124    	; 0x15ca <__ultoa_invert+0x9c>
    154e:	b4 e0       	ldi	r27, 0x04	; 4
    1550:	3c d0       	rcall	.+120    	; 0x15ca <__ultoa_invert+0x9c>
    1552:	67 0f       	add	r22, r23
    1554:	78 1f       	adc	r23, r24
    1556:	89 1f       	adc	r24, r25
    1558:	9a 1f       	adc	r25, r26
    155a:	a1 1d       	adc	r26, r1
    155c:	68 0f       	add	r22, r24
    155e:	79 1f       	adc	r23, r25
    1560:	8a 1f       	adc	r24, r26
    1562:	91 1d       	adc	r25, r1
    1564:	a1 1d       	adc	r26, r1
    1566:	6a 0f       	add	r22, r26
    1568:	71 1d       	adc	r23, r1
    156a:	81 1d       	adc	r24, r1
    156c:	91 1d       	adc	r25, r1
    156e:	a1 1d       	adc	r26, r1
    1570:	20 d0       	rcall	.+64     	; 0x15b2 <__ultoa_invert+0x84>
    1572:	09 f4       	brne	.+2      	; 0x1576 <__ultoa_invert+0x48>
    1574:	68 94       	set
    1576:	3f 91       	pop	r19
    1578:	2a e0       	ldi	r18, 0x0A	; 10
    157a:	26 9f       	mul	r18, r22
    157c:	11 24       	eor	r1, r1
    157e:	30 19       	sub	r19, r0
    1580:	30 5d       	subi	r19, 0xD0	; 208
    1582:	31 93       	st	Z+, r19
    1584:	de f6       	brtc	.-74     	; 0x153c <__ultoa_invert+0xe>
    1586:	cf 01       	movw	r24, r30
    1588:	08 95       	ret
    158a:	46 2f       	mov	r20, r22
    158c:	47 70       	andi	r20, 0x07	; 7
    158e:	40 5d       	subi	r20, 0xD0	; 208
    1590:	41 93       	st	Z+, r20
    1592:	b3 e0       	ldi	r27, 0x03	; 3
    1594:	0f d0       	rcall	.+30     	; 0x15b4 <__ultoa_invert+0x86>
    1596:	c9 f7       	brne	.-14     	; 0x158a <__ultoa_invert+0x5c>
    1598:	f6 cf       	rjmp	.-20     	; 0x1586 <__ultoa_invert+0x58>
    159a:	46 2f       	mov	r20, r22
    159c:	4f 70       	andi	r20, 0x0F	; 15
    159e:	40 5d       	subi	r20, 0xD0	; 208
    15a0:	4a 33       	cpi	r20, 0x3A	; 58
    15a2:	18 f0       	brcs	.+6      	; 0x15aa <__ultoa_invert+0x7c>
    15a4:	49 5d       	subi	r20, 0xD9	; 217
    15a6:	31 fd       	sbrc	r19, 1
    15a8:	40 52       	subi	r20, 0x20	; 32
    15aa:	41 93       	st	Z+, r20
    15ac:	02 d0       	rcall	.+4      	; 0x15b2 <__ultoa_invert+0x84>
    15ae:	a9 f7       	brne	.-22     	; 0x159a <__ultoa_invert+0x6c>
    15b0:	ea cf       	rjmp	.-44     	; 0x1586 <__ultoa_invert+0x58>
    15b2:	b4 e0       	ldi	r27, 0x04	; 4
    15b4:	a6 95       	lsr	r26
    15b6:	97 95       	ror	r25
    15b8:	87 95       	ror	r24
    15ba:	77 95       	ror	r23
    15bc:	67 95       	ror	r22
    15be:	ba 95       	dec	r27
    15c0:	c9 f7       	brne	.-14     	; 0x15b4 <__ultoa_invert+0x86>
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	61 05       	cpc	r22, r1
    15c6:	71 05       	cpc	r23, r1
    15c8:	08 95       	ret
    15ca:	9b 01       	movw	r18, r22
    15cc:	ac 01       	movw	r20, r24
    15ce:	0a 2e       	mov	r0, r26
    15d0:	06 94       	lsr	r0
    15d2:	57 95       	ror	r21
    15d4:	47 95       	ror	r20
    15d6:	37 95       	ror	r19
    15d8:	27 95       	ror	r18
    15da:	ba 95       	dec	r27
    15dc:	c9 f7       	brne	.-14     	; 0x15d0 <__ultoa_invert+0xa2>
    15de:	62 0f       	add	r22, r18
    15e0:	73 1f       	adc	r23, r19
    15e2:	84 1f       	adc	r24, r20
    15e4:	95 1f       	adc	r25, r21
    15e6:	a0 1d       	adc	r26, r0
    15e8:	08 95       	ret

000015ea <_exit>:
    15ea:	f8 94       	cli

000015ec <__stop_program>:
    15ec:	ff cf       	rjmp	.-2      	; 0x15ec <__stop_program>
